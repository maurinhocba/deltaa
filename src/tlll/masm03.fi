 SUBROUTINE masm03(heade,coord,emass,mass,sumat,lumpd,ifpre,zigzag)
 !********************************************************************
 !
 !***  evaluates mass matrix for shell/triangular elements
 !
 !********************************************************************
 IMPLICIT NONE
 LOGICAL, INTENT(IN) :: lumpd,zigzag
 INTEGER(kind=4), INTENT(IN) :: ifpre(:,:)
 REAL(kind=8), INTENT(IN) :: coord(:,:)
 REAL (kind=8), INTENT(IN OUT) :: emass(:,:),sumat,mass(:)
 TYPE( ele03 ), POINTER :: heade

 !        local variables
 TYPE( ele03 ), POINTER :: e
 INTEGER (kind=4) ii,j,j1,k,kk,k1,l,n,m,m1,isec,idof,nposn,lmt(9),lmr(6), &
                  nvart,nvarr,osec,g,g1
 REAL    (kind=8) at,ar,tmass,rmass, mt(45),mr(21),sume1,thick,ix(0:2),im(2)
 REAL    (kind=8), PARAMETER :: diag = 0.5d0, outd = 0.25d0
 REAL    (kind=8), PARAMETER :: b(3,3) = &
              (/ diag, outd, outd, outd, diag, outd, outd, outd, diag /)
 TYPE (section), POINTER :: sec
 INTEGER (kind=4) poesti
 poesti(n,l,j) = (n-l)*(l-1)/2+j    ! position l,j in mass(nxn)

 sume1 = 0d0
 nvart = 9
 nvarr = 5
 e => heade
 DO
   IF( .NOT.ASSOCIATED (e) )EXIT
   isec = e%matno                  !associated material
   IF( isec /= osec )THEN             !present and previous material diff
     sec => psecs(isec)%p
     thick = sec%rprop(1)
     tmass = sec%rprop(5)             ! surface density
     rmass = tmass*thick**2/12d0
     IF( sec%secty == 15 .AND. zigzag ) ix = sec%rprop(74:76)/tmass
     osec   = isec                    !update previous material
   END IF

   at = tmass*e%dvolu/3d0         !nodal translational mass
   ar = rmass*e%dvolu/3d0         !nodal rotational mass

   DO n = 1,3
     l = e%lnods(n)     !corner
     k = e%lnods(n+3)   !side
     emass(1:3,l) = emass(1:3,l) +  at
     emass(4:5,k) = emass(4:5,k) +  ar
     IF( zigzag )THEN
       im(1) = ix(1)*e%nangl(1,n)**2 + ix(2)*e%nangl(2,n)**2
       im(2) = ix(2)*e%nangl(1,n)**2 + ix(1)*e%nangl(2,n)**2
       emass(7,l) = emass(7,l)+at*im(1)
       emass(8,l) = emass(8,l)+at*im(2)
     END IF
   END DO

   sume1 = sume1 + at*3d0

   IF(.NOT.lumpd) THEN !consistent mass matrix  Assembles over MASS(maxa)
     ! zigzag must be lumped only
     mt  = 0d0     !initializes translational mass
     mr  = 0d0     !initializes rotational mass
     ii = 0        !initializes submatrix
     g = 1         !initializes pointer to equation array (T)
     g1= 1         !initializes pointer to equation array (R)
     DO n = 1,3               !for each node
       j = (n-1)*3            !pointer to last value of previous row (T)
       j1= (n-1)*2            !pointer to last value of previous row (R)
       m = e%lnods(n)              !vertex node
       m1= e%lnods(n+3)            !side node
       DO l = n,3                  !for each node
         ii = ii+1                    !update pointer to submatrix
         kk = (l-1)*3                 !pointer to last value of previous column (T)
         k1 = (l-1)*2                 !pointer to last value of previous column (R)
         DO idof = 1,3                !for each translational dof
           nposn = poesti(9,j+idof,kk+idof)       !position
           mt(nposn) = at*b(n,l)                  !add
         END DO
         DO idof = 1,2                !for each rotational dof
           nposn = poesti(6,j1+idof,k1+idof)      !position
           mr(nposn) = ar*b(n,l)                  !add
         END DO
       END DO
       lmt(g:g+2)   = ifpre(1:3,m)
       lmr(g1:g1+1) = ifpre(4:5,m1)
       g = g+3
       g1= g1+2
     END DO
     CALL ensmat(nvart,lmt(1),mt(1) ,mass(1))
     CALL ensmat(nvarr,lmr(1),mr(1) ,mass(1))
   END IF
   e => e%next
 END DO
 WRITE(lures,"(//'  total mass for shell element :', e15.7)")sume1
 sumat = sumat + sume1
 RETURN
 END SUBROUTINE masm03
