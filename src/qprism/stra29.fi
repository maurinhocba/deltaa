 SUBROUTINE stra29( e, x, ansmm, anssh, nassp, cq, ccas, c33, tq, tas, gas, f3)
 !-------------------------------------------------------------------
 !
 !     EVALUATION OF INITIAL STRAINS T-L 3-D Solid-Shell Bezier Prism
 !
 !-------------------------------------------------------------------

 IMPLICIT NONE

 ! dummy arguments
 REAL(kind=8),INTENT (IN) :: x(:,:)       !initial coordinates
 TYPE (ele29), POINTER  :: e                  !pointer to element
 INTEGER (kind=4), INTENT(IN) :: ansmm,   &   !Assumed Natural Strain Membrane Model
                                 anssh,   &   !Assumed Natural Strain SHear model
                                 nassp
 REAL(kind=8), INTENT(OUT) :: cq(:,:,:),       & !(3,nface,ngaup),      metric tensor at each face at each gauss point
                              ccas(:,:,:),     & !(2,nface,ngaup),     cartesian shear strains at in-plane integration Points
                              c33(:,:),        & !(ngaup,2),
                              tq(:,:,:,:),     & !(ndime,3,nface,3),
                              tas(:,:,:),      & !(ndime,nassp,nface),  der x/x_3 at Assumed Strain points
                              gas(:,:,:),      & !(ndime,nassp,nface),  der x/tan at Assumed Strain points
                              f3(:,:,:)          !(ndime,nface,ngaup)
 ! local variables
 INTEGER (kind=4), PARAMETER :: ndime=3

 INTEGER (kind=4) ielem,             & !element number
                  face,gp,vert,jj !indexes

 REAL (kind=8) :: ji(2,2),f(3,3)              !jacobinas

 ! variables for assumed strain transverse shear
 REAL (kind=8) :: cn(3,2,3),                   &
                  cmas(nassp,nface),           & ! mixed strains at Assumed Strain Points
                  vas(2)                         ! mixed shear strains at integration  Points

 ! variables for normal strain

   ielem = e%numel                   !element number

   ! First loop to compute C components at faces
   DO face=1,nface ! for each face
     SELECT CASE (ansmm )
     CASE (0)   !standard displacement formulation
       DO gp=1,ngaup !in-plane Gauss points
         !gradient in local system at Gauss  points
         tq(:,1,face,gp) = MATMUL(x,e%ipcdm(:,1,face,gp))
         tq(:,2,face,gp) = MATMUL(x,e%ipcdm(:,2,face,gp))
       END DO
     CASE (2)   !ANS sampling points at mid-side of each subtriangle
       DO jj=1,3    !mid-side points of each subtriangle (sampling points)
         !gradient in local system at sampling points
         tq(:,jj,face,1) = MATMUL(x,ntan2(:,  jj,face))   !t_xi
         tq(:,jj,face,2) = MATMUL(x,ntan2(:,3+jj,face))   !t_eta
         tq(:,jj,face,3) = MATMUL(x,ntan2(:,6+jj,face))   !t_t
         !Components of First Fundamental Form  (FFF) in natural coordinates at each assumed strain point
         cn(jj,face,1) = DOT_PRODUCT(tq(:,jj,face,1),tq(:,jj,face,1)) !Cxx
         cn(jj,face,2) = DOT_PRODUCT(tq(:,jj,face,2),tq(:,jj,face,2)) !Cee
         cn(jj,face,3) = DOT_PRODUCT(tq(:,jj,face,3),tq(:,jj,face,3)) !Ctt
       END DO
       !First Fundamental Form (FFF) at each mid-side (integration) point in natural coordinates
       cq(:,face,1) =  MATMUL(pa2(:,:,1),RESHAPE((/cn(:,face,:)/),(/ansmm/)))   !(1/2, 0 ) (xita,eta)
       cq(:,face,2) =  MATMUL(pa2(:,:,2),RESHAPE((/cn(:,face,:)/),(/ansmm/)))   !(1/2,1/2)
       cq(:,face,3) =  MATMUL(pa2(:,:,3),RESHAPE((/cn(:,face,:)/),(/ansmm/)))   !( 0 ,1/2)
     END SELECT
     !For shear strain
     SELECT CASE (anssh)
     CASE (0)
       jj = 0
       DO gp = 1,ngaup
         jj = jj + 1
         tas(:,jj,face) = MATMUL(x,e%cartd(:,face,gp))                !der x/x_3  at gauss point (shear strain)
         gas(:,jj,face) = MATMUL(x,e%ipcdm(:,1,face,gp))              !der x/1 at each gauss point (shear strain)
         ccas(1,face,gp) = DOT_PRODUCT(tas(:,jj,face),gas(:,jj,face)) !cartesyan 1-3 shear strain at gauss points
         jj = jj + 1
         tas(:,jj,face) = tas(:,jj-1,face)                            !der x/x_3  at gauss point (shear strain)
         gas(:,jj,face) = MATMUL(x,e%ipcdm(:,2,face,gp))              !der x/2 at each gauss point (shear strain)
         ccas(2,face,gp) = DOT_PRODUCT(tas(:,jj,face),gas(:,jj,face)) !cartesyan 2-3 shear strain at gauss points
       END DO
     CASE (1:2)
       tas(:,:,face) = MATMUL(x,e%nfdas(:,:,face))          !der x/x_3  at each assumed strain point (shear)
       gas(:,:,face) = MATMUL(x,ntan(:,:,face))             !der x/tan  at each assumed strain point (shear)
       DO jj=1,nassp    !for each assumed strain point (shear)
         cmas(jj,face) = DOT_PRODUCT(tas(:,jj,face),gas(:,jj,face)) !mixed tangent-normal (t-x3) shear strain
       END DO
     END SELECT
     DO gp=1,ngaup !compute metric tensors components at in-plane integration points
       IF( ansmm /= 0 .OR. anssh /= 0 )ji = e%jacin(:,:,face,gp)   !inverse in-plane jacobian at integration point of the face
       SELECT CASE (ansmm)       ! 1,2,4
       CASE (0)
         !First Fundamental Form  (FFF) in local cartesisn coordinates at each Gauss Point
         cq(1,face,gp) =     DOT_PRODUCT(tq(:,1,face,gp),tq(:,1,face,gp)) !C11
         cq(2,face,gp) =     DOT_PRODUCT(tq(:,2,face,gp),tq(:,2,face,gp)) !C22
         cq(3,face,gp) =     DOT_PRODUCT(tq(:,1,face,gp),tq(:,2,face,gp)) !C12
       CASE (2)
         f = RESHAPE( (/ ji(1,1)**2,              ji(1,2)**2,      ji(1,1)*ji(1,2), &     !transformation matrix for a 2x2 tensor
                         ji(2,1)**2,              ji(2,2)**2,      ji(2,1)*ji(2,2), &
                         2d0*ji(1,1)*ji(2,1), 2d0*ji(1,2)*ji(2,2), ji(1,1)*ji(2,2)+ji(1,2)*ji(2,1) /),(/3,3/))
         !transform FFF to local Cartesian system
         cq(1:3,face,gp) = MATMUL(f,cq(1:3,face,gp))            !FFF cartesian at GP of face
       END SELECT
       !compute cartesian transverse shear strain components at Gauss points (gp) at faces (face)
       IF( anssh > 0 ) THEN     ! 5,6
         vas(1:2) = MATMUL(pag(1:2,1:nassp,gp),cmas(:,face)) !(2) (NASSP) mixed shear strains at gauss points
         ccas(:,face,gp) = MATMUL(vas,ji)                    !x_1-x_3 & x_2-x3
       END IF
       f3(:,face,gp) = MATMUL(x,e%cartd(:,face,gp))            !f_3 at mid-surface
       c33(gp,face) = DOT_PRODUCT(f3(:,face,gp),f3(:,face,gp))                       !C(3,3) at mid-surface
     END DO
   END DO

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE stra29
