 SUBROUTINE gaus29(heade,coord,istop,angdf,locax,isgo,psgo,ngaus,ansmm,anssh,nassp,small)
 !----------------------------------------------------------------------------
 !--- evaluates gauss points constants for solid-shell element 29 Bezier-PRISM
 !----------------------------------------------------------------------------
 USE ele18_db, ONLY : lgst18
 IMPLICIT NONE
 ! dummy arguments
 INTEGER (kind=4), INTENT(OUT) :: istop,    & ! error flag to stop execution
                                  isgo(:,:)    ! Gauss points to extrapolate values at external surfaces
 INTEGER (kind=4), INTENT(IN) :: locax,     & ! code por local system
                                 ngaus,     & ! number of Gauss point across the thickness
                                 ansmm,     & ! ANS Membrane Model
                                 anssh,     & ! ANS SHear model
                                 nassp
 REAL (kind=8), INTENT(IN) :: coord(:,:), &   !initial coordinates
                              angdf           !default angle local axes - Ort_Axes
 REAL (kind=8), INTENT(OUT) :: psgo(:,:)      !factor for extrapolation from Gauss points to external surfaces
 LOGICAL, INTENT(IN) :: small 
 TYPE (ele29), POINTER :: heade               !pointer to first element in the set

 INTEGER (kind=4), PARAMETER :: ndime = 3
 INTEGER (kind=4) ielem,iface,ias,g,k,ierr,flag
 REAL (kind=8), PARAMETER :: gpvtt(3) =(/ -r3_1, r3_1, 0d0 /)  !bottom, top, middle
 REAL (kind=8) :: deriv(nnode,3,ngaup,ngaud),ders(nnode,3,9,nface),shape(nnode),sh(2,ngaus)
 REAL (kind=8) :: ang,factor
 REAL (kind=8) :: x(3,nnode),lb(3,3),          &
                  cq(3,nface,ngaup),           & !metric tensor at each face at each gauss point
                  ccas(2,nface,ngaup),         & ! cartesian shear strains at in-plane integration Points
                  c33(ngaup,2),                &
                  tq(ndime,3,nface,3),         &
                  tas(ndime,nassp,nface),      & ! der x/x_3 at Assumed Strain points
                  gas(ndime,nassp,nface),      & ! der x/tan at Assumed Strain points
                  f3(ndime,nface,ngaup),delta,stran(6),r(3,3),eig(3)
 TYPE (ele29), POINTER :: e           !pointer to an element
 REAL (kind=8) :: thf(ngaus),   & !G-P positions
                  wei(ngaus)      !G-P weigths
 INTERFACE
   INCLUDE 'shape4.h'
 END INTERFACE

 !     ---------------------------------------------------------

 ! compute auxiliar values to extrapolate to external surfaces from Gauss Points
 IF( ngaus == 2 )THEN
   CALL gaussq(ngaus,thf(1),wei(1)) !integration points through the thickness
   isgo=RESHAPE((/1,2,1,2/),(/2,2/))
   psgo = RESHAPE((/ 1.366025403784438,-0.366025403784438, &  !extrapolates directly (STP must do nothing)
                   -0.366025403784438, 1.366025403784438/),(/2,2/))
 ELSE
   CALL gaussq(ngaus,thf(1),wei(1)) !integration points through the thickness
   !extrapolates directly to external surfaces (STP must do nothing, or extrapolate to nodes)
   isgo = RESHAPE((/ 1,2, ngaus-1,ngaus /),(/2,2/))
   factor = 1.d0+(1d0-thf(ngaus))/(thf(ngaus)-thf(ngaus-1))
   psgo = RESHAPE((/ factor, 1d0-factor, 1d0-factor, factor /),(/2,2/))
   WRITE(58,"(4i12,/,4e12.4)")isgo,psgo
 END IF
 !     ---------------------------------------------------------
 IF( ansmm > 0 )THEN
   DO iface=1,nface
     DO ias=1,nasmm
       CALL shape4(nnode,shape(1),ders(1,1,ias,iface),gpmm(1,ias),gpmm(2,ias),gpvtt(iface),.TRUE.,.TRUE.)
       SELECT CASE (ias)
       CASE (1:3)
         ntan2(:,ias,iface) = ders(:,1,ias,iface)   !for e_xixi
       CASE (4:6)
         ntan2(:,ias,iface) = ders(:,2,ias,iface)   !for e_etaeta
       CASE (7:9)
         ntan2(:,ias,iface) = (-ders(:,1,ias,iface)+ders(:,2,ias,iface))/r2  !for e_tt
       END SELECT
     END DO
   END DO
 END IF
 !     compute Nodal function derivatives for DVOLU, JACI and Transverse Axial Strain
 DO k=1,3
   DO g=1,3
     CALL shape4(nnode,shape(1),deriv(1,1,g,k),psg(1,g),psg(2,g),gpvtt(k),.TRUE.,.TRUE.)
   END DO
 END DO
 ! nodal function derivatives at shear sampling points (DERS)
 IF( anssh > 0 )THEN
   DO iface=1,nface
     DO ias=1,nassp
       CALL shape4(nnode,shape(1),ders(1,1,ias,iface),gps(1,ias,iface),gps(2,ias,iface),gpvtt(iface),.TRUE.,.TRUE.)
       SELECT CASE (ias)
       CASE (1:2,7)
         ntan(:,ias,iface) = ders(:,1,ias,iface)
       CASE (3:4)
         ntan(:,ias,iface) = (-ders(:,1,ias,iface)+ders(:,2,ias,iface))/r2
       CASE (5:6,8)
         ntan(:,ias,iface) = ders(:,2,ias,iface)
       END SELECT
     END DO
   END DO
 END IF
 !     ---------------------------------------------------------

 factor = ATAN(1d0)/45d0         !pi/180

   DO g=1,ngaus
     ! this are linear functions to interpolate between surfaces
     sh(1,g) =  0.5d0*(1d0-thf(g)*r3)
     sh(2,g) =  0.5d0*(1d0+thf(g)*r3)
   END DO
 e => heade       !point to first element
 DO               !loop over the elements in the set
   IF (.NOT.ASSOCIATED (e) ) EXIT  !if all element processed, exit

   x(:,1:nnode) = coord(:,e%lnods(1:nnode))     ! get original coordinates (element nodes)
   ang = (e%angle+angdf)*factor                 ! angle between local system and standard (in radians)
   ielem = e%numel                              ! element label
   CALL lcsy29(lb,x,locax,ang)        ! compute local shell system
   ! compute element local systems, nodal functions and derivatives
   CALL jacob29(deriv,e%cartd,e%dvol,x,ielem,istop,lb,e%jacin,ders,e%nfdas,ansmm,anssh,nassp,e%ipcdm)
   CALL stra29( e, x, ansmm, anssh, nassp, cq, ccas, c33, tq, tas, gas, f3)
   ! This must be substracted from bar-C to have a unit tensor at initial configuration
   e%cqi = cq
   e%cqi(1:2,:,:) = e%cqi(1:2,:,:) - 1d0
   e%ccasi = ccas
   e%c33i  = c33 - 1d0
   !WRITE(58,"(3e12.4,1x,3e12.4,1x,2e12.4,1x,2e12.4,1x,e12.4 )")(e%cqi(:,:,gp),e%ccasi(:,:,gp),e%c33i(gp),gp=1,ngaup)

   ! substract initial strains
   cq  = cq   - e%cqi
   ccas= ccas - e%ccasi
   c33 = c33  - e%c33i
   ! Gauss point loop
   DO k=1,ngaup      !for each in-plane Gauss Point
     DO g=1,ngaus      !for each TTT Gauss point
       !interpolate metric tensor from lower and upper surfaces
       stran((/1,2,4/)) = sh(1,g)*cq(:,1,k)   + sh(2,g)*cq(:,2,k)     !in-plane components
       stran(5:6)       = sh(1,g)*ccas(:,1,k) + sh(2,g)*ccas(:,2,k)   !transverse shear components
       stran(3)         = sh(1,g)*c33(k,1)    + sh(2,g)*c33(k,2)      !out-of-plane components
       IF( small )THEN               !Green Lagrange strains (twice)
         delta = (SUM(stran(1:3))-3d0)/6d0       !volumetric strain /3
         stran(1:3) = stran(1:3)-delta*2d0-1d0   !shear strains (twice)
       ELSE   ! Hencky (logarithmic) strains (volumetric and deviatoric parts)
         CALL lgst18(stran,r,eig,'RESVPL',ierr,flag,delta)
       END IF
       e%gaus0(:,g,k) =(/ stran, delta /)
     END DO
   END DO
   e%stint = 0d0            !Initializes stresses

   e => e%next          !point to next element
 END DO

 RETURN
 END SUBROUTINE gaus29
