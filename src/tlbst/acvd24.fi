 SUBROUTINE acvd24(ifpre,heade,lside,nelem,nbs,bhead)
 !******************************************************************
 !
 !*** updates internal node numbering and activates degrees of freedom
 !
 !******************************************************************
 USE esets_db, ONLY : gnods, gelem !INTENT(OUT) gnods(maxnn,melen)
 IMPLICIT NONE

 ! dummy arguments
 LOGICAL, INTENT(IN OUT) :: lside !flag TRUE if topology already computed
 INTEGER (kind=4):: ifpre(:,:), & !(OUT) active DOFs
                    nelem         !(IN) number of elements
 INTEGER (kind=4):: nbs           !(OUT) number of branching sides
 TYPE (ele24), POINTER :: heade   !pointer to first element in the set
 TYPE (sideb), POINTER :: bhead   !pointer to first branching side

 ! local variables
 INTEGER (kind=4) i,j,k,n,nbn
 TYPE (ele24), POINTER  :: e                     !element pointers
 TYPE (sideb), POINTER :: si      !pointer to a branching side

 !***  create topological array  lnods(4:6,nelem)

 IF(.NOT.lside) CALL toar24(heade,lside,nbs,bhead,nelem)

 !*** activates degrees of freedom


 e => heade                         !point to first element
 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT   !if all elements processed, Exit loop
   DO i=1,3                   !for each node in the element
     IF( ifpre(1,e%lnods(i)) == 1 ) &   !to avoid to overwrite RIGID constraints
         ifpre(1:3,e%lnods(i)) = 0      !release DOFs
   END DO
   gelem = gelem + 1                !update total number of elements
   gnods(1:3,gelem) = e%lnods(1:3)  !pass the first three nodes
   nbn = 3
   DO i =1,3                        !for each node in the patch
     n = e%lnods(i+3)               ! node number
     IF(n > 0) THEN               ! adjacent element exist ?
       nbn = nbn + 1
       gnods(nbn,gelem) = n
     ELSE IF( n < 0 )THEN !branching side
       si => e%si(i)%p !point SI to the corresponding branching side
       j = -n          !position in side conns
       ! generate connectivities for enlarged element
       k = nbn + 1                     !next position
       nbn = nbn + si%nn-1             !update number of nodes
       gnods(k:nbn,gelem) = (/ ABS(si%lnods(1:j-1)), ABS(si%lnods(j+1:si%nn)) /) !+/-
     END IF
   END DO
   e => e%next                      !point to next element
 END DO

 RETURN
 END SUBROUTINE acvd24
