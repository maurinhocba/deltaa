 SUBROUTINE bphi12s (area,cd,asa,bt,bp,nangl,ji,bth,bph)
 ! compute Strain-displacement matrix for transverse shear
 ! at assumed strain points for SSOLAG  solid-shell element 12 (8 nodes)
 IMPLICIT NONE
 REAL (kind=8), INTENT(IN) :: area(4),  &  ! to compute weighted gradient
                              cd(4,2,4),&  ! in-plane derivatives at sides
                              asa(2,4), &  ! side components in local triad
                              ji(2,2),  &  ! inverse in-plane jacobian at 1st face
                              nangl(2,4)   ! local angles at nodes
 REAL (kind=8), INTENT(OUT) :: bt(2,4,2), &! shear b-matrix at center
                               bp(2,4,4), &! bending b-matrix at center
                               bth(2,4,2),&! shear hourglass b-matrix at center
                               bph(2,4,4)  ! bending hourglass b-matrix at sides

 INTEGER (kind=4) :: i,j
 REAL (kind=8) :: b(2,4,2),ba(2,2),baux(2,4,4)

 ! Bt_phi matrix for Natural coordinates at center
 b(:,1,1) = asa(:,2)/4d0
 b(:,2,1) = asa(:,2)/4d0
 b(:,3,1) = asa(:,4)/4d0
 b(:,4,1) = asa(:,4)/4d0

 b(:,1,2) = asa(:,1)/4d0
 b(:,2,2) = asa(:,3)/4d0
 b(:,3,2) = asa(:,3)/4d0
 b(:,4,2) = asa(:,1)/4d0

 ! Stabilization Bt_phi matrix for Natural coordinates at center
 !bth(:,1,1) = -asa(:,2)        -B_sf_B
  bth(1,1,1) = -( nangl(1,1)*asa(1,2)+nangl(2,1)*asa(2,2))
  bth(2,1,1) = -(-nangl(2,1)*asa(1,2)+nangl(1,1)*asa(2,2))
 !bth(:,2,1) = -asa(:,2)        -B_sf_B
  bth(1,2,1) = -( nangl(1,2)*asa(1,2)+nangl(2,2)*asa(2,2))
  bth(2,2,1) = -(-nangl(2,2)*asa(1,2)+nangl(1,2)*asa(2,2))
 !bth(:,3,1) = +asa(:,4)        +B_sf_D
  bth(1,3,1) = +( nangl(1,3)*asa(1,4)+nangl(2,3)*asa(2,4))
  bth(2,3,1) = +(-nangl(2,3)*asa(1,4)+nangl(1,3)*asa(2,4))
 !bth(:,4,1) = +asa(:,4)        +B_sf_D
  bth(1,4,1) = +( nangl(1,4)*asa(1,4)+nangl(2,4)*asa(2,4))
  bth(2,4,1) = +(-nangl(2,4)*asa(1,4)+nangl(1,4)*asa(2,4))

 !bth(:,1,2) = -asa(:,1)        -B_sf_A
  bth(1,1,2) = -( nangl(1,1)*asa(1,1)+nangl(2,1)*asa(2,1))
  bth(2,1,2) = -(-nangl(2,1)*asa(1,1)+nangl(1,1)*asa(2,1))
 !bth(:,2,2) = -asa(:,3)        +B_sf_C
  bth(1,2,2) = +( nangl(1,2)*asa(1,3)+nangl(2,2)*asa(2,3))
  bth(2,2,2) = +(-nangl(2,2)*asa(1,3)+nangl(1,2)*asa(2,3))
 !bth(:,3,2) = +asa(:,3)        +B_sf_C
  bth(1,3,2) = +( nangl(1,3)*asa(1,3)+nangl(2,3)*asa(2,3))
  bth(2,3,2) = +(-nangl(2,3)*asa(1,3)+nangl(1,3)*asa(2,3))
 !bth(:,4,2) = +asa(:,1)        -B_sf_A
  bth(1,4,2) = -( nangl(1,4)*asa(1,1)+nangl(2,4)*asa(2,1))
  bth(2,4,2) = -(-nangl(2,4)*asa(1,1)+nangl(1,4)*asa(2,1))

 bp = 0d0  !initializes in-plane b-matrix
 DO i=1,4   !for each side/node
   ! Bt_phi matrix for Cartesyan local coordinates
   ba(:,:) = MATMUL(b(:,i,:),ji)
   ! Bt_phi matrix for Cartesyan nodal coordinates
   bt(1,i,:) = nangl(1,i)*ba(1,:)+nangl(2,i)*ba(2,:)  !transform to nodal system
   bt(2,i,:) =-nangl(2,i)*ba(1,:)+nangl(1,i)*ba(2,:)
   DO j=1,4
     ! Bp_phi matrix for Cartesian nodal coordinates
     baux(:,j,1) = cd(j,1,i)*nangl(:,i)
     baux(:,j,2) = cd(j,2,i)*(/-nangl(2,i),nangl(1,i)/)
     baux(:,j,3) = cd(j,2,i)*nangl(:,i)
     baux(:,j,4) = cd(j,1,i)*(/-nangl(2,i),nangl(1,i)/)
   END DO
   bp = bp + baux*area(i)                  !weighted averaged in-plane b-matrix
   bph(:,:,i) = baux(:,:,3)+baux(:,:,4)    !hourglass in-plane b-matrix
 END DO
 !hourglass in-plane b-matrix
 baux(:,:,1) = bp(:,:,3)+bp(:,:,4)
 DO i=1,4   !for each side/node
   bph(:,:,i) = bph(:,:,i) - baux(:,:,1)
 END DO
 RETURN
 END SUBROUTINE bphi12s
