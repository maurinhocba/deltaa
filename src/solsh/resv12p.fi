 SUBROUTINE resv12p( heade, coora, resid, quad, nnode, zigzag, nnb)
 !-------------------------------------------------------------------
 !
 !          EVALUATION OF INTERNAL FORCES ELEMENT T-L 3-D SOLID
 !
 !-------------------------------------------------------------------
 USE npo_db, ONLY : coori,psii,psia  !coordinates at previous iteration
 USE gvar_db, ONLY : ksnxt           !computes Stiffness matrix in next iteration
 IMPLICIT NONE

 ! dummy arguments
 INTEGER (kind=4), INTENT(IN) ::  nnode,nnb   !number of nodes
 REAL(kind=8),INTENT (IN) :: coora(:,:)       !present coordinates
 REAL(kind=8),INTENT (IN OUT) :: resid(:,:)   !internal nodal forces
 TYPE (ele12), POINTER  :: heade              !pointer to first element
 LOGICAL, INTENT(IN) ::    quad,    &   !.TRUE. for quadratic in-plane approach
                           zigzag
 ! local variables
 INTEGER (kind=4), PARAMETER :: ndime=3
 ! variables for assumed strain transverse shear
 REAL (kind=8) :: tas(3,3),      & ! der x/x_3 at Assumed Strain points
                  gas(3,3),      & ! der x/tan at Assumed Strain points
                  vas(3,2),      & ! strains at Assumed Strain Points
                  psib(3),       & ! Phi strains at Assumed Strain Points
                  bs(3,6,2,2)      ! Bs matrix at Assumed strain Points
 TYPE (ele12), POINTER :: e      !pointer to an element data
 LOGICAL :: newmt      ! TRUE if material constant computation necessary

 INTEGER (kind=4) :: osec,     & !associated material of previous element
                     ndofe,    & !number of DOFs
                     nvarl,    & !number of displacement DOFs per element
                     secty       !section type
 REAL (kind=8) ::  area,       & !element area
                   thick,      & !thickness (original)
                   d(109)        !Elastic integrated constitutive matrix

 INTEGER (kind=4) ielem,             & !element number
                  isec,              & !associated material
                  nnf,               & !number of nodes in a basic face
                  i,ii,jj,j,l,g,n !different indexes

 REAL (kind=8) strp(12),strt(6),  & !in-plane and transverse strains
               strel(17),   & !local streses
               deq(11),     & !Integrated Constitutive matrix to compute H vector
               seq(11),     & !
               aux

 REAL (kind=8) f3(3),c33,b3(3,nnb),h(3,nnode),s(2)    !EAS
 REAL (kind=8) ::  cq(3,2),cd(3,2)                !average metric tensor at each face
 REAL (kind=8) ::  hs(2,3),btp(2,3,2),bpp(2,3,4), & !H vector and B matrix for add DOFs
                   rlp(2,3),ps(2,3),dps(2,3),     & !additional arrays for Phi
                   etas(2)                          !shear strain measure at element center
 LOGICAL :: sides(3)                           !for quad approach
 REAL (kind=8), ALLOCATABLE :: tq(:,:,:,:), &  !(ndime,2,3,2) local in-plane deformation gradient at face sides
                               bq(:,:,:,:)     !(ndime,6,3,2) in-plane B-matrix at face centers

 REAL (kind=8) :: u(3,nnode),          &  !incremental displacements
                  x(3,nnode),          &  !element coordinates
                  rl(3,nnode)             !nodal internal equivalent forces

 REAL(kind=8) :: dstrp(12),dstrt(6),dphih(4),dalpha,y(ndime,nnode),up(3,6) !vecdot

 TYPE (section), POINTER :: sec  !pointer to a section data

 !
 nvarl = ndime*nnode     ! number of Displacement DOFs
 IF( quad )THEN
    ALLOCATE (  tq(ndime,2,3,2), bq(ndime,6,3,2) )   !in-plane gradients and B matrices at faces
 ELSE
    ALLOCATE (  tq(ndime,2,1,2), bq(ndime,3,3,2) )   !in-plane gradients and B matrices at faces
 END IF
 ndofe = nvarl
 IF( zigzag )ndofe = nvarl + nnb
 nnf   = nnb/2

 !***  Computes nodal internal forces
 osec = -1                           !no previous material
 e => heade                          !point to first element in the list

 DO                                  !loop over all the elements
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel                   !element number
   isec = e%matno                    !associated material
   !     SET MATERIAL CONSTANTS
   newmt = osec /= isec              !same material than previous ?
   IF(newmt)THEN                     !if new material, get properties
     osec = isec                     !keep present material
     sec => psecs(isec)%p             !point to section
     secty = sec%secty
     d = sec%rprop(6:114)
     thick = sec%rprop(1)
     IF( .NOT. zigzag )THEN
        IF(sec%rprop(4) == 0d0 ) THEN   !use computed SCF
           d((/89,95,92/)) = d((/89,95,92/))*sec%rprop(115)
           d((/90,96,97,93/)) = d((/90,96,97,93/))*sec%rprop(116)
           d((/91,98,94/)) = d((/91,98,94/))*sec%rprop(117)
        ELSE
           d(89:98) = d(89:98)*sec%rprop(4)
        END IF
     ELSE
       !IF( sec%iprop(4) == 1 )THEN ! For trigonometric use computed shear factor
       !  IF( sec%rprop(4) == 0d0 )THEN !use computed shear factor
       !    d((/89,92,95,99,102,106/)) = d((/89,92,95,99,102,106/)) *sec%rprop(115)
       !    d((/90,93,96,97,100,103,104,107,108/)) = d((/90,93,96,97,100,103,104,107,108/))*sec%rprop(116)
       !    d((/91,94,98,101,105,109/)) = d((/91,94,98,101,105,109/)) *sec%rprop(117)
       !  ELSE                          !use provided shear factor
       !    d(89:108) = d(89:108)*sec%rprop(4)
       !  END IF
       !END IF
     END IF
     newmt = .FALSE.                        !same material than previous ?

   END IF !newmt

   !*** computes actual configuration
   area = e%dvol/thick            !Element area
   x(:,1:nnb) = coora(:,e%lnods(1:nnb))               !coordinates
   u(:,1:nnb) = x(:,1:nnb) - coori(:,e%lnods(1:nnb))  !incremental displacements
   IF( quad )THEN
     ! in plane
     DO i=1,3               !for each adyacent element
       sides(i) = ( e%lnods(i+6) /= 0 )     !side exist?
       IF( sides(i) )THEN   !if side exist get extra nodes coordinates
         x(:,i+6:i+9:3) = coora(:,e%lnods(i+6:i+9:3))
         u(:,i+6:i+9:3) = x(:,i+6:i+9:3) - coori(:,e%lnods(i+6:i+9:3))
       ELSE                 !else set those coordinates to zero
         x(:,i+6:i+9:3) = 0d0
         u(:,i+6:i+9:3) = 0d0
       END IF
     END DO
     cq = 0d0  ! initializes average in-plane metric tensor at each face
   END IF
   ! compute EAS parameter from incremental displacements
   dalpha =  - DOT_PRODUCT( e%h(1:nvarl), RESHAPE(u,(/ nvarl /)))/e%ka  !update EAS parameter
   IF( ASSOCIATED(e%nangl) )THEN
     DO n=1,nnf
       l = e%lnods(n)
       ps(1,n) = psia(1,l)*e%nangl(1,n)+psia(2,l)*e%nangl(2,n)           !psi at principal directions
       ps(2,n) =-psia(1,l)*e%nangl(2,n)+psia(2,l)*e%nangl(1,n)
       dps(1,n) = ps(1,n) -psii(1,l)*e%nangl(1,n)-psii(2,l)*e%nangl(2,n) !Delta psi at principal directions
       dps(2,n) = ps(2,n) +psii(1,l)*e%nangl(2,n)-psii(2,l)*e%nangl(1,n)
     END DO
     dalpha = dalpha - DOT_PRODUCT( e%h(nvarl+1:), RESHAPE(dps,(/ nnb /)))/e%ka  !update EAS parameter
   END IF
   e%alpha = e%alpha + dalpha                                           !update EAS parameter

   !-------- begin to improve Geometric matrix -----------------------------------------------------
   IF( ksnxt )THEN
     !*** computes old configuration
     y = x - u                     !coordinates
     !--------  in-plane strains
     DO ii=1,2 ! for each face
       i = nnf*ii-2      !first node of the face (1 or 4)
       ! compute in-plane vectors
       IF( quad ) THEN      ! for quad approach
         j = i+5            ! last node before extra nodes 6 or 9
         DO jj=1,nnf  !for each mid side point
           tq(:,1:2,jj,ii) = MATMUL(y(:,i:i+2),e%cdq(1:3,1:2,jj,ii))
           IF( sides(jj) )THEN  !add extra nodes if side element exist
             tq(:,1,jj,ii) = tq(:,1,jj,ii) + y(:,j+jj)*e%cdq(4,1,jj,ii)
             tq(:,2,jj,ii) = tq(:,2,jj,ii) + y(:,j+jj)*e%cdq(4,2,jj,ii)
           END IF
         END DO
       ELSE  !standard
         tq(:,1:2,1,ii) = MATMUL(y(:,i:i+2),e%cdq(1:3,1:2,1,ii)) !gradient at face center
       END IF
     END DO
     CALL bmat12q(e%cdq,bq,tq,quad) !in-plane b-matrix at faces
     IF(quad)THEN
       up(:,1:3) = u(:,1:3) ; up(:,4:6) = u(:,7:9)
       CALL proma1(dstrp( 7),up(1,1),bq(1,1,1,1),1,3,18)  !incremental in-plane strains at bottom face
       up(:,1:3) = u(:,4:6) ; up(:,4:6) = u(:,10:12)
       CALL proma1(dstrp(10),up(1,1),bq(1,1,1,2),1,3,18)  !incremental in-plane strains at top    face
     ELSE
       CALL proma1(dstrp( 7),u(1,1),bq(1,1,1,1),1,3,9)  !incremental in-plane strains at bottom face
       CALL proma1(dstrp(10),u(1,4),bq(1,1,1,2),1,3,9)  !incremental in-plane strains at top    face
     END IF
     dstrp(1:3) = (+dstrp(7:9)+dstrp(10:12))/2d0       !incremental membrane strains
     dstrp(5:7) = (-dstrp(7:9)+dstrp(10:12))/thick     !incremental curvatures
     !-------- transverse strain
     ! EAS
     f3 = MATMUL(y(:,1:nnb),e%cartd)     !f_3 at element center
     c33 = DOT_PRODUCT(f3,f3)              !C(3,3) at element center
     DO i=1,nnb
       b3(:,i) = f3*e%cartd(i)             !b(:,3) matrix at element center
     END DO
     !---
     CALL proma1(dstrp( 4),u(1,1),b3(1,1),1,1,18)      !incremental transverse strain
     dstrp(8)   = dalpha                               !incremental alpha parameter
     !incremental forces
     dstrt(1) = DOT_PRODUCT(d((/     1:4,24:27/)),dstrp(1:8))                !N_11  membrane forces
     dstrt(2) = DOT_PRODUCT(d((/  2, 5:7,28:31/)),dstrp(1:8))                !N_22
     dstrt(3) = DOT_PRODUCT(d((/3,6, 8:9,32:35/)),dstrp(1:8))                !N_12
     dstrt(4) = DOT_PRODUCT(d((/24,28,32,36,11,12,13,14/)),dstrp(1:8))       !M_11 bending moments
     dstrt(5) = DOT_PRODUCT(d((/25,29,33,37,12,15,16,17/)),dstrp(1:8))       !M_22
     dstrt(6) = DOT_PRODUCT(d((/26,30,34,38,13,16,18,19/)),dstrp(1:8))       !M_12

     IF(zigzag) THEN   ! psi gradient
       ! compute additional strains and basic cartesyan derivatives of area coordinates
       CALL grad_psi(dps,dstrp(9:12),e%cdq(:,:,1,1),quad,cd,psib)
       ! add influence of additional strains over in-plane stresses
       dstrt(1) = dstrt(1) +DOT_PRODUCT(d(50:53),dstrp(9:12))       !N_11
       dstrt(2) = dstrt(2) +DOT_PRODUCT(d(54:57),dstrp(9:12))       !N_22
       dstrt(3) = dstrt(3) +DOT_PRODUCT(d(58:61),dstrp(9:12))       !N_12
       dstrt(4) = dstrt(4) +DOT_PRODUCT(d(66:69),dstrp(9:12))       !M_11
       dstrt(5) = dstrt(5) +DOT_PRODUCT(d(70:73),dstrp(9:12))       !M_22
       dstrt(6) = dstrt(6) +DOT_PRODUCT(d(74:77),dstrp(9:12))       !M_12
       !dstrt(7) = dstrt(7) +DOT_PRODUCT(d(62:65),dstrp(9:12))       !N_33

       !            .. and on transverse shear stresses
       !seq( 7) = seq( 7) + DOT_PRODUCT(d(102:103),strt(5:6))     !Q1(1)
       !seq( 8) = seq( 8) + DOT_PRODUCT(d(104:105),strt(5:6))     !Q2(1)
       !seq( 9) = seq( 9) + DOT_PRODUCT(d(106:107),strt(5:6))     !Q1(2)
       !seq(10) = seq(10) + DOT_PRODUCT(d(108:109),strt(5:6))     !Q2(2)

     END IF

     e%se(12:14) = e%se(1:3) + (dstrt(1:3)/2d0 - dstrt(4:6)/thick)*area
     e%se(15:17) = e%se(4:6) + (dstrt(1:3)/2d0 + dstrt(4:6)/thick)*area

     !dstrt(7) = DOT_PRODUCT(d((/4,7,9,10,36:39/)),dstrp(1:8))                !N_33
     !e%se(22) = e%se(11) + dstrt(7)*area
     !!-------- transverse-shear strains
     !ii=1  ! bottom face
     !!compute transvere shear strain components
     !tas(:,:) = MATMUL(y,e%nfdas(:,:,ii))  !der x/x_3  at the 4 sides
     !gas(:,1) = (y(:,4) -y(:,1))/2d0 !point A der x/eta
     !gas(:,2) = (y(:,2) -y(:,1))/2d0 !point B der x/xita
     !gas(:,3) = (y(:,3) -y(:,2))/2d0 !point C der x/eta
     !gas(:,4) = (y(:,3) -y(:,4))/2d0 !point D der x/xita
     !CALL bsma12s(gas,tas,e%nfdas(:,:,1),bs(:,:,:,1),e%jacin(:,:,1),1,bh(:,:,1))     !compute B_s matrix at sampling points
     !ii=2   !top face
     !tas(:,:) = MATMUL(y,e%nfdas(:,:,ii))  !der x/x_3  at the 4 sides
     !gas(:,1) = (y(:,8) -y(:,5))/2d0 !point A der x/eta
     !gas(:,2) = (y(:,6) -y(:,5))/2d0 !point B der x/xita
     !gas(:,3) = (y(:,7) -y(:,6))/2d0 !point C der x/eta
     !gas(:,4) = (y(:,7) -y(:,8))/2d0 !point D der x/xita
     !CALL bsma12s(gas,tas,e%nfdas(:,:,2),bs(:,:,:,2),e%jacin(:,:,2),2,bh(:,:,2))     !compute B_s matrix at sampling points
     !!incremental strains (1..4)
     !CALL proma1(dstrt(1),u(1,1),bs(1,1,1,1),1,2,24)
     !CALL proma1(dstrt(3),u(1,1),bs(1,1,1,2),1,2,24)
     !dstrt(1)= DOT_PRODUCT(d((/ 89:90,95:96 /)),dstrt(1:4))
     !dstrt(2)= DOT_PRODUCT(d((/ 90:91,97:98 /)),dstrt(1:4))
     !dstrt(3)= DOT_PRODUCT(d((/ 95,97,92:93 /)),dstrt(1:4))
     !dstrt(4)= DOT_PRODUCT(d((/ 96,98,93:94 /)),dstrt(1:4))
     !e%se(18:21) = e%se(7:10) + dstrt(1:4)*area
   END IF
   ! ------- end to improve Geometric matrix -------------------------------------------------------

   DO ii=1,2 ! for each face
     ! compute variables associated with in-plane behavior
     i = nnf*ii-2      !first node of the face (1 or 4)
     IF( quad ) THEN      ! for quad approach
       j = i+5            ! last node before extra nodes 6 or 9
       DO jj=1,nnf  !for each mid side point
         tq(:,1:2,jj,ii) = MATMUL(x(:,i:i+2),e%cdq(1:3,1:2,jj,ii))
         IF( sides(jj) )THEN  !add extra nodes if side element exist
           tq(:,1,jj,ii) = tq(:,1,jj,ii) + x(:,j+jj)*e%cdq(4,1,jj,ii)
           tq(:,2,jj,ii) = tq(:,2,jj,ii) + x(:,j+jj)*e%cdq(4,2,jj,ii)
         END IF
         ! add to average metric tensor
         cq(1,ii) = cq(1,ii) + DOT_PRODUCT(tq(:,1,jj,ii),tq(:,1,jj,ii)) !C11
         cq(2,ii) = cq(2,ii) + DOT_PRODUCT(tq(:,2,jj,ii),tq(:,2,jj,ii)) !C22
         cq(3,ii) = cq(3,ii) + DOT_PRODUCT(tq(:,1,jj,ii),tq(:,2,jj,ii)) !C12
       END DO
       cq(:,ii) = cq(:,ii)/3d0               !average metric tensor at faces
     ELSE  !standard
       tq(:,1:2,1,ii) = MATMUL(x(:,i:i+2),e%cdq(1:3,1:2,1,ii)) !gradient at face center
       cq(1,ii) =  DOT_PRODUCT(tq(:,1,1,ii),tq(:,1,1,ii)) !C11
       cq(2,ii) =  DOT_PRODUCT(tq(:,2,1,ii),tq(:,2,1,ii)) !C22
       cq(3,ii) =  DOT_PRODUCT(tq(:,1,1,ii),tq(:,2,1,ii)) !C12
     END IF
     !compute transvere shear strain components
     tas(:,:) = MATMUL(x(:,1:nnb),e%nfdas(:,:,ii))  !der x/x_3  at the 3 sides
     IF( ii == 1 )THEN
       gas(:,1) = x(:,3) -x(:,2) !point 1 der x/tan SQR(2)
       gas(:,2) = x(:,1) -x(:,3) !point 2 der -x/eta
       gas(:,3) = x(:,2) -x(:,1) !point 3 der x/xita
       CALL bsma12(gas,tas,e%nfdas(:,:,1),bs(:,:,:,1),e%jacin(:,:,1),1)     !compute B_s matrix at sampling points
     ELSE
       gas(:,1) = x(:,6) -x(:,5) !point 1 der x/tan SQR(2)
       gas(:,2) = x(:,4) -x(:,6) !point 2 der -x/eta
       gas(:,3) = x(:,5) -x(:,4) !point 3 der x/xita
       CALL bsma12(gas,tas,e%nfdas(:,:,2),bs(:,:,:,2),e%jacin(:,:,2),2)     !compute B_s matrix at sampling points
     END IF
     DO g=1,nnf  !for each assumed strain point compute x_tan . x_X_3
       vas(g,ii) = DOT_PRODUCT(tas(:,g),gas(:,g))
     END DO
     vas(1,ii) = SUM(vas(:,ii))/3d0                                  !auxiliar value
     vas(2,ii) = +vas(1,ii) - vas(2,ii)                              !natural eta-x_3
     vas(3,ii) = -vas(1,ii) + vas(3,ii)                              !natural xita-x_3
     vas(1,ii) = e%jacin(1,1,ii)*vas(3,ii)+e%jacin(2,1,ii)*vas(2,ii) !x_1-x_3
     vas(2,ii) = e%jacin(1,2,ii)*vas(3,ii)+e%jacin(2,2,ii)*vas(2,ii) !x_2-x_3
   END DO
   strt(1:2) = vas(1:2,1)    !cartesyan transverse shear strains at face centers
   strt(3:4) = vas(1:2,2)    !
   CALL bmat12q(e%cdq,bq,tq,quad) !in-plane b-matrix at faces
   ! EAS
   f3 = MATMUL(x(:,1:nnb),e%cartd)     !f_3 at element center
   c33 = DOT_PRODUCT(f3,f3)            !C(3,3) at element center
   DO i=1,nnb
     b3(:,i) = f3*e%cartd(i)           !b(:,3) matrix at element center
   END DO

  ! First set of in-plane deformations
   strp(1) = (cq(1,1)+cq(1,2)-2d0)/4d0                 !Em_11
   strp(2) = (cq(2,1)+cq(2,2)-2d0)/4d0                 !Em_22
   strp(3) = (cq(3,1)+cq(3,2))/2d0                     !Em_12*2
   strp(4) = (c33-1d0)/2d0                             !E0_33
   strp(5) = (cq(1,2)-cq(1,1))/thick/2d0               !X_11
   strp(6) = (cq(2,2)-cq(2,1))/thick/2d0               !X_22
   strp(7) = (cq(3,2)-cq(3,1))/thick                   !X_12*2
   strp(8) = e%alpha                                   !alpha
  ! First set of in-plane integrated stresses
 !             1  2  3  4 24 25 26 27     Em_11
 !             2  5  6  7 28 29 30 31     Em_22
 !             3  6  8  9 32 33 34 35     Em_12*
 !             4  7  9 10 36 37 38 39     E0_33
 !            24 28 32 36 11 12 13 14     X_11
 !            25 29 33 37 12 15 16 17     X_22
 !            26 30 34 38 13 16 18 19     X_12*2
 !            27 31 35 39 14 17 19 20     alpha
   strel(1) = DOT_PRODUCT(d((/     1:4,24:27/)),strp(1:8))                !N_11  membrane forces
   strel(2) = DOT_PRODUCT(d((/  2, 5:7,28:31/)),strp(1:8))                !N_22
   strel(3) = DOT_PRODUCT(d((/3,6, 8:9,32:35/)),strp(1:8))                !N_12
   strel(4) = DOT_PRODUCT(d((/4,7,9,10,36:39/)),strp(1:8))                !N_33 (a suppossed low value)
   strel(5) = DOT_PRODUCT(d((/24,28,32,36,11,12,13,14/)),strp(1:8))       !M_11 bending moments
   strel(6) = DOT_PRODUCT(d((/25,29,33,37,12,15,16,17/)),strp(1:8))       !M_22
   strel(7) = DOT_PRODUCT(d((/26,30,34,38,13,16,18,19/)),strp(1:8))       !M_12
   strel(8) = DOT_PRODUCT(d((/27,31,35,39,14,17,19,20/)),strp(1:8))       !M_33 to be nullified
   ! equivalent transverse shear stresses at faces, 4 shear strain values must be considered
   !        For assumed shear strains
   !          89  90  95  96 102 103  C13(1)
   !          90  91  97  98 104 105  C23(1)
   !          95  97  92  93 106 107  C13(2)
   !          96  98  93  94 108 109  C23(2)
   !         102 104 106 108  99 100  Psi_x
   !         103 105 107 109 100 101  Psi_y
   seq( 7) = DOT_PRODUCT(d((/ 89:90,95:96 /)),strt(1:4))
   seq( 8) = DOT_PRODUCT(d((/ 90:91,97:98 /)),strt(1:4))
   seq( 9) = DOT_PRODUCT(d((/ 95,97,92:93 /)),strt(1:4))
   seq(10) = DOT_PRODUCT(d((/ 96,98,93:94 /)),strt(1:4))

   IF(zigzag) THEN   ! psi gradient
     ! compute additional strains and basic cartesyan derivatives of area coordinates
     CALL grad_psi(ps,strp(9:12),e%cdq(:,:,1,1),quad,cd,psib)
     psib=psib*area                                       ! *A because a 1/2A was included in the computation
     s(1) = psib(3)-(psib(1)+psib(2)+psib(3))/3d0         !natural center values
     s(2) =-psib(2)+(psib(1)+psib(2)+psib(3))/3d0
     strt(5) = e%jacin(1,1,1)*s(1)+e%jacin(2,1,1)*s(2)  !cartesian values
     strt(6) = e%jacin(1,2,1)*s(1)+e%jacin(2,2,1)*s(2)
     ! compute shear strain measure for output
     etas(1) = (strt(1)+strt(3))/2d0-strt(5)
     etas(2) = (strt(2)+strt(4))/2d0-strt(6)
     ! add influence of additional strains over in-plane stresses
      !    50 51 52 53    psi_1,1
      !    54 55 56 57    psi_2,2
      !    58 59 60 61    psi_1,2
      !    62 63 64 65    psi_2,1
      !    66 67 68 69
      !    70 71 72 73
      !    74 75 76 77
      !    78 79 80 81
     strel(1) = strel(1) +DOT_PRODUCT(d(50:53),strp(9:12))       !N_11
     strel(2) = strel(2) +DOT_PRODUCT(d(54:57),strp(9:12))       !N_22
     strel(3) = strel(3) +DOT_PRODUCT(d(58:61),strp(9:12))       !N_12
     strel(4) = strel(4) +DOT_PRODUCT(d(62:65),strp(9:12))       !N_33
     strel(5) = strel(5) +DOT_PRODUCT(d(66:69),strp(9:12))       !M_11
     strel(6) = strel(6) +DOT_PRODUCT(d(70:73),strp(9:12))       !M_22
     strel(7) = strel(7) +DOT_PRODUCT(d(74:77),strp(9:12))       !M_12
     strel(8) = strel(8) +DOT_PRODUCT(d(78:81),strp(9:12))       !M_33 to be nullified
     !            .. and on transverse shear stresses
     !           102 103  Psi_x
     !           104 105  Psi_y
     !           106 107
     !           108 109
     seq( 7) = seq( 7) + DOT_PRODUCT(d(102:103),strt(5:6))     !Q1(1)
     seq( 8) = seq( 8) + DOT_PRODUCT(d(104:105),strt(5:6))     !Q2(1)
     seq( 9) = seq( 9) + DOT_PRODUCT(d(106:107),strt(5:6))     !Q1(2)
     seq(10) = seq(10) + DOT_PRODUCT(d(108:109),strt(5:6))     !Q2(2)
     ! Compute additional moments
     !                                                   Em_11
     !                                                   Em_22
     !                                                   Em_12*
     !                                                   E0_33
     !                                                   X_11
     !                                                   X_22
     !                                                   X_12*2
     !                                                   alpha
     !    50 54 58 62 66 70 74 78  40 41 42 43           psi_1,1
     !    51 55 59 63 67 71 75 79  41 44 45 46           psi_2,2
     !    52 56 60 64 68 72 76 80  42 45 47 48           psi_1,2
     !    53 57 61 65 69 73 77 81  43 46 48 49           psi_2,1
     strel(11) = DOT_PRODUCT(d((/ 50,54,58,62,66,70,74,78,40,41,42,43/)),strp(1:12)) !MF11
     strel(12) = DOT_PRODUCT(d((/ 51,55,59,63,67,71,75,79,41,44,45,46/)),strp(1:12)) !MF22
     strel(13) = DOT_PRODUCT(d((/ 52,56,60,64,68,72,76,80,42,45,47,48/)),strp(1:12)) !MF12
     strel(14) = DOT_PRODUCT(d((/ 53,57,61,65,69,73,77,81,43,46,48,49/)),strp(1:12)) !MF21
     ! and additional transverse shear forces (assumed shear)
     !                                C13(1)
     !                                C23(1)
     !                                C13(2)
     !                                C23(2)
     !       102 104 106 108  99 100  Psi_x
     !       103 105 107 109 100 101  Psi_y
     strel(15) = DOT_PRODUCT(d((/ 102,104,106,108, 99,100 /)),strt(1:6))
     strel(16) = DOT_PRODUCT(d((/ 103,105,107,109,100,101 /)),strt(1:6))
     ! compute B matrix for bending and shear
     CALL bphi12(area,cd,btp,bpp,e%nangl,e%jacin(:,:,1))
     !--------
     deq(8:11) = d(78:81)         !Integrated D8_mphi
   END IF
   ! transverse shear forces (for output)
   strel( 9) = seq(7) +seq( 9)
   strel(10) = seq(8) +seq(10)
   ! equivalent in-plane values at faces
   seq( 1:3) = strel(1:3)/2d0 - strel(5:7)/thick
   seq( 4:6) = strel(1:3)/2d0 + strel(5:7)/thick
   ! transverse stress
   seq(  11) = strel(4)
   ! integrated D8_F1 & F2
   !              27,31,35,39,        14,17,19,20, 0x4,78:81,0,0        ! M33
   deq(1:3) = d((/27,31,35/))/2d0-d((/14,17,19/))/thick
   deq(4:6) = d((/27,31,35/))/2d0+d((/14,17,19/))/thick
   deq(7)   = d(39)

   ! COMPUTATION OF EQUIVALENT NODAL FORCES and H array

   DO i=1,nnf !for each face node
     j  = i+nnf  !for each other face node
     rl(:,i) = seq( 1)*bq(:,i,1,1) + seq( 2)*bq(:,i,2,1) + seq( 3)*bq(:,i,3,1) + &
               seq( 7)*bs(:,i,1,1) + seq( 8)*bs(:,i,2,1) +                       &
               seq( 9)*bs(:,i,1,2) + seq(10)*bs(:,i,2,2) + seq(11)*b3(:,i)
     rl(:,j) = seq( 4)*bq(:,i,1,2) + seq( 5)*bq(:,i,2,2) + seq( 6)*bq(:,i,3,2) + &
               seq( 7)*bs(:,j,1,1) + seq( 8)*bs(:,j,2,1) +                       &
               seq( 9)*bs(:,j,1,2) + seq(10)*bs(:,j,2,2) + seq(11)*b3(:,j)

     h (:,i) = deq( 1)*bq(:,i,1,1) + deq( 2)*bq(:,i,2,1) + deq( 3)*bq(:,i,3,1) + &
               deq( 7)*b3(:,i)
     h (:,j) = deq( 4)*bq(:,i,1,2) + deq( 5)*bq(:,i,2,2) + deq( 6)*bq(:,i,3,2) + &
               deq( 7)*b3(:,j)
     IF( quad )THEN   ! extra nodes
       ii = i+6   !bottom face
       jj = j+6   !top    face
       rl(:,ii) = seq(1)*bq(:,j,1,1) + seq(2)*bq(:,j,2,1) + seq(3)*bq(:,j,3,1)
       rl(:,jj) = seq(4)*bq(:,j,1,2) + seq(5)*bq(:,j,2,2) + seq(6)*bq(:,j,3,2)
       h (:,ii) = deq(1)*bq(:,j,1,1) + deq(2)*bq(:,j,2,1) + deq(3)*bq(:,j,3,1)
       h (:,jj) = deq(4)*bq(:,j,1,2) + deq(5)*bq(:,j,2,2) + deq(6)*bq(:,j,3,2)
     END IF
   END DO

   aux = strel(8)/d(20)             !residual
   rl(:,1:nnode) = rl(:,1:nnode) - h*aux             !modify residual forces using EAS residual and vector
   rl = rl*area
   IF( zigzag ) THEN
      DO i=1,nnf
        rlp(:,i) = MATMUL(bpp(:,i,:),strel(11:14)) + MATMUL(btp(:,i,:),strel(15:16))
        hs (:,i) = MATMUL(bpp(:,i,:),deq(8:11))
      END DO
     rlp = rlp*area
     hs = hs*area
     e%h(nvarl+1:ndofe) = RESHAPE(hs, (/ nnb /))  !includes area
     rlp = rlp - hs*aux               !modify residual forces using EAS residual and vector
   END IF

   e%ka = d(20)*area                           !keep EAS stiffness
   e%h(1:nvarl) = RESHAPE( h, (/nvarl/))*area  !keep EAS vector
   e%alpha = e%alpha - aux             !first update of EAS parameter
   e%se(1:11) = seq*area               !keep integrated stresses for geometric stiffness
   ! stresses at faces for output
   e%stres((/1:2,4/),1) = (strel(1:3) - 6d0*strel(5:7)/thick)/thick
   e%stres((/1:2,4/),2) = (strel(1:3) + 6d0*strel(5:7)/thick)/thick
   e%stres(      3,1:2) =  strel(4)/thick
   e%stres(5:6,1) =  seq(7: 8)*2d0/thick
   e%stres(5:6,2) =  seq(9:10)*2d0/thick

   e%stint(1:8) = strel((/1:3,5:7,9:10/))     ! keep integrated stresses for output

   DO i=1,nnode             !for each node in the element
     n = e%lnods(i)     !node
     IF( n > 0 ) resid(1:3,n) = resid(1:3,n)+rl(1:3,i) !sum internal force
   END DO
   IF(zigzag)THEN
     e%stint(9:14) = strel(11:16)    !keep integrated stresses for output
     e%stint(15:16) = etas           !keep shear strain measure at element center
     DO i=1,nnf             !for each node in the element
       n = e%lnods(i)     !node
       resid(7:8,n) = resid(7:8,n)+rlp(1:2,i) !sum internal force
     END DO
   END IF
!   IF(zigzag)THEN
!     IF( ANY(strt /= 0d0 ) )THEN
!       WRITE(58,"('Residual Forces')")
!       WRITE(58,"('     Std_strains')")
!       WRITE(58,"(8e15.6,/,4e15.6)")strp(1:8),strt(1:4)
!       WRITE(58,"('     Add_strains')")
!       WRITE(58,"(6e15.6)")strp(9:12),strt(5:6)
!       WRITE(58,"('     Add_stresses')")
!       WRITE(58,"(6e15.6)")strel(11:16)
!       WRITE(58,"('     Std_stesses')")
!       WRITE(58,"(7e15.6,/,4e15.6)")strel(1:7),seq(7:10)
!       WRITE(58,"('     Std_Nodal_F')")
!       WRITE(58,"(3e15.6)")rl(:,1:6)
!       WRITE(58,"('     Add_Nodal_F')")
!       WRITE(58,"(2e15.6)")rlp(:,1:3)
!     END IF
!   END IF
   e => e%next          !point to next element in the list
 END DO
 DEALLOCATE(tq,bq)
 RETURN
 9999 CALL runen2('')
 END SUBROUTINE resv12p
 !-----------------------------------------------------------
 SUBROUTINE grad_psi(psi,grad,cdq,quad,cd,psib)
 ! compute Psi gradient, and Psi at shear points
 REAL(kind=8),INTENT(IN) :: psi(2,3),  & ! Psi nodal values at local system
                            cdq(:,:)     ! (in-plane) cartesyan derivatives of shape functions
 REAL(kind=8),INTENT(OUT) :: grad(4),  & ! in-plane gradient of additional displacements
                             cd(:,:),  & ! in-plane cartesyan derivatives of area coordinates
                             psib(3)     ! natural shear strains at sides
 LOGICAL, INTENT(IN) :: quad

 ! recover standard 3-node triangle derivatives
 ! it uses cd at bottom face as mid-surface cd's are not available
 cd(:,:) = cdq(1:3,1:2)                    !basic nodal values
 IF( quad )THEN                            !if additional node
   cd(1,1:2) = cd(1,1:2) - cdq(4,1:2)      !"-" because 1 node is opposite to additional node
   cd(2,1:2) = cd(2,1:2) + cdq(4,1:2)      !"+" because node 2 and 3 are on the opposite side
   cd(3,1:2) = cd(3,1:2) + cdq(4,1:2)      !
 END IF

 grad(1) = DOT_PRODUCT(psi(1,:),cd(1:3,1))  !Psi_1,1
 grad(2) = DOT_PRODUCT(psi(2,:),cd(1:3,2))  !Psi_2,2
 grad(3) = DOT_PRODUCT(psi(1,:),cd(1:3,2))  !Psi_1,2
 grad(4) = DOT_PRODUCT(psi(2,:),cd(1:3,1))  !Psi_2,1

 ! next lines: cd(i,2) = a/2A   cd(i,2) = -b/2A  i.e. the side divided by the area
 psib(1) = (cd(1,2)*(psi(1,2)+psi(1,3)) - cd(1,1)*(psi(2,2)+psi(2,3))) !sqrt(2) psi_t  (1)
 psib(2) = (cd(2,2)*(psi(1,3)+psi(1,1)) - cd(2,1)*(psi(2,3)+psi(2,1))) !    -   psi_eta(2)
 psib(3) = (cd(3,2)*(psi(1,1)+psi(1,2)) - cd(3,1)*(psi(2,1)+psi(2,2))) !    +   psi_xi (3)

 RETURN
 END SUBROUTINE grad_psi
 !-----------------------------------------------------------
