 SUBROUTINE resv12si( heade, coora, resid, beta, nnode, zigzag)
 !-------------------------------------------------------------------
 !
 !          EVALUATION OF INTERNAL FORCES ELEMENT T-L 3-D SOLID
 !
 !-------------------------------------------------------------------
 USE npo_db, ONLY : coord,coori,psii,psia  !coordinates at previous iteration
 USE gvar_db, ONLY : ksnxt           !computes Stiffness matrix in next iteration
 IMPLICIT NONE

 ! dummy arguments
 INTEGER (kind=4), INTENT(IN) ::  nnode       !number of nodes
 REAL(kind=8),INTENT (IN) :: coora(:,:),    & !present coordinates
                             beta(:)          !stabilization factors
 REAL(kind=8),INTENT (IN OUT) :: resid(:,:)   !internal nodal forces
 LOGICAL, INTENT(IN) :: zigzag
 TYPE (ele12), POINTER  :: heade              !pointer to first element

 ! local variables
 INTEGER (kind=4), PARAMETER :: ndime=3
 TYPE (ele12), POINTER :: e      !pointer to an element data
 LOGICAL :: newmt      ! TRUE if material constant computation necessary
 INTEGER (kind=4) :: osec,     & !associated material of previous element
                     ndofe,    & !number of element DOFs
                     nvarl,    & !number of displacement DOFs per element
                     secty       !associated sectyon type

 INTEGER (kind=4) ielem,             & !element number
                  isec,              & !associated section
                  nnf,               & !number of nodes in a basic face
                  i,ii,jj,j,n,l        !different indexes

 REAL (kind=8) ::  area,       & !element middle-surface area
                   thick,      & !thickness (original)
                   d(109),     & !Elastic integrated constitutive matrix
                   sts,stm,stsf,stmf       !stabilization factors

 ! variables for assumed strain transverse shear
 REAL (kind=8) :: tas(3,4),      & ! der x/x_3 at Assumed Strain points
                  tas0(3,4),     & ! der x/x_3 at Assumed Strain points
                  gas(3,4),      & ! der x/tan at Assumed Strain points
                  gas0(3,4),      & ! der x/tan at Assumed Strain points
                  vas(4,2),va(4),& ! strains at Assumed Strain Points
                  s(2),          & ! shear strains at center
                  bs0(3,8,2,2),   & ! Bs matrix at face centers,
                  bh0(24,2,2)       ! Bs Stab matrix
 ! variables for additional DOFs
 REAL (kind=8) :: hs0(2,4),       & ! H vector for add DOFs
                 h0(3,nnode),     & ! h matriz for displacement DOFs
                  btp0(2,4,2),    & ! shear B matrix for add DOFs
                  bpp0(2,4,4),    & ! in-plane B matrix for add DOFs
                  bth0(2,4,2),    & ! shear hourglass b-matrix at center
                  bph0(2,4,4),    & ! bending hourglass b-matrix at sides
                  rlp(2,4),      & ! equivalent nodal forces for add DOFs
                  psib(4),       & ! Phi strains at Assumed Strain Points
                  psih(4),       & ! hourglass Phi strains at sides
                  ps(2,4),       & !
                  dps(2,4),      & !
                  etas(2)          !shear strain measure at element center
 ! variables for EAS transverse strain
 REAL (kind=8) f3(3),f30(3),    & ! transvere gradient at element center
               c33,             & ! transverse CG Right Stretch component
               b30(3,nnode),    & ! B matrix associated to C33
               ka,kb              ! EAS DOF stiffness

 REAL (kind=8) strp(12),        & !in-plane strains
               strt(6),         & !transverse strains
               cq(3,2),         & !average metric tensor at each face
               strel(17),       & !local stresses
               deq(11),         & !Integrated Constitutive matrix to compute H vector
               seq(11),         & !equivalent stresses to compute equivalent nodal forces
               rl(ndime,nnode), & !nodal internal equivalent forces
               aux                !auxiliar vaue
 REAL (kind=8) :: u(ndime,nnode),     & !incremental displacements
                  x(ndime,nnode),     & !element coordinates
                  x0(ndime,nnode)        !element coordinates
 REAL (kind=8) :: tq(3,2,4,2),        & !(ndime,2,3,2) local in-plane deformation gradient at face sides
                  tq0(3,2,4,2),       & !(ndime,2,3,2) local in-plane deformation gradient at face sides
                  bq0(3,4,3,2),       & !(ndime,nnode,3,2) in-plane B-matrix at face centers
                  bm0(12,4,2),        & !in-plane B12-matrix at mid-point sides for stabilization
                  eh(4,2)               !in-plane stabilization strains at mid-side points

 REAL(kind=8) :: dstrp(12),dstrt(6),dphih(4),dalpha,y(ndime,nnode),delta,uf(3,3)
 LOGICAL :: first      ! TRUE if material constant computation necessary

 TYPE (section), POINTER :: sec  !pointer to a section data

 nvarl = ndime*nnode     ! number of displacement DOFs
 ndofe = nvarl           ! number of total DOFs
 IF( zigzag )ndofe = nvarl + nnode   !update for hierarchical DOFs
 nnf   = nnode/2         ! number of nodes in a face

 !***  Computes nodal internal forces
 osec = -1                           !no previous material
 e => heade                          !point to first element in the list
 DO                                  !loop over all the elements
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel                   !element number
   isec = e%matno                    !associated material
   !     SET MATERIAL CONSTANTS
   newmt = osec /= isec              !same material than previous ?
   IF(newmt)THEN                     !if new material, get properties
     osec = isec                     !keep present material
     sec => psecs(isec)%p             !point to section
     secty = sec%secty
     d = sec%rprop(6:114)
     thick = sec%rprop(1)
     deq(1:3) = d((/27,31,35/))/2d0-d((/14,17,19/))/thick
     deq(4:6) = d((/27,31,35/))/2d0+d((/14,17,19/))/thick
     deq(7)   = d(39)
     IF( .NOT. zigzag )THEN
        IF(sec%rprop(4) == 0d0 ) THEN   !use computed SCF
           d((/89,95,92/)) = d((/89,95,92/))*sec%rprop(115)
           d((/90,96,97,93/)) = d((/90,96,97,93/))*sec%rprop(116)
           d((/91,98,94/)) = d((/91,98,94/))*sec%rprop(117)
        ELSE
           d(89:98) = d(89:98)*sec%rprop(4)
        END IF
     ELSE
       stmf= (d(47)+d(49))*beta(1)/2d0
       stsf= (d(99)+d(101))*beta(2)/24d0
       deq(8:11) = d(78:81)         !Integrated D8_mphi
     END IF
     stm = d(8)*beta(1)
     sts = (d(89)+d(91)+d(92)+d(94))*beta(2)/48d0
     newmt = .FALSE.                        !same material than previous ?

   END IF !newmt
   !
   area = e%dvol/thick            !Element area
   e%ka = d(20)*area              !keep EAS stiffness ¿?why here
   !*** computes actual configuration
   x0(:,1:nnode) = coord(:,e%lnods(1:nnode))                !spatial (fixed) coordinates
   x (:,1:nnode) = coora(:,e%lnods(1:nnode))                !coordinates
   u (:,1:nnode) = x(:,1:nnode) - coori(:,e%lnods(1:nnode)) !incremental displacements
   ! compute EAS parameter from incremental displacements
   dalpha = DOT_PRODUCT( e%h(1:nvarl), RESHAPE(u,(/ nvarl /)))/e%ka  !incremental EAS parameter
   IF( ASSOCIATED(e%nangl) )THEN
     DO n=1,nnf        !for each node
       l = e%lnods(n)    !node
       ps(1,n) = psia(1,l)*e%nangl(1,n)+psia(2,l)*e%nangl(2,n)           !psi at principal directions
       ps(2,n) =-psia(1,l)*e%nangl(2,n)+psia(2,l)*e%nangl(1,n)
       dps(1,n) = ps(1,n) -psii(1,l)*e%nangl(1,n)-psii(2,l)*e%nangl(2,n) !Delta psi at principal directions
       dps(2,n) = ps(2,n) +psii(1,l)*e%nangl(2,n)-psii(2,l)*e%nangl(1,n)
     END DO
     dalpha = dalpha + DOT_PRODUCT( e%h(nvarl+1:), RESHAPE(dps,(/ nnode /)))/e%ka  !update EAS parameter
   END IF
   e%alpha = e%alpha + dalpha                                           !update EAS parameter

   cq = 0d0  ! initializes average in-plane metric tensor at each face

   DO ii=1,2 ! for each face
     ! compute variables associated with in-plane behavior
     i = nnf*ii-3         !first node of the face (1 or 5)
     DO jj=1,nnf  !for each mid side point
       tq (:,1:2,jj,ii) = MATMUL(x (:,i:i+3),e%cdq(1:4,1:2,jj,ii))  !f1 & f2
       tq0(:,1:2,jj,ii) = MATMUL(x0(:,i:i+3),e%cdq(1:4,1:2,jj,ii))  !f1 & f2
       ! add to average metric tensor
       cq(1,ii) = cq(1,ii) + DOT_PRODUCT(tq(:,1,jj,ii),tq(:,1,jj,ii))*e%area(jj,ii) !C11
       cq(2,ii) = cq(2,ii) + DOT_PRODUCT(tq(:,2,jj,ii),tq(:,2,jj,ii))*e%area(jj,ii) !C22
       eh(jj,ii) =           DOT_PRODUCT(tq(:,1,jj,ii),tq(:,2,jj,ii))               !keep C12(k) for stabilization
       cq(3,ii) = cq(3,ii) + eh(jj,ii)*e%area(jj,ii)                                !C12
     END DO
     eh(:,ii) = eh(:,ii) - cq(3,ii)        !stabilization strains (12) at mid-side points
     !compute transvere shear strain components
     tas (:,:) = MATMUL(x ,e%nfdas(:,:,ii))  !der x/x_3  at the 4 sides
     tas0(:,:) = MATMUL(x0,e%nfdas(:,:,ii))  !der x/x_3  at the 4 sides
     IF( ii == 1 )THEN
       gas(:,1) = (x(:,4) -x(:,1))/2d0 !point A der x/eta
       gas(:,2) = (x(:,2) -x(:,1))/2d0 !point B der x/xita
       gas(:,3) = (x(:,3) -x(:,2))/2d0 !point C der x/eta
       gas(:,4) = (x(:,3) -x(:,4))/2d0 !point D der x/xita
       !
       gas0(:,1) = (x0(:,4) -x0(:,1))/2d0 !point A der X/eta
       gas0(:,2) = (x0(:,2) -x0(:,1))/2d0 !point B der X/xita
       gas0(:,3) = (x0(:,3) -x0(:,2))/2d0 !point C der X/eta
       gas0(:,4) = (x0(:,3) -x0(:,4))/2d0 !point D der X/xita
       CALL bsma12s(gas0,tas0,e%nfdas(:,:,1),bs0(:,:,:,1),e%jacin(:,:,1),1,bh0(:,:,1))  !compute B_s matrix at sampling points
     ELSE
       gas(:,1) = (x(:,8) -x(:,5))/2d0 !point A der x/eta
       gas(:,2) = (x(:,6) -x(:,5))/2d0 !point B der x/xita
       gas(:,3) = (x(:,7) -x(:,6))/2d0 !point C der x/eta
       gas(:,4) = (x(:,7) -x(:,8))/2d0 !point D der x/xita
       !
       gas0(:,1) = (x0(:,8) -x0(:,5))/2d0 !point A der X/eta
       gas0(:,2) = (x0(:,6) -x0(:,5))/2d0 !point B der X/xita
       gas0(:,3) = (x0(:,7) -x0(:,6))/2d0 !point C der X/eta
       gas0(:,4) = (x0(:,7) -x0(:,8))/2d0 !point D der X/xita
       CALL bsma12s(gas0,tas0,e%nfdas(:,:,2),bs0(:,:,:,2),e%jacin(:,:,2),2,bh0(:,:,2))  !compute B_s matrix at sampling points
     END IF
     DO l=1,nnf  !for each assumed strain point compute x_tan . x_X_3
       va(l) = DOT_PRODUCT(tas(:,l),gas(:,l))
     END DO
     vas(3,ii) =(va(2)+va(4))/2d0                                    !C_xi3
     vas(4,ii) =(va(1)+va(3))/2d0                                    !C_eta3
     vas(1,ii) = e%jacin(1,1,ii)*vas(3,ii)+e%jacin(2,1,ii)*vas(4,ii) !x_1-x_3
     vas(2,ii) = e%jacin(1,2,ii)*vas(3,ii)+e%jacin(2,2,ii)*vas(4,ii) !x_2-x_3
     vas(3,ii) =-va(2)+va(4)                                         !C_xi3_H
     vas(4,ii) =-va(1)+va(3)                                         !C_eta3_H
   END DO
   !--------
   CALL bmat12p(e%cdq,bq0,tq0,bm0,e%area)   !in-plane b-matrix (bq) at faces and stabilization (bm)
   !--------
   ! EAS
   f3  = MATMUL(x (:,1:nnode),e%cartd)   !f_3 at element center
   c33 = DOT_PRODUCT(f3,f3)              !C(3,3) at element center
   f30 = MATMUL(x0(:,1:nnode),e%cartd)   !f_3 at element center
   DO i=1,nnode
     b30(:,i) = f30*e%cartd(i)             !b(:,3) matrix at element center
   END DO
   !---------------   change sign of hourglass strains
   vas(3:4,:) = -vas(3:4,:)
   eh =  -eh
   !cartesyan transverse shear strains at face centers (sign changed)
   strt(1:2) = -vas(1:2,1)   !
   strt(3:4) = -vas(1:2,2)   !
  ! First set of in-plane deformations (sign changed but alpha that is already with opposite sign)
   strp(1) = -(cq(1,1)+cq(1,2)-2d0)/4d0                 !Em_11
   strp(2) = -(cq(2,1)+cq(2,2)-2d0)/4d0                 !Em_22
   strp(3) = -(cq(3,1)+cq(3,2))/2d0                     !Em_12*2
   strp(4) = -(c33-1d0)/2d0                             !E0_33
   strp(5) = -(cq(1,2)-cq(1,1))/thick/2d0               !X_11
   strp(6) = -(cq(2,2)-cq(2,1))/thick/2d0               !X_22
   strp(7) = -(cq(3,2)-cq(3,1))/thick                   !X_12*2
   strp(8) = e%alpha                                    !alpha
   dstrp = 0d0                                          !Initializes
   ! First set of in-plane integrated stresses
   !             1  2  3  4 24 25 26 27     Em_11
   !             2  5  6  7 28 29 30 31     Em_22
   !             3  6  8  9 32 33 34 35     Em_12*
   !             4  7  9 10 36 37 38 39     E0_33
   !            24 28 32 36 11 12 13 14     X_11
   !            25 29 33 37 12 15 16 17     X_22
   !            26 30 34 38 13 16 18 19     X_12*2
   !            27 31 35 39 14 17 19 20     alpha
   strel(1) = DOT_PRODUCT(d((/     1:4,24:27/)),strp(1:8))                !N_11  membrane forces
   strel(2) = DOT_PRODUCT(d((/  2, 5:7,28:31/)),strp(1:8))                !N_22
   strel(3) = DOT_PRODUCT(d((/3,6, 8:9,32:35/)),strp(1:8))                !N_12
   strel(4) = DOT_PRODUCT(d((/4,7,9,10,36:39/)),strp(1:8))                !N_33 (a suppossed low value)
   strel(5) = DOT_PRODUCT(d((/24,28,32,36,11,12,13,14/)),strp(1:8))       !M_11 bending moments
   strel(6) = DOT_PRODUCT(d((/25,29,33,37,12,15,16,17/)),strp(1:8))       !M_22
   strel(7) = DOT_PRODUCT(d((/26,30,34,38,13,16,18,19/)),strp(1:8))       !M_12
   strel(8) = DOT_PRODUCT(d((/27,31,35,39,14,17,19,20/)),strp(1:8))       !M_33 to be nullified
   ! equivalent transverse shear stresses at faces, 4 shear strain values must be considered
   !        For assumed shear strains
   !          89  90  95  96 102 103  C13(1)
   !          90  91  97  98 104 105  C23(1)
   !          95  97  92  93 106 107  C13(2)
   !          96  98  93  94 108 109  C23(2)
   !         102 104 106 108  99 100  Psi_x
   !         103 105 107 109 100 101  Psi_y
   seq( 7) = DOT_PRODUCT(d((/ 89:90,95:96 /)),strt(1:4))
   seq( 8) = DOT_PRODUCT(d((/ 90:91,97:98 /)),strt(1:4))
   seq( 9) = DOT_PRODUCT(d((/ 95,97,92:93 /)),strt(1:4))
   seq(10) = DOT_PRODUCT(d((/ 96,98,93:94 /)),strt(1:4))

   IF(zigzag) THEN   ! psi gradient
     ! compute additional strains and basic cartesyan derivatives of area coordinates
     CALL grad_psis(ps,strp(9:12),e%cdq(:,:,:,1),e%asazz,psib,psih,e%area(:,1))
     strp(9:12) = -strp(9:12)             !change sign of additional in-plane strains
     psib(1:4)  = -psib(1:4)              !change sign of additional shear strains
     s(1) = (psib(2)+psib(4))/2d0         !natural center values
     s(2) = (psib(1)+psib(3))/2d0
     strt(5) = (e%jacin(1,1,1)*s(1)+e%jacin(2,1,1)*s(2))  !cartesian values
     strt(6) = (e%jacin(1,2,1)*s(1)+e%jacin(2,2,1)*s(2))  !of shear strains (sign changed)
     ! compute shear strain measure for output
     etas(1) = (strt(1)+strt(3))/2d0-strt(5)
     etas(2) = (strt(2)+strt(4))/2d0-strt(6)
     ! add influence of additional strains over in-plane stresses
     !    50 51 52 53    psi_1,1
     !    54 55 56 57    psi_2,2
     !    58 59 60 61    psi_1,2
     !    62 63 64 65    psi_2,1
     !    66 67 68 69
     !    70 71 72 73
     !    74 75 76 77
     !    78 79 80 81
     strel(1) = strel(1) +DOT_PRODUCT(d(50:53),strp(9:12))       !N_11
     strel(2) = strel(2) +DOT_PRODUCT(d(54:57),strp(9:12))       !N_22
     strel(3) = strel(3) +DOT_PRODUCT(d(58:61),strp(9:12))       !N_12
     strel(4) = strel(4) +DOT_PRODUCT(d(62:65),strp(9:12))       !N_33
     strel(5) = strel(5) +DOT_PRODUCT(d(66:69),strp(9:12))       !M_11
     strel(6) = strel(6) +DOT_PRODUCT(d(70:73),strp(9:12))       !M_22
     strel(7) = strel(7) +DOT_PRODUCT(d(74:77),strp(9:12))       !M_12
     strel(8) = strel(8) +DOT_PRODUCT(d(78:81),strp(9:12))       !M_33 to be nullified
     !            .. and on transverse shear stresses
     !           102 103  Psi_x
     !           104 105  Psi_y
     !           106 107
     !           108 109
     seq( 7) = seq( 7) + DOT_PRODUCT(d(102:103),strt(5:6))     !Q1(1)
     seq( 8) = seq( 8) + DOT_PRODUCT(d(104:105),strt(5:6))     !Q2(1)
     seq( 9) = seq( 9) + DOT_PRODUCT(d(106:107),strt(5:6))     !Q1(2)
     seq(10) = seq(10) + DOT_PRODUCT(d(108:109),strt(5:6))     !Q2(2)
     ! Compute additional moments
     !                                                   Em_11
     !                                                   Em_22
     !                                                   Em_12*
     !                                                   E0_33
     !                                                   X_11
     !                                                   X_22
     !                                                   X_12*2
     !                                                   alpha
     !    50 54 58 62 66 70 74 78  40 41 42 43           psi_1,1
     !    51 55 59 63 67 71 75 79  41 44 45 46           psi_2,2
     !    52 56 60 64 68 72 76 80  42 45 47 48           psi_1,2
     !    53 57 61 65 69 73 77 81  43 46 48 49           psi_2,1
     strel(11) = DOT_PRODUCT(d((/ 50,54,58,62,66,70,74,78,40,41,42,43/)),strp(1:12)) !MF11
     strel(12) = DOT_PRODUCT(d((/ 51,55,59,63,67,71,75,79,41,44,45,46/)),strp(1:12)) !MF22
     strel(13) = DOT_PRODUCT(d((/ 52,56,60,64,68,72,76,80,42,45,47,48/)),strp(1:12)) !MF12
     strel(14) = DOT_PRODUCT(d((/ 53,57,61,65,69,73,77,81,43,46,48,49/)),strp(1:12)) !MF21
     ! and additional transverse shear forces (assumed shear)
     !                                C13(1)
     !                                C23(1)
     !                                C13(2)
     !                                C23(2)
     !       102 104 106 108  99 100  Psi_x
     !       103 105 107 109 100 101  Psi_y
     strel(15) = DOT_PRODUCT(d((/ 102,104,106,108, 99,100 /)),strt(1:6))
     strel(16) = DOT_PRODUCT(d((/ 103,105,107,109,100,101 /)),strt(1:6))
     ! compute B matrix for bending and shear
     CALL bphi12s(e%area(:,1),e%cdq(:,:,:,1),e%asazz,btp0,bpp0,e%nangl,e%jacin(:,:,1),bth0,bph0)
   END IF
   ! transverse shear forces (for output)
   strel( 9) = seq(7) +seq( 9)
   strel(10) = seq(8) +seq(10)
   ! equivalent in-plane values at faces
   seq( 1:3) = strel(1:3)/2d0 - strel(5:7)/thick
   seq( 4:6) = strel(1:3)/2d0 + strel(5:7)/thick
   ! transverse stress
   seq(  11) = strel(4)
   ! integrated D8_F1 & F2
   !              27,31,35,39,        14,17,19,20, 0x4,78:81,0,0        ! M33

   ! COMPUTATION OF EQUIVALENT NODAL FORCES and H array

   DO i=1,nnf !for each face node
     j  = i+nnf  !for each other face node
     rl(:,i) = seq( 1)*bq0(:,i,1,1) + seq( 2)*bq0(:,i,2,1) + seq( 3)*bq0(:,i,3,1) + &
               seq( 7)*bs0(:,i,1,1) + seq( 8)*bs0(:,i,2,1) +                        &
               seq( 9)*bs0(:,i,1,2) + seq(10)*bs0(:,i,2,2) + seq(11)*b30(:,i)
     rl(:,j) = seq( 4)*bq0(:,i,1,2) + seq( 5)*bq0(:,i,2,2) + seq( 6)*bq0(:,i,3,2) + &
               seq( 7)*bs0(:,j,1,1) + seq( 8)*bs0(:,j,2,1) +                        &
               seq( 9)*bs0(:,j,1,2) + seq(10)*bs0(:,j,2,2) + seq(11)*b30(:,j)

     h0(:,i) = deq( 1)*bq0(:,i,1,1) + deq( 2)*bq0(:,i,2,1) + deq( 3)*bq0(:,i,3,1) + &
               deq( 7)*b30(:,i)
     h0(:,j) = deq( 4)*bq0(:,i,1,2) + deq( 5)*bq0(:,i,2,2) + deq( 6)*bq0(:,i,3,2) + &
               deq( 7)*b30(:,j)
   END DO

   aux = strel(8)/d(20)             !residual
   rl(:,1:nnode) = rl(:,1:nnode) - h0*aux             !modify residual forces using EAS residual and vector
   rl = rl*area
   IF( zigzag ) THEN
     DO i=1,nnf
       rlp(:,i) = MATMUL(bpp0(:,i,:),strel(11:14)) + MATMUL(btp0(:,i,:),strel(15:16))
       hs0(:,i) = MATMUL(bpp0(:,i,:),deq(8:11))
     END DO
     rlp = rlp*area
     hs0 = hs0*area
     rlp = rlp - hs0*aux               !modify residual forces using EAS residual and vector
   END IF

   !e%h(1:nvarl) = RESHAPE( h, (/nvarl/))*area  !keep EAS vector
   e%alpha = e%alpha - aux             !first update of EAS parameter  ¿+/-?
   ! stresses at faces for output
   e%stres((/1:2,4/),1) = (strel(1:3) - 6d0*strel(5:7)/thick)/thick
   e%stres((/1:2,4/),2) = (strel(1:3) + 6d0*strel(5:7)/thick)/thick
   e%stres(      3,1:2) =  strel(4)/thick
   e%stres(5:6,1) =  seq(7: 8)*2d0/thick
   e%stres(5:6,2) =  seq(9:10)*2d0/thick

   e%stint(1:8) = strel((/1:3,5:7,9:10/))     ! keep integrated stresses for output

   ! compute in-plane stabilization
   ka = area*stm ! jacobian at element center times Beta_m x 8G
   DO i=1,2  !for each face
     DO j=1,4   !for each mid-side point
       eh(j,i) = eh(j,i)*ka*e%area(j,i) !S_12^KH
     END DO
   END DO
   CALL stbm12r(rl,bm0,eh)
   ! compute shear stabilization
   ka = area*sts
   vas(3:4,:) = vas(3:4,:)*ka                                         !C_xi3_H
   CALL stbs12r(rl,bh0,vas(3:4,:),e%jacin)

   DO i=1,nnode             !for each node in the element
     n = e%lnods(i)     !node
     resid(1:3,n) = resid(1:3,n)-rl(1:3,i) !sum internal force
   END DO
   IF(zigzag)THEN
     e%stint(9:14) = strel(11:16)    !keep integrated stresses for output
     e%stint(15:16) = etas            !keep shear strain measure at element center
     ! compute shear stabilization
     ka = area*stsf
     s(1) = (-psib(2)+psib(4))/2d0*ka         !natural center values
     s(2) = (-psib(1)+psib(3))/2d0*ka
     s(1) = (e%jacin(1,1,1)*e%jacin(1,1,1) + e%jacin(2,1,1)*e%jacin(2,1,1))*s(1)
     s(2) = (e%jacin(1,2,1)*e%jacin(1,2,1) + e%jacin(2,2,1)*e%jacin(2,2,1))*s(2)
     ! compute in-plane stabilization
     kb = area*stmf ! jacobian at element center times Beta_m x 8G
     psih = psih*kb
     DO i=1,nnf
       psih(i) = psih(i)*e%area(i,1)
     END DO
     !rlp = rlp + MATMUL(bph,psih)  !(2,4,4) x (4) does Fortran 90 accepts it?
     CALL proma3(rlp,bph0,psih,8,4,.FALSE.)
     DO i=1,nnf             !for each node in the element
       n = e%lnods(i)     !node
       rlp(1:2,i ) = rlp(1:2,i ) + MATMUL(bth0(:,i,:),s)
       resid(7:8,n) = resid(7:8,n)-rlp(1:2,i) !sum internal force
     END DO
   END IF
   e => e%next          !point to next element in the list
 END DO
 RETURN
 9999 CALL runen2('')
 END SUBROUTINE resv12si
