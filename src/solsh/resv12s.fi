 SUBROUTINE resv12s( heade, coora, resid, beta, nnode, zigzag)
 !-------------------------------------------------------------------
 !
 !          EVALUATION OF INTERNAL FORCES ELEMENT T-L 3-D SOLID
 !
 !-------------------------------------------------------------------
 USE npo_db, ONLY : coord,coori,psii,psia  !coordinates at previous iteration
 USE gvar_db, ONLY : ksnxt           !computes Stiffness matrix in next iteration
 IMPLICIT NONE

 ! dummy arguments
 INTEGER (kind=4), INTENT(IN) ::  nnode       !number of nodes
 REAL(kind=8),INTENT (IN) :: coora(:,:),    & !present coordinates
                             beta(:)          !stabilization factors
 REAL(kind=8),INTENT (IN OUT) :: resid(:,:)   !internal nodal forces
 LOGICAL, INTENT(IN) :: zigzag
 TYPE (ele12), POINTER  :: heade              !pointer to first element

 ! local variables
 INTEGER (kind=4), PARAMETER :: ndime=3
 TYPE (ele12), POINTER :: e      !pointer to an element data
 LOGICAL :: newmt      ! TRUE if material constant computation necessary
 INTEGER (kind=4) :: osec,     & !associated material of previous element
                     ndofe,    & !number of element DOFs
                     nvarl,    & !number of displacement DOFs per element
                     secty       !associated sectyon type

 INTEGER (kind=4) ielem,             & !element number
                  isec,              & !associated section
                  nnf,               & !number of nodes in a basic face
                  i,ii,jj,j,n,l        !different indexes

 REAL (kind=8) ::  area,       & !element middle-surface area
                   thick,      & !thickness (original)
                   d(109),     & !Elastic integrated constitutive matrix
                   sts,stm,stsf,stmf       !stabilization factors

 ! variables for assumed strain transverse shear
 REAL (kind=8) :: tas(3,4),      & ! der x/x_3 at Assumed Strain points
                  gas(3,4),      & ! der x/tan at Assumed Strain points
                  vas(4,2),va(4),& ! strains at Assumed Strain Points
                  s(2),          & ! shear strains at center
                  bs(3,8,2,2),   & ! Bs matrix at face centers,
                  bh(24,2,2)       ! Bs Stab matrix
 ! variables for additional DOFs
 REAL (kind=8) :: hs(2,4),       & ! H vector for add DOFs
                  btp(2,4,2),    & ! shear B matrix for add DOFs
                  bpp(2,4,4),    & ! in-plane B matrix for add DOFs
                  bth(2,4,2),    & ! shear hourglass b-matrix at center
                  bph(2,4,4),    & ! bending hourglass b-matrix at sides
                  rlp(2,4),      & ! equivalent nodal forces for add DOFs
                  psib(4),       & ! Phi strains at Assumed Strain Points
                  psih(4),       & ! hourglass Phi strains at sides
                  ps(2,4),       & !
                  dps(2,4),      & !
                  etas(2)          !shear strain measure at element center
 ! variables for EAS transverse strain
 REAL (kind=8) f3(3),           & ! transvere gradient at element center
               c33,             & ! transverse CG Right Stretch component
               b3(3,nnode),     & ! B matrix associated to C33
               h(3,nnode),      & ! h matriz for displacement DOFs
               ka,kb              ! EAS DOF stiffness

 REAL (kind=8) strp(12),        & !in-plane strains
               strt(6),         & !transverse strains
               cq(3,2),         & !average metric tensor at each face
               strel(17),       & !local stresses
               deq(11),         & !Integrated Constitutive matrix to compute H vector
               seq(11),         & !equivalent stresses to compute equivalent nodal forces
               rl(ndime,nnode), & !nodal internal equivalent forces
               aux                !auxiliar vaue
 REAL (kind=8) :: u(ndime,nnode),     & !incremental displacements
                  x(ndime,nnode)        !element coordinates
 REAL (kind=8) :: tq(3,2,4,2),        & !(ndime,2,3,2) local in-plane deformation gradient at face sides
                  bq(3,4,3,2),        & !(ndime,nnode,3,2) in-plane B-matrix at face centers
                  bm(12,4,2),         & !in-plane B12-matrix at mid-point sides for stabilization
                  eh(4,2)               !in-plane stabilization strains at mid-side points

 REAL(kind=8) :: dstrp(12),dstrt(6),dphih(4),dalpha,y(ndime,nnode),delta,uf(3,3)
 LOGICAL :: first      ! TRUE if material constant computation necessary

 TYPE (section), POINTER :: sec  !pointer to a section data

 nvarl = ndime*nnode     ! number of displacement DOFs
 ndofe = nvarl
 IF( zigzag )ndofe = nvarl + nnode
 nnf   = nnode/2

 !***  Computes nodal internal forces
 osec = -1                           !no previous material
 e => heade                          !point to first element in the list
 DO                                  !loop over all the elements
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel                   !element number
   !IF(ielem == 526)THEN
   !  print *,ielem
   !END IF
   isec = e%matno                    !associated material
   !     SET MATERIAL CONSTANTS
   newmt = osec /= isec              !same material than previous ?
   IF(newmt)THEN                     !if new material, get properties
     osec = isec                     !keep present material
     sec => psecs(isec)%p             !point to section
     secty = sec%secty
     d = sec%rprop(6:114)
     thick = sec%rprop(1)
     IF( .NOT. zigzag )THEN
        IF(sec%rprop(4) == 0d0 ) THEN   !use computed SCF
           d((/89,95,92/)) = d((/89,95,92/))*sec%rprop(115)
           d((/90,96,97,93/)) = d((/90,96,97,93/))*sec%rprop(116)
           d((/91,98,94/)) = d((/91,98,94/))*sec%rprop(117)
        ELSE
           d(89:98) = d(89:98)*sec%rprop(4)
        END IF
     ELSE
       !IF( sec%iprop(4) == 1 )THEN ! For trigonometric use computed shear factor
       !  IF( sec%rprop(4) == 0d0 )THEN !use computed shear factor
       !    d((/89,92,95,99,102,106/)) = d((/89,92,95,99,102,106/)) *sec%rprop(115)
       !    d((/90,93,96,97,100,103,104,107,108/)) = d((/90,93,96,97,100,103,104,107,108/))*sec%rprop(116)
       !    d((/91,94,98,101,105,109/)) = d((/91,94,98,101,105,109/)) *sec%rprop(117)
       !  ELSE                          !use provided shear factor
       !    d(89:108) = d(89:108)*sec%rprop(4)
       !  END IF
       !END IF
       stmf= (d(47)+d(49))*beta(1)/2d0
       stsf= (d(99)+d(101))*beta(2)/24d0
     END IF
     stm = d(8)*beta(1)
     sts = (d(89)+d(91)+d(92)+d(94))*beta(2)/48d0
     newmt = .FALSE.                        !same material than previous ?

   END IF !newmt
   !
   area = e%dvol/thick            !Element area
   !*** computes actual configuration
   x(:,1:nnode) = coora(:,e%lnods(1:nnode))                !coordinates
   u(:,1:nnode) = x(:,1:nnode) - coori(:,e%lnods(1:nnode)) !incremental displacements
   ! compute EAS parameter from incremental displacements
   dalpha  = - DOT_PRODUCT( e%h(1:nvarl), RESHAPE(u,(/ nvarl /)))/e%ka  !incremental EAS parameter
   IF( ASSOCIATED(e%nangl) )THEN
     DO n=1,nnf        !for each node
       l = e%lnods(n)    !node
       ps(1,n) = psia(1,l)*e%nangl(1,n)+psia(2,l)*e%nangl(2,n)           !psi at principal directions
       ps(2,n) =-psia(1,l)*e%nangl(2,n)+psia(2,l)*e%nangl(1,n)
       dps(1,n) = ps(1,n) -psii(1,l)*e%nangl(1,n)-psii(2,l)*e%nangl(2,n) !Delta psi at principal directions
       dps(2,n) = ps(2,n) +psii(1,l)*e%nangl(2,n)-psii(2,l)*e%nangl(1,n)
     END DO
     dalpha = dalpha - DOT_PRODUCT( e%h(nvarl+1:), RESHAPE(dps,(/ nnode /)))/e%ka  !update EAS parameter
   END IF
   e%alpha = e%alpha + dalpha                                           !update EAS parameter

   !-------- begin to improve Geometric matrix -----------------------------------------------------
   IF( ksnxt )THEN
     !*** computes old configuration
     y = x - u                     !coordinates
     !--------  in-plane strains
     DO ii=1,2 ! for each face
       ! compute in-plane vectors
       i = nnf*ii-3         !first node of the face (1 or 5)
       DO jj=1,nnf  !for each mid side point
         tq(:,1:2,jj,ii) = MATMUL(y(:,i:i+3),e%cdq(1:4,1:2,jj,ii))  !f1 & f2
       END DO
     END DO
     CALL bmat12p(e%cdq,bq,tq,bm,e%area)               !in-plane b-matrix (bq) at faces and stabilization (bm)
     CALL proma1(dstrp( 7),u(1,1),bq(1,1,1,1),1,3,12)  !incremental in-plane strains at bottom face
     CALL proma1(dstrp(10),u(1,5),bq(1,1,1,2),1,3,12)  !incremental in-plane strains at top    face
     dstrp(1:3) = (+dstrp(7:9)+dstrp(10:12))/2d0       !incremental membrane strains
     dstrp(5:7) = (-dstrp(7:9)+dstrp(10:12))/thick     !incremental curvatures
     !--------  transverse strains
     ! EAS
     f3 = MATMUL(y(:,1:nnode),e%cartd)     !f_3 at element center
     c33 = DOT_PRODUCT(f3,f3)              !C(3,3) at element center
     DO i=1,nnode
       b3(:,i) = f3*e%cartd(i)             !b(:,3) matrix at element center
     END DO
     !---
     CALL proma1(dstrp( 4),u(1,1),b3(1,1),1,1,24)      !incremental transverse strain
     dstrp(8)   = dalpha                               !incremental alpha parameter
     !incremental forces
     dstrt(1) = DOT_PRODUCT(d((/     1:4,24:27/)),dstrp(1:8))                !N_11  membrane forces
     dstrt(2) = DOT_PRODUCT(d((/  2, 5:7,28:31/)),dstrp(1:8))                !N_22
     dstrt(3) = DOT_PRODUCT(d((/3,6, 8:9,32:35/)),dstrp(1:8))                !N_12
     dstrt(4) = DOT_PRODUCT(d((/24,28,32,36,11,12,13,14/)),dstrp(1:8))       !M_11 bending moments
     dstrt(5) = DOT_PRODUCT(d((/25,29,33,37,12,15,16,17/)),dstrp(1:8))       !M_22
     dstrt(6) = DOT_PRODUCT(d((/26,30,34,38,13,16,18,19/)),dstrp(1:8))       !M_12

     IF(zigzag) THEN   ! psi gradient
       ! compute additional strains and basic cartesyan derivatives of area coordinates
       CALL grad_psis(dps,dstrp(9:12),e%cdq(:,:,:,1),e%asazz,psib,psih,e%area(:,1))
       ! add influence of additional strains over in-plane stresses
       dstrt(1) = dstrt(1) +DOT_PRODUCT(d(50:53),dstrp(9:12))       !N_11
       dstrt(2) = dstrt(2) +DOT_PRODUCT(d(54:57),dstrp(9:12))       !N_22
       dstrt(3) = dstrt(3) +DOT_PRODUCT(d(58:61),dstrp(9:12))       !N_12
       dstrt(4) = dstrt(4) +DOT_PRODUCT(d(66:69),dstrp(9:12))       !M_11
       dstrt(5) = dstrt(5) +DOT_PRODUCT(d(70:73),dstrp(9:12))       !M_22
       dstrt(6) = dstrt(6) +DOT_PRODUCT(d(74:77),dstrp(9:12))       !M_12
       !dstrt(7) = dstrt(7) +DOT_PRODUCT(d(62:65),dstrp(9:12))       !N_33

       !            .. and on transverse shear stresses
       !seq( 7) = seq( 7) + DOT_PRODUCT(d(102:103),strt(5:6))     !Q1(1)
       !seq( 8) = seq( 8) + DOT_PRODUCT(d(104:105),strt(5:6))     !Q2(1)
       !seq( 9) = seq( 9) + DOT_PRODUCT(d(106:107),strt(5:6))     !Q1(2)
       !seq(10) = seq(10) + DOT_PRODUCT(d(108:109),strt(5:6))     !Q2(2)

     END IF

     e%se(20:22) = e%se(1:3) + (dstrt(1:3)/2d0 - dstrt(4:6)/thick)*area
     e%se(23:25) = e%se(4:6) + (dstrt(1:3)/2d0 + dstrt(4:6)/thick)*area

     !dstrt(7) = DOT_PRODUCT(d((/4,7,9,10,36:39/)),dstrp(1:8))                !N_33
     !e%se(30) = e%se(11) + dstrt(7)*area
     !!-------- transverse-shear strains
     !ii=1  ! bottom face
     !!compute transvere shear strain components
     !tas(:,:) = MATMUL(y,e%nfdas(:,:,ii))  !der x/x_3  at the 4 sides
     !gas(:,1) = (y(:,4) -y(:,1))/2d0 !point A der x/eta
     !gas(:,2) = (y(:,2) -y(:,1))/2d0 !point B der x/xita
     !gas(:,3) = (y(:,3) -y(:,2))/2d0 !point C der x/eta
     !gas(:,4) = (y(:,3) -y(:,4))/2d0 !point D der x/xita
     !CALL bsma12s(gas,tas,e%nfdas(:,:,1),bs(:,:,:,1),e%jacin(:,:,1),1,bh(:,:,1))     !compute B_s matrix at sampling points
     !ii=2   !top face
     !tas(:,:) = MATMUL(y,e%nfdas(:,:,ii))  !der x/x_3  at the 4 sides
     !gas(:,1) = (y(:,8) -y(:,5))/2d0 !point A der x/eta
     !gas(:,2) = (y(:,6) -y(:,5))/2d0 !point B der x/xita
     !gas(:,3) = (y(:,7) -y(:,6))/2d0 !point C der x/eta
     !gas(:,4) = (y(:,7) -y(:,8))/2d0 !point D der x/xita
     !CALL bsma12s(gas,tas,e%nfdas(:,:,2),bs(:,:,:,2),e%jacin(:,:,2),2,bh(:,:,2))     !compute B_s matrix at sampling points
     !!incremental strains (1..4)
     !CALL proma1(dstrt(1),u(1,1),bs(1,1,1,1),1,2,24)
     !CALL proma1(dstrt(3),u(1,1),bs(1,1,1,2),1,2,24)
     !dstrt(1)= DOT_PRODUCT(d((/ 89:90,95:96 /)),dstrt(1:4))
     !dstrt(2)= DOT_PRODUCT(d((/ 90:91,97:98 /)),dstrt(1:4))
     !dstrt(3)= DOT_PRODUCT(d((/ 95,97,92:93 /)),dstrt(1:4))
     !dstrt(4)= DOT_PRODUCT(d((/ 96,98,93:94 /)),dstrt(1:4))
     !e%se(26:29) = e%se(7:10) + dstrt(1:4)*area
   END IF
   ! ------- end to improve Geometric matrix -------------------------------------------------------

   cq = 0d0  ! initializes average in-plane metric tensor at each face

   DO ii=1,2 ! for each face
     ! compute variables associated with in-plane behavior
     i = nnf*ii-3         !first node of the face (1 or 5)
     DO jj=1,nnf  !for each mid side point
       tq(:,1:2,jj,ii) = MATMUL(x(:,i:i+3),e%cdq(1:4,1:2,jj,ii))  !f1 & f2
       ! add to average metric tensor
       cq(1,ii) = cq(1,ii) + DOT_PRODUCT(tq(:,1,jj,ii),tq(:,1,jj,ii))*e%area(jj,ii) !C11
       cq(2,ii) = cq(2,ii) + DOT_PRODUCT(tq(:,2,jj,ii),tq(:,2,jj,ii))*e%area(jj,ii) !C22
       eh(jj,ii) =           DOT_PRODUCT(tq(:,1,jj,ii),tq(:,2,jj,ii))               !keep C12(k) for stabilization
       cq(3,ii) = cq(3,ii) + eh(jj,ii)*e%area(jj,ii)                                !C12
     END DO
     eh(:,ii) = eh(:,ii) - cq(3,ii)        !stabilization strains (12) at mid-side points
     !compute transvere shear strain components
     tas(:,:) = MATMUL(x,e%nfdas(:,:,ii))  !der x/x_3  at the 4 sides
     IF( ii == 1 )THEN
       gas(:,1) = (x(:,4) -x(:,1))/2d0 !point A der x/eta
       gas(:,2) = (x(:,2) -x(:,1))/2d0 !point B der x/xita
       gas(:,3) = (x(:,3) -x(:,2))/2d0 !point C der x/eta
       gas(:,4) = (x(:,3) -x(:,4))/2d0 !point D der x/xita
       CALL bsma12s(gas,tas,e%nfdas(:,:,1),bs(:,:,:,1),e%jacin(:,:,1),1,bh(:,:,1))     !compute B_s matrix at sampling points
     ELSE
       gas(:,1) = (x(:,8) -x(:,5))/2d0 !point A der x/eta
       gas(:,2) = (x(:,6) -x(:,5))/2d0 !point B der x/xita
       gas(:,3) = (x(:,7) -x(:,6))/2d0 !point C der x/eta
       gas(:,4) = (x(:,7) -x(:,8))/2d0 !point D der x/xita
       CALL bsma12s(gas,tas,e%nfdas(:,:,2),bs(:,:,:,2),e%jacin(:,:,2),2,bh(:,:,2))     !compute B_s matrix at sampling points
     END IF
     DO l=1,nnf  !for each assumed strain point compute x_tan . x_X_3
       va(l) = DOT_PRODUCT(tas(:,l),gas(:,l))
     END DO
     vas(3,ii) =(va(2)+va(4))/2d0                                    !C_xi3
     vas(4,ii) =(va(1)+va(3))/2d0                                    !C_eta3
     vas(1,ii) = e%jacin(1,1,ii)*vas(3,ii)+e%jacin(2,1,ii)*vas(4,ii) !x_1-x_3
     vas(2,ii) = e%jacin(1,2,ii)*vas(3,ii)+e%jacin(2,2,ii)*vas(4,ii) !x_2-x_3
     vas(3,ii) =-va(2)+va(4)                                         !C_xi3_H
     vas(4,ii) =-va(1)+va(3)                                         !C_eta3_H
   END DO
   strt(1:2) = vas(1:2,1)   !cartesyan transverse shear strains at face centers
   strt(3:4) = vas(1:2,2)   !
   !--------check
   !CALL proma1(dstrt(1),u(1,1),bs(1,1,1,1),1,2,24)
   !CALL proma1(dstrt(3),u(1,1),bs(1,1,1,2),1,2,24)
   !--------
   CALL bmat12p(e%cdq,bq,tq,bm,e%area)   !in-plane b-matrix (bq) at faces and stabilization (bm)
   ! EAS
   f3 = MATMUL(x(:,1:nnode),e%cartd)     !f_3 at element center
   c33 = DOT_PRODUCT(f3,f3)              !C(3,3) at element center
   DO i=1,nnode
     b3(:,i) = f3*e%cartd(i)             !b(:,3) matrix at element center
   END DO

  ! First set of in-plane deformations
   strp(1) = (cq(1,1)+cq(1,2)-2d0)/4d0                 !Em_11
   strp(2) = (cq(2,1)+cq(2,2)-2d0)/4d0                 !Em_22
   strp(3) = (cq(3,1)+cq(3,2))/2d0                     !Em_12*2
   strp(4) = (c33-1d0)/2d0                             !E0_33
   strp(5) = (cq(1,2)-cq(1,1))/thick/2d0               !X_11
   strp(6) = (cq(2,2)-cq(2,1))/thick/2d0               !X_22
   strp(7) = (cq(3,2)-cq(3,1))/thick                   !X_12*2
   strp(8) = e%alpha                                   !alpha
   dstrp = 0d0
   !dstrp(1:3) = (dstrp(5:7)+dstrp(8:10))/2d0      !
   !dstrp(5:7) = (dstrp(5:7)-dstrp(8:10))/thick    !
   !CALL proma1(dstrp(4),u(1,1),b3(1,1),1,1,24)    !
   !dstrp(8)   = e%alpha                           !
   !----------------------

  ! First set of in-plane integrated stresses
 !             1  2  3  4 24 25 26 27     Em_11
 !             2  5  6  7 28 29 30 31     Em_22
 !             3  6  8  9 32 33 34 35     Em_12*
 !             4  7  9 10 36 37 38 39     E0_33
 !            24 28 32 36 11 12 13 14     X_11
 !            25 29 33 37 12 15 16 17     X_22
 !            26 30 34 38 13 16 18 19     X_12*2
 !            27 31 35 39 14 17 19 20     alpha
   strel(1) = DOT_PRODUCT(d((/     1:4,24:27/)),strp(1:8))                !N_11  membrane forces
   strel(2) = DOT_PRODUCT(d((/  2, 5:7,28:31/)),strp(1:8))                !N_22
   strel(3) = DOT_PRODUCT(d((/3,6, 8:9,32:35/)),strp(1:8))                !N_12
   strel(4) = DOT_PRODUCT(d((/4,7,9,10,36:39/)),strp(1:8))                !N_33 (a suppossed low value)
   strel(5) = DOT_PRODUCT(d((/24,28,32,36,11,12,13,14/)),strp(1:8))       !M_11 bending moments
   strel(6) = DOT_PRODUCT(d((/25,29,33,37,12,15,16,17/)),strp(1:8))       !M_22
   strel(7) = DOT_PRODUCT(d((/26,30,34,38,13,16,18,19/)),strp(1:8))       !M_12
   strel(8) = DOT_PRODUCT(d((/27,31,35,39,14,17,19,20/)),strp(1:8))       !M_33 to be nullified
   ! equivalent transverse shear stresses at faces, 4 shear strain values must be considered
   !        For assumed shear strains
   !          89  90  95  96 102 103  C13(1)
   !          90  91  97  98 104 105  C23(1)
   !          95  97  92  93 106 107  C13(2)
   !          96  98  93  94 108 109  C23(2)
   !         102 104 106 108  99 100  Psi_x
   !         103 105 107 109 100 101  Psi_y
   seq( 7) = DOT_PRODUCT(d((/ 89:90,95:96 /)),strt(1:4))
   seq( 8) = DOT_PRODUCT(d((/ 90:91,97:98 /)),strt(1:4))
   seq( 9) = DOT_PRODUCT(d((/ 95,97,92:93 /)),strt(1:4))
   seq(10) = DOT_PRODUCT(d((/ 96,98,93:94 /)),strt(1:4))

   IF(zigzag) THEN   ! psi gradient
     ! compute additional strains and basic cartesyan derivatives of area coordinates
     CALL grad_psis(ps,strp(9:12),e%cdq(:,:,:,1),e%asazz,psib,psih,e%area(:,1))
     s(1) = (psib(2)+psib(4))/2d0         !natural center values
     s(2) = (psib(1)+psib(3))/2d0
     strt(5) = e%jacin(1,1,1)*s(1)+e%jacin(2,1,1)*s(2)  !cartesian values
     strt(6) = e%jacin(1,2,1)*s(1)+e%jacin(2,2,1)*s(2)
     ! compute shear strain measure for output
     etas(1) = (strt(1)+strt(3))/2d0-strt(5)
     etas(2) = (strt(2)+strt(4))/2d0-strt(6)
     ! add influence of additional strains over in-plane stresses
      !    50 51 52 53    psi_1,1
      !    54 55 56 57    psi_2,2
      !    58 59 60 61    psi_1,2
      !    62 63 64 65    psi_2,1
      !    66 67 68 69
      !    70 71 72 73
      !    74 75 76 77
      !    78 79 80 81
     strel(1) = strel(1) +DOT_PRODUCT(d(50:53),strp(9:12))       !N_11
     strel(2) = strel(2) +DOT_PRODUCT(d(54:57),strp(9:12))       !N_22
     strel(3) = strel(3) +DOT_PRODUCT(d(58:61),strp(9:12))       !N_12
     strel(4) = strel(4) +DOT_PRODUCT(d(62:65),strp(9:12))       !N_33
     strel(5) = strel(5) +DOT_PRODUCT(d(66:69),strp(9:12))       !M_11
     strel(6) = strel(6) +DOT_PRODUCT(d(70:73),strp(9:12))       !M_22
     strel(7) = strel(7) +DOT_PRODUCT(d(74:77),strp(9:12))       !M_12
     strel(8) = strel(8) +DOT_PRODUCT(d(78:81),strp(9:12))       !M_33 to be nullified
     !            .. and on transverse shear stresses
     !           102 103  Psi_x
     !           104 105  Psi_y
     !           106 107
     !           108 109
     seq( 7) = seq( 7) + DOT_PRODUCT(d(102:103),strt(5:6))     !Q1(1)
     seq( 8) = seq( 8) + DOT_PRODUCT(d(104:105),strt(5:6))     !Q2(1)
     seq( 9) = seq( 9) + DOT_PRODUCT(d(106:107),strt(5:6))     !Q1(2)
     seq(10) = seq(10) + DOT_PRODUCT(d(108:109),strt(5:6))     !Q2(2)
     ! Compute additional moments
     !                                                   Em_11
     !                                                   Em_22
     !                                                   Em_12*
     !                                                   E0_33
     !                                                   X_11
     !                                                   X_22
     !                                                   X_12*2
     !                                                   alpha
     !    50 54 58 62 66 70 74 78  40 41 42 43           psi_1,1
     !    51 55 59 63 67 71 75 79  41 44 45 46           psi_2,2
     !    52 56 60 64 68 72 76 80  42 45 47 48           psi_1,2
     !    53 57 61 65 69 73 77 81  43 46 48 49           psi_2,1
     strel(11) = DOT_PRODUCT(d((/ 50,54,58,62,66,70,74,78,40,41,42,43/)),strp(1:12)) !MF11
     strel(12) = DOT_PRODUCT(d((/ 51,55,59,63,67,71,75,79,41,44,45,46/)),strp(1:12)) !MF22
     strel(13) = DOT_PRODUCT(d((/ 52,56,60,64,68,72,76,80,42,45,47,48/)),strp(1:12)) !MF12
     strel(14) = DOT_PRODUCT(d((/ 53,57,61,65,69,73,77,81,43,46,48,49/)),strp(1:12)) !MF21
     ! and additional transverse shear forces (assumed shear)
     !                                C13(1)
     !                                C23(1)
     !                                C13(2)
     !                                C23(2)
     !       102 104 106 108  99 100  Psi_x
     !       103 105 107 109 100 101  Psi_y
     strel(15) = DOT_PRODUCT(d((/ 102,104,106,108, 99,100 /)),strt(1:6))
     strel(16) = DOT_PRODUCT(d((/ 103,105,107,109,100,101 /)),strt(1:6))
     ! compute B matrix for bending and shear
     CALL bphi12s(e%area(:,1),e%cdq(:,:,:,1),e%asazz,btp,bpp,e%nangl,e%jacin(:,:,1),bth,bph)
     !       store profiles for selected interface
     !       IF( ielem == 1000 .OR. ielem == 1001)THEN  !to draw profile
     !         first = ielem == 1000
     !         IF( first )THEN
     !           delta = -coord(1,e%lnods(1))
     !           uf(3,3) = e%alpha
     !         ELSE
     !           delta = delta+coord(1,e%lnods(1))
     !           uf(1:3,1) = x(:,1)-coord(:,e%lnods(1))
     !           uf(1:3,2) = x(:,5)-coord(:,e%lnods(5))
     !           uf(1:2,3) = ps(:,1)
     !           uf(3,3) = (uf(3,3)+e%alpha)/2d0
     !         END IF
     !         !WRITE(58,"(i5)")ielem
     !         !WRITE(58,"('Em_11, Em_22, E0_33, X_11, X_22, alpha, g1b, g1t')")
     !         !WRITE(58,"(10e15.6)")strp((/1:2,4:6,8/)),strt(1),strt(3)  !standard for SOLSH
     !         !WRITE(58,"('Psi_11, Psi_22, Psi_1')")
     !         !WRITE(58,"(6e15.6)")strp(9),strp(12),strt(5)
     !         CALL zigzag_pro(sec,strp,strt,1,first,delta,uf)
     !       END IF
     !--------check
     !CALL proma1(dstrp(9),ps(1,1),bpp(1,1,1),1,4,8)
     !CALL proma1(dstrt(5),ps(1,1),btp(1,1,1),1,2,8)
     !--------
     deq(8:11) = d(78:81)         !Integrated D8_mphi
   END IF
   ! transverse shear forces (for output)
   strel( 9) = seq(7) +seq( 9)
   strel(10) = seq(8) +seq(10)
   ! equivalent in-plane values at faces
   seq( 1:3) = strel(1:3)/2d0 - strel(5:7)/thick
   seq( 4:6) = strel(1:3)/2d0 + strel(5:7)/thick
   ! transverse stress
   seq(  11) = strel(4)
   ! integrated D8_F1 & F2
   !              27,31,35,39,        14,17,19,20, 0x4,78:81,0,0        ! M33
   deq(1:3) = d((/27,31,35/))/2d0-d((/14,17,19/))/thick
   deq(4:6) = d((/27,31,35/))/2d0+d((/14,17,19/))/thick
   deq(7)   = d(39)

   ! COMPUTATION OF EQUIVALENT NODAL FORCES and H array

   DO i=1,nnf !for each face node
     j  = i+nnf  !for each other face node
     rl(:,i) = seq( 1)*bq(:,i,1,1) + seq( 2)*bq(:,i,2,1) + seq( 3)*bq(:,i,3,1) + &
               seq( 7)*bs(:,i,1,1) + seq( 8)*bs(:,i,2,1) +                       &
               seq( 9)*bs(:,i,1,2) + seq(10)*bs(:,i,2,2) + seq(11)*b3(:,i)
     rl(:,j) = seq( 4)*bq(:,i,1,2) + seq( 5)*bq(:,i,2,2) + seq( 6)*bq(:,i,3,2) + &
               seq( 7)*bs(:,j,1,1) + seq( 8)*bs(:,j,2,1) +                       &
               seq( 9)*bs(:,j,1,2) + seq(10)*bs(:,j,2,2) + seq(11)*b3(:,j)

     h (:,i) = deq( 1)*bq(:,i,1,1) + deq( 2)*bq(:,i,2,1) + deq( 3)*bq(:,i,3,1) + &
               deq( 7)*b3(:,i)
     h (:,j) = deq( 4)*bq(:,i,1,2) + deq( 5)*bq(:,i,2,2) + deq( 6)*bq(:,i,3,2) + &
               deq( 7)*b3(:,j)
   END DO

   aux = strel(8)/d(20)             !residual
   rl(:,1:nnode) = rl(:,1:nnode) - h*aux             !modify residual forces using EAS residual and vector
   rl = rl*area
   IF( zigzag ) THEN
     DO i=1,nnf
       rlp(:,i) = MATMUL(bpp(:,i,:),strel(11:14)) + MATMUL(btp(:,i,:),strel(15:16))
       hs (:,i) = MATMUL(bpp(:,i,:),deq(8:11))
     END DO
     rlp = rlp*area
     hs = hs*area
     e%h(nvarl+1:ndofe) = RESHAPE(hs, (/nnode/))  !includes area
     rlp = rlp - hs*aux               !modify residual forces using EAS residual and vector
   END IF

   e%ka = d(20)*area                           !keep EAS stiffness
   e%h(1:nvarl) = RESHAPE( h, (/nvarl/))*area  !keep EAS vector
   e%alpha = e%alpha - aux             !first update of EAS parameter
   !IF(e%numel == 1 .OR. e%numel == 40) WRITE(58,"('alpha after 3',e12.4,i5)")e%alpha,e%numel
   e%se(1:11) = seq*area              !keep integrated stresses for geometric stiffness
   ! stresses at faces for output
   e%stres((/1:2,4/),1) = (strel(1:3) - 6d0*strel(5:7)/thick)/thick
   e%stres((/1:2,4/),2) = (strel(1:3) + 6d0*strel(5:7)/thick)/thick
   e%stres(      3,1:2) =  strel(4)/thick
   e%stres(5:6,1) =  seq(7: 8)*2d0/thick
   e%stres(5:6,2) =  seq(9:10)*2d0/thick

   e%stint(1:8) = strel((/1:3,5:7,9:10/))     ! keep integrated stresses for output

   ! compute in-plane stabilization
   ka = area*stm ! jacobian at element center times Beta_m x 8G
   DO i=1,2  !for each face
     DO j=1,4   !for each mid-side point
       eh(j,i) = eh(j,i)*ka*e%area(j,i) !S_12^KH
     END DO
   END DO
   e%se(12:19) = RESHAPE( eh, (/8/)) !keep integrated stabilization forces
   CALL stbm12r(rl,bm,eh)
   ! compute shear stabilization
   ka = area*sts
   vas(3:4,:) = vas(3:4,:)*ka                                         !C_xi3_H
   CALL stbs12r(rl,bh,vas(3:4,:),e%jacin)

   DO i=1,nnode             !for each node in the element
     n = e%lnods(i)     !node
     resid(1:3,n) = resid(1:3,n)+rl(1:3,i) !sum internal force
   END DO
   IF(zigzag)THEN
     e%stint(9:14) = strel(11:16)    !keep integrated stresses for output
     e%stint(15:16) = etas            !keep shear strain measure at element center
     ! compute shear stabilization
     ka = area*stsf
     s(1) = (-psib(2)+psib(4))/2d0*ka         !natural center values
     s(2) = (-psib(1)+psib(3))/2d0*ka
     s(1) = (e%jacin(1,1,1)*e%jacin(1,1,1) + e%jacin(2,1,1)*e%jacin(2,1,1))*s(1)
     s(2) = (e%jacin(1,2,1)*e%jacin(1,2,1) + e%jacin(2,2,1)*e%jacin(2,2,1))*s(2)
     ! compute in-plane stabilization
     kb = area*stmf ! jacobian at element center times Beta_m x 8G
     psih = psih*kb
     DO i=1,nnf
       psih(i) = psih(i)*e%area(i,1)
     END DO
     !rlp = rlp + MATMUL(bph,psih)  !(2,4,4) x (4) does Fortran 90 accepts it?
     CALL proma3(rlp,bph,psih,8,4,.FALSE.)
     DO i=1,nnf             !for each node in the element
       n = e%lnods(i)     !node
       rlp(1:2,i ) = rlp(1:2,i ) + MATMUL(bth(:,i,:),s)
       resid(7:8,n) = resid(7:8,n)+rlp(1:2,i) !sum internal force
     END DO
     !IF( ielem == 1 .OR. ielem == 40 )THEN
       !WRITE(58,"('STABILIZATION', i5)")ielem
       !WRITE(58,"('In-Plane stresses')")
       !WRITE(58,"(8e15.6)")eh
       !WRITE(58,"('Shear stresses')")
       !WRITE(58,"(4e15.6)")vas(3:4,:)
       !WRITE(58,"('Forces')")
       !WRITE(58,"(8e15.6)")(rl(i,:),i=1,3)
       !WRITE(58,"('In-Plane phi strains  Kb=',e12.5)")kb
       !WRITE(58,"(4e15.6)")psih/kb
       !ps = psia(:,e%lnods(1:4))               !recompute without nodal angles
       !dps = ps- psii(:,e%lnods(1:4))
       ! matrices B(below) include the nodal systems at nodes
       !CALL proma1(dphih(1),ps(1,1),bph(1,1,1),1,4,8)
       !WRITE(58,"(4e15.6)")dphih
       !WRITE(58,"('relative areas used are ',/,4f10.5)")e%area(:,1)
       !WRITE(58,"('Shear phi strains Ka=',e12.4)")ka
       !WRITE(58,"(2e15.6)")s(1:2)/ka
       !CALL proma1(dphih(1),ps(1,1),bth(1,1,1),1,2,8)
       !WRITE(58,"(2e15.6)")dphih(1:2)
       !WRITE(58,"('Forces due to shear')")
       !WRITE(58,"(8e15.6)")rlp
      !IF( ANY(strt /= 0d0 ) )THEN
      !  WRITE(58,"('Residual Forces',i5)") ielem
      !  WRITE(58,"('     Std_strains')")
      !  WRITE(58,"(8e15.6,/,4e15.6)")strp(1:8),strt(1:4)
      !  WRITE(58,"(8e15.6,/,4e15.6)")dstrp(1:8),dstrt(1:4)
      !  WRITE(58,"('     Add_strains')")
      !  WRITE(58,"(6e15.6)")strp(9:12),strt(5:6)
      !  WRITE(58,"(6e15.6)")dstrp(9:12),dstrt(5:6)
      !  WRITE(58,"('     Add_stresses')")
      !  WRITE(58,"(6e15.6)")strel(11:16)
      !  WRITE(58,"('     Std_stesses')")
      !  WRITE(58,"(7e15.6,/,4e15.6)")strel(1:7),seq(7:10)
      !  WRITE(58,"('     Std_Nodal_F')")
      !  WRITE(58,"(3e15.6)")rl(:,1:6)
      !  WRITE(58,"('     Add_Nodal_F')")
      !  WRITE(58,"(2e15.6)")rlp(:,1:3)
      !END IF
     !END IF
   END IF
   e => e%next          !point to next element in the list
 END DO
 !WRITE(58,"(5e15.5)")resid((/1:3,7:8/),1:12)
 !WRITE(58,"(3e15.5)")resid(1:3,13:24)
 RETURN
 9999 CALL runen2('')
 END SUBROUTINE resv12s
 !-----------------------------------------------------------
 SUBROUTINE stbm12r(s,b,eh)
 IMPLICIT NONE
 ! dummy arguments
 REAL(kind=8), INTENT(IN) :: eh(:,:),b(:,:,:)
 REAL(kind=8), INTENT(IN OUT) :: s(:,:)
 ! local variables
 INTEGER(kind=4) :: j,k,l,m,i0,i
 REAL(kind=8) :: f

 i0 = 1   !first position in r for first face
 DO m=1,2  !for each face
   DO k=1,4        !for each mid-side point
     l = 0         !initializes position in B mat
     f = eh(k,m)     !integrated stabilization force
     DO i=i0,i0+3    !for each node of the face
       DO j=1,3        !for each DOF in the face-node
         l = l+1         !row
         s(j,i) = s(j,i) + f*b(l,k,m)
       END DO
     END DO
   END DO
   i0 = 5        !first position in r for second face
 END DO

 RETURN

 END SUBROUTINE stbm12r
 !-----------------------------------------------------------
 SUBROUTINE stbs12r(s,bs,eh,ji)
 IMPLICIT NONE
 ! dummy arguments
 REAL(kind=8), INTENT(IN) :: eh(:,:),bs(:,:,:),ji(:,:,:)
 REAL(kind=8), INTENT(IN OUT) :: s(:,:)
 ! local variables
 INTEGER(kind=4) :: i,j,l,m
 REAL(kind=8) :: a,b

 DO m=1,2  !for each face
   a = (ji(1,1,m)*ji(1,1,m) + ji(2,1,m)*ji(2,1,m))*eh(1,m)
   b = (ji(1,2,m)*ji(1,2,m) + ji(2,2,m)*ji(2,2,m))*eh(2,m)
   l = 0         !initializes position in B mat
   DO i=1,8       !for each node
     DO j=1,3       !for each DOF
       l = l+1    !row
       s(j,i) = s(j,i) + a*bs(l,1,m) + b*bs(l,2,m)
     END DO
   END DO
 END DO

 RETURN

 END SUBROUTINE stbs12r
 !-----------------------------------------------------------
 SUBROUTINE grad_psis(psi,grad,cdq,asa,psib,psih,area)
 ! compute Psi gradient, and Psi at shear points
 REAL(kind=8),INTENT(IN) :: psi(2,4),  & ! Psi nodal values at local system
                            cdq(4,2,4),& ! (in-plane) cartesyan derivatives at sides
                            asa(2,4),  & ! (in-plane) cartesyan proyection of sides
                            area(4)      ! relative areas at sides
 REAL(kind=8),INTENT(OUT) :: grad(4),  & ! in-plane gradient of additional displacements
                             psib(4),  & ! natural shear strains at sides
                             psih(4)     ! stabilization in-plane strain at sides
 INTEGER (kind=4) :: k
 REAL (kind=8) :: aux(4),auxi

 !   membrane/bending strains
 grad = 0d0 !Initializes average gradient
 DO k=1,4
   aux(1) = DOT_PRODUCT(psi(1,:),cdq(1:4,1,k))          !Psi_1,1
   aux(2) = DOT_PRODUCT(psi(2,:),cdq(1:4,2,k))          !Psi_2,2
   aux(3) = DOT_PRODUCT(psi(1,:),cdq(1:4,2,k))          !Psi_1,2
   aux(4) = DOT_PRODUCT(psi(2,:),cdq(1:4,1,k))          !Psi_2,1
   grad = grad + aux*area(k)                  !  weighted gradient
   psih(k) =  aux(3)+aux(4)                   !  hourglass strain
 END DO
 auxi =  grad(3)+grad(4)                !average
 psih = psih - auxi                     !sustract to obtain hourglass strains

 !  ANS shear components on sides (cartesian components computed later)
 psib(1) = (asa(1,1)*(psi(1,1)+psi(1,4)) + asa(2,1)*(psi(2,1)+psi(2,4)))/2d0 !A
 psib(2) = (asa(1,2)*(psi(1,2)+psi(1,1)) + asa(2,2)*(psi(2,2)+psi(2,1)))/2d0 !B
 psib(3) = (asa(1,3)*(psi(1,3)+psi(1,2)) + asa(2,3)*(psi(2,3)+psi(2,2)))/2d0 !C
 psib(4) = (asa(1,4)*(psi(1,4)+psi(1,3)) + asa(2,4)*(psi(2,4)+psi(2,3)))/2d0 !D

 RETURN
 END SUBROUTINE grad_psis
 !-----------------------------------------------------------
