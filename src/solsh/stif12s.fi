 SUBROUTINE stif12s(heade, gstif, force, coora, nnode, zigzag, beta)

 ! 8-node solid-shell element (SSOLAG).
 ! use Green-Lagrange strains and 2nd Piola-Kirchhoff stresses
 USE npo_db, ONLY : psia,coord
 IMPLICIT NONE
 ! dummy arguments
 INTEGER (kind=4), INTENT(IN) :: nnode    !number of nodes

 LOGICAL, INTENT(IN) :: zigzag    ! use additional DOFs
 REAL (kind=8), INTENT(IN) :: coora(:,:), &  ! present coordinates
                              beta(2)        !stabilization factors
 REAL (kind=8), INTENT(IN OUT) :: gstif(:),force(:)  !global stiffness and force vector
 TYPE (ele12), POINTER :: heade   !pointer to first element

 !Local Variables
 INTEGER (kind=4), PARAMETER :: ndime =3

 TYPE (ele12), POINTER :: e               !pointer to an element
 LOGICAL  :: newmt       !if present material different than previous
 INTEGER (kind=4) :: i,j,ii,jj,g,k,l, &  !different indexes
                     isec,osec,       &  !present and old section
                     nst,naux,        &  !
                     nvarl,ielem,nnf     !number of DOFs

 REAL (kind=8) :: d(0:109),             & !(nnn) material properties
                  thick

 REAL (kind=8) f3(3),c33,b3(3,nnode), & !gradient 3, C33 and associate B matrix
               area,                  & !mid-surface area
               ka,stm,sts,stmf,stsf     !stabilization factors

 REAL (kind=8) :: x(ndime,nnode),           &   !local coordinates
                  di(153),daux(153),        &   ! Auxiliar D matrix
                  cq(3,2),                  &   !in-plane metric tensor at faces
                  bq(3,4,3,2),              &   !in-plane B matrix at faces
                  bm(12,4,2),               &   !in-plane B-12 matrix at mid-point on faces
                  tq(ndime,2,4,2)               !in-plane tangent vectors at sides
 REAL (kind=8), ALLOCATABLE ::  bmatx(:,:),  &  !global B matrix (to be interpolated)
                                stiff(:)        !stiffness matrix
 ! variables for assumed strain transverse shear
 REAL (kind=8) :: tas(3,4),      & ! der x/x_3 at Assumed Strain points
                  gas(3,4),      & ! der x/tan at Assumed Strain points
                  vas(4,2),va(4),& ! aux and C23,C13 at faces
                  bs(3,8,2,2),bh(24,2,2)  ! Bs matrix at faces and stabilization part
 ! variables for additional DOFs
 REAL (kind=8) :: hs(2,4),       & ! H vector for add DOFs
                  btp(2,4,2),    & ! shear B matrix for add DOFs
                  bpp(2,4,4),    & ! in-plane B matrix for add DOFs
                  bth(2,4,2),    & ! shear hourglass b-matrix at center
                  bph(2,4,4)       ! bending hourglass b-matrix at sides
 REAL(kind=8) :: stife(32,32)

 TYPE (section), POINTER :: sec   !pointer to section

 d(0) = 0d0           !give a null value of many terms
 nvarl = ndime*nnode  !nnode*ndime number of basic element DOFs
 nst   = 11           !number of equivalent stress/strain measures
 naux  = 66           !nst*(nst+1)/2 size of constitutive matrix
 nnf = 4
 IF(zigzag) THEN
   nvarl = nvarl+2*nnf    !add additional DOFs
   nst   = nst + 4 + 2    !add additional strain measures
   naux  = 153            !nst*(nst+1)/2 resize consitutive matrix
 END IF
 ALLOCATE (stiff(nvarl*(nvarl+1)/2),bmatx(nvarl,nst))    !get memory for element stiffness matrix (upper part)

 !***  Compute Element Stiffness matrix for all elements
 bmatx = 0d0           !initializes B-matrix
 osec = -1             !initialize to a non-existent section
 e => heade            !point to first element

 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   isec = e%matno                    !associated section to element
   ielem = e%numel
   newmt = osec /= isec              !a different material must be considered
   IF(newmt)THEN                     !if new material, get properties
     osec = isec                     !keep present material
     sec => psecs(isec)%p            !point to section
     thick = sec%rprop(1)
     d(1:109)     = sec%rprop(6:114)
     IF( zigzag )THEN
       di(  1: 17) = d((/ 1:4,24:26,0,0,0,0,50:53,0,0 /))    ! N1
       di( 18: 33) = d((/ 5:7,28:30,0,0,0,0,54:57,0,0 /))    ! N2
       di( 34: 48) = d((/ 8:9,32:34,0,0,0,0,58:61,0,0 /))    ! N12
       di( 49: 62) = d((/  10,36:38,0,0,0,0,62:65,0,0 /))    ! N3
       di( 63: 75) = d((/     11:13,0,0,0,0,66:69,0,0 /))    ! M1
       di( 76: 87) = d((/     15:16,0,0,0,0,70:73,0,0 /))    ! M2
       di( 88: 98) = d((/        18,0,0,0,0,74:77,0,0 /))    ! M12
       !       27,31,35,39,14,17,19,20, 0x4,78:81,0,0        ! M33
       !IF( sec%iprop(4) == 1 )THEN ! For trigonometric use computed shear factor
       !  IF( sec%rprop(4) == 0d0 )THEN !use computed shear factor
       !    d((/89,92,95,99,102,106/)) = d((/89,92,95,99,102,106/)) *sec%rprop(115)
       !    d((/90,93,96,97,100,103,104,107,108/)) = d((/90,93,96,97,100,103,104,107,108/))*sec%rprop(116)
       !    d((/91,94,98,101,105,109/)) = d((/91,94,98,101,105,109/)) *sec%rprop(117)
       !  ELSE                          !use provided shear factor
       !    d(89:108) = d(89:108)*sec%rprop(4)
       !  END IF
       !END IF
       di( 99:108) = d((/ 89,90,95,96,0,0,0,0,102,103 /))    ! S11
       di(109:117) = d((/    91,97,98,0,0,0,0,104,105 /))    ! S21
       di(118:125) = d((/       92,93,0,0,0,0,106,107 /))    ! S12
       di(126:132) = d((/          94,0,0,0,0,108,109 /))    ! S22
       di(133:138) = d((/                   40:43,0,0 /))    ! MF1
       di(139:143) = d((/                   44:46,0,0 /))    ! MF2
       di(144:147) = d((/                   47:48,0,0 /))    ! MF12
       di(148:150) = d((/                      49,0,0 /))    ! MF21
       di(151:152) = d((/                      99:100 /))    ! SF1
       di(    153) = d(                           101   )    ! SF2
       stm = di(34)*beta(1)
       sts = (di(99)+di(109)+di(118)+di(126))*beta(2)/48d0
       stmf= (di(144)+di(148))*beta(1)/2d0
       stsf= (di(151)+di(153))*beta(2)/24d0
     ELSE
       di(  1: 11) = d((/ 1:4,24:26,0,0,0,0 /))   !N11
       di( 12: 21) = d((/ 5:7,28:30,0,0,0,0 /))   !N22
       di( 22: 30) = d((/ 8:9,32:34,0,0,0,0 /))   !N12
       di( 31: 38) = d((/  10,36:38,0,0,0,0 /))   !N33
       di( 39: 45) = d((/     11:13,0,0,0,0 /))   !M11
       di( 46: 51) = d((/     15:16,0,0,0,0 /))   !M22
       di( 52: 56) = d((/        18,0,0,0,0 /))   !M12
       !     27,31,35,39,14,17,19,20,0x4        ! M33
       di( 57: 60) = d((/     89,90,95,96 /))   !!11
       di( 61: 63) = d((/        91,97,98 /))   !S21
       di( 64: 65) = d((/           92,93 /))   !S12
       di(     66) = d(                94   )   !S22
       IF( sec%rprop(4) == 0d0 )THEN !use computed shear factor
         di((/57,59,64/)) = di((/57,59,64/))*sec%rprop(115)
         di((/58,60,62,65/)) = di((/58,60,62,65/))*sec%rprop(116)
         di((/61,63,66/)) = di((/61,63,66/))*sec%rprop(117)
       ELSE                          !use provided shear factor
         di(57:66) = di(57:66)*sec%rprop(4)
       END IF
       sts = (di(57)+di(61))*beta(2)/24d0
       stm = di(22)*beta(1)
     END IF
     newmt = .FALSE.               !same material than previous ?
     j = 1
     !DO i=1,nst
     !  k = j + nst - i
     !  WRITE(58,"(17e13.4)")di(j:k)
     !  j = k+1
     !END DO
   END IF !newmt
   ! new configuration
   area = e%dvol/thick    !area
   x(:,1:nnode) = coora(:,e%lnods(1:nnode))     !nodes of the element
   ! compute in-plane gradient at each mid-side point of upper and lower faces
   DO ii=1,2 ! for each face
     i = 1+nnf*(ii-1)     !first node of the face
     DO jj=1,nnf  !for each mid side point
       tq(:,1:2,jj,ii) = MATMUL(x(:,i:i+3),e%cdq(1:nnf,1:2,jj,ii))  !main element contribution
     END DO
     !compute transvere shear strain components
     tas(:,:) = MATMUL(x,e%nfdas(:,:,ii))  !der x/x_3 at the 4 mid-side points
     IF( ii == 1 )THEN      !bottom face
       gas(:,1) = (x(:,4) -x(:,1))/2d0 !point A der x/eta
       gas(:,2) = (x(:,2) -x(:,1))/2d0 !point B der x/xita
       gas(:,3) = (x(:,3) -x(:,2))/2d0 !point C der x/eta
       gas(:,4) = (x(:,3) -x(:,4))/2d0 !point D der x/xita
       CALL bsma12s(gas,tas,e%nfdas(:,:,1),bs(:,:,:,1),e%jacin(:,:,1),1,bh(:,:,1))     !compute B_s matrix at sampling points
     ELSE
       gas(:,1) = (x(:,8) -x(:,5))/2d0 !point A der x/eta
       gas(:,2) = (x(:,6) -x(:,5))/2d0 !point B der x/xita
       gas(:,3) = (x(:,7) -x(:,6))/2d0 !point C der x/eta
       gas(:,4) = (x(:,7) -x(:,8))/2d0 !point D der x/xita
       CALL bsma12s(gas,tas,e%nfdas(:,:,2),bs(:,:,:,2),e%jacin(:,:,2),2,bh(:,:,2))     !compute B_s matrix at sampling points
     END IF
   END DO

   CALL bmat12s(e%cdq,bq,tq,bm,e%area) !in-plane b-matrix at faces and stabilization

   IF( zigzag )THEN   ! compute BS_Phi matrix at element center
     CALL bphi12s(e%area(:,1),e%cdq(:,:,:,1),e%asazz,btp,bpp,e%nangl,e%jacin(:,:,1),bth,bph)
   END IF
   ! EAS
   f3 = MATMUL(x,e%cartd)             ! x_3 at element center
   c33 = DOT_PRODUCT(f3,f3)           ! C33 at element center
   DO i=1,nnode
     b3(:,i) = f3*e%cartd(i)          ! B33 at element center
   END DO

   stiff = 0d0                     !initializes stiffness matrix
   daux(1:naux) = di(1:naux)*area  !scale constitutive matrix
   ! Build complete B matrix (shell type Bm B3 Bb Bs Bf )
   CALL bmat12(bmatx,bq,b3,bs,thick,.FALSE.,zigzag,bpp,btp,nnf)        !
   CALL btdbpr(bmatx(1,1),daux(1),stiff(1),nvarl,nst)     ! B^T D B
   !WRITE(58,"('standard stiffness')")
   !CALL wrst12(nvarl,stiff)
       ! Geometric matrix for in plane components
   CALL kgmm12s(e%cdq,RESHAPE(e%se(20:25),(/3,2/)),stiff,e%area,nvarl)
   !! Kg for transverse shear
   !CALL kgms12s(e%nfdas,RESHAPE(e%se(26:29),(/2,2/)),e%jacin,stiff,nnode,nvarl)
   !! Kg for transverse stress !
   !CALL kgmt12s(e%cartd,e%se(30),stiff,nnode,nvarl)
   !Membrane Stabilization
   ka = area*stm
   CALL stbm12(stiff,bm,ka,e%area,nvarl)
   !WRITE(58,"('after membrane stabilization')")
   !CALL wrst12(nvarl,stiff)
   !CALL stmg04(e%cdq,RESHAPE(e%se(12:19),(/4,2/)),stiff,e%area)
   !Shear Stabilization
   ka = area*sts
   CALL stbs12(stiff,bh,ka,e%jacin,nvarl)
   WRITE(58,"('after shear stabilization')")
   CALL wrst12(nvarl,stiff)
   ! membrane and shear additional DOFs stabilization
   IF( zigzag )THEN
     ka = area*stmf
     CALL stbm12f(stiff,RESHAPE( bph,(/8,4/)),ka,e%area(:,1))
     !WRITE(58,"('after ZZ membr stabilization')")
     !CALL wrst12(nvarl,stiff)
     ka = area*stsf
     CALL stbs12f(stiff,RESHAPE( bth,(/8,2/)),ka,e%jacin(:,:,1))
     !WRITE(58,"('after ZZ shear stabilization')")
     !CALL wrst12(nvarl,stiff)
   END IF
!   print elemental stiffness matrix
!IF( ielem == 1 )THEN
!k = 0
!DO i=1,nvarl
!  DO j=i,nvarl
!    k = k + 1
!    bmatx(j,1) = stiff(k)
!  END DO
!  l = i
!  DO j=1,i-1
!    bmatx(j,1) = stiff(l)
!    l = l + nvarl - j
!  END DO
!  WRITE(58,"(32e22.14)")bmatx(:,1)
!END DO
!END IF
   ! condense EAS parameter
   !write(58,"(e15.5)")e%ka
   !write(58,"(32e15.6)")e%h
   CALL cond12(stiff,e%h,e%ka,nvarl)
   !  WRITE(58,"('after Alpha condensation ')")
   !  CALL wrst12(nvarl,stiff)
!   print elemental stiffness matrix
!IF( ielem == 1 )THEN
!k = 0
!DO i=1,nvarl
!  DO j=i,nvarl
!    k = k + 1
!    bmatx(j,1) = stiff(k)
!  END DO
!  l = i
!  DO j=1,i-1
!    bmatx(j,1) = stiff(l)
!    l = l + nvarl - j
!  END DO
!  WRITE(58,"(32e22.14)")bmatx(:,1)
!END DO
!END IF
   ! add to global stiffness
   CALL stiaux_ss(nnode,e%lnods,nvarl,zigzag,stiff(1),force(1),gstif(1) )
   !IF(ielem == 526)THEN
   !  WRITE(58,"( 6e12.4)")e%se(7:11)
   !  WRITE(58,"( 6e12.4)")e%se(26:30)
   !END IF
   e => e%next
 END DO
RETURN

 END SUBROUTINE stif12s
!-----------------------------------------------------------
! SUBROUTINE cond12(k,h,ka,n)
! IMPLICIT NONE
! ! dummy arguments
! INTEGER(kind=4), INTENT(IN) :: n
! REAL(kind=8), INTENT(IN) :: ka,h(:)
! REAL(kind=8), INTENT(IN OUT) :: k(:)
! ! local variables
! INTEGER(kind=4) :: i,j,l
! REAL(kind=8) :: f
! l = 0
! DO i=1,n
!   f = h(i)/ka
!   DO j=i,n
!     l = l+1
!     k(l) = k(l) - f*h(j)
!   END DO
! END DO
!
! RETURN
!
! END SUBROUTINE cond12
!-----------------------------------------------------------
 SUBROUTINE stbm12(s,b,ka,area,nvarl)
 IMPLICIT NONE
 ! dummy arguments
 INTEGER(kind=4), INTENT(IN) :: nvarl
 REAL(kind=8), INTENT(IN) :: ka,b(:,:,:),area(:,:)
 REAL(kind=8), INTENT(IN OUT) :: s(:)
 ! local variables
 INTEGER(kind=4) :: i,j,k,l,m,l0,la
 REAL(kind=8) :: f

 la = nvarl-12
 l0 = 0   !initializes
 DO m=1,2  !for each face
   DO k=1,4        !for each mid-side point
     l = l0        !initializes position in Stiff
     DO j=1,12     !for each DOF in the face
       f = b(j,k,m)*ka*area(k,m)
       DO i=j,12
         l = l+1    !row
         s(l) = s(l) + f*b(i,k,m)
       END DO
       l=l+la  !for first face skip rest of dofs
     END DO
   END DO
   l0 = l   !222        !last position in stiff for first face
            !IF( nvarl == 32 ) l0 = 318
   la = la - 12
 END DO

 RETURN

 END SUBROUTINE stbm12
!-----------------------------------------------------------
 SUBROUTINE stbs12(s,bh,ka,ji,nvarl)
 IMPLICIT NONE
 ! dummy arguments
 INTEGER(kind=4), INTENT(IN) :: nvarl
 REAL(kind=8), INTENT(IN) :: ka,bh(:,:,:),ji(:,:,:)
 REAL(kind=8), INTENT(IN OUT) :: s(:)
 ! local variables
 INTEGER(kind=4) :: i,j,l,m,la
 REAL(kind=8) :: a,b,f1,f2

 la = nvarl-24
 DO m=1,2  !for each face
   a = (ji(1,1,m)*ji(1,1,m) + ji(2,1,m)*ji(2,1,m))*ka
   b = (ji(1,2,m)*ji(1,2,m) + ji(2,2,m)*ji(2,2,m))*ka
   l = 0
   DO i=1,24       !for each DOF
     f1 = bh(i,1,m)*a
     f2 = bh(i,2,m)*b
     DO j=i,24
       l = l+1    !row
       s(l) = s(l) + f1*bh(j,1,m) + f2*bh(j,2,m)
     END DO
     l = l+la
   END DO
 END DO

 RETURN

 END SUBROUTINE stbs12
!-----------------------------------------------------------
 SUBROUTINE stbm12f(s,b,ka,area)
 IMPLICIT NONE
 ! dummy arguments
 REAL(kind=8), INTENT(IN) :: ka,b(:,:),area(:)
 REAL(kind=8), INTENT(IN OUT) :: s(:)
 ! local variables
 INTEGER(kind=4) :: i,j,k,l,m,l0
 REAL(kind=8) :: f1,f

   l0 = 492        !initializes at last position in STIFF
   DO k=1,4        !for each mid-side point
     l = l0        !initializes position in Stiff
     f1 = ka*area(k)
     DO j=1,8      !for each additional DOF
       f = b(j,k)*f1
       DO i=j,8
         l = l+1    !update position in stiffness matrix
         s(l) = s(l) + f*b(i,k)
       END DO
     END DO
   END DO

 RETURN

 END SUBROUTINE stbm12f
!-----------------------------------------------------------
 SUBROUTINE stbs12f(s,bh,ka,ji)
 !
 !
 !
 IMPLICIT NONE
 ! dummy arguments
 REAL(kind=8), INTENT(IN) :: ka,bh(:,:),ji(:,:)
 REAL(kind=8), INTENT(IN OUT) :: s(:)
 ! local variables
 INTEGER(kind=4) :: i,j,l,m,l0
 REAL(kind=8) :: a,b,f1,f2

   l0 = 492
   a = (ji(1,1)*ji(1,1) + ji(2,1)*ji(2,1))*ka
   b = (ji(1,2)*ji(1,2) + ji(2,2)*ji(2,2))*ka
   l = l0
   DO i=1,8        !for each DOF
     f1 = bh(i,1)*a
     f2 = bh(i,2)*b
     DO j=i,8
       l = l+1    !row
       s(l) = s(l) + f1*bh(j,1) + f2*bh(j,2)
     END DO
   END DO

 RETURN

 END SUBROUTINE stbs12f
!-----------------------------------------------------------
 SUBROUTINE wrst12(nvarl,stiff)
 INTEGER(kind=4), INTENT(IN) :: nvarl
 REAL(kind=8), INTENT(IN) :: stiff(:)
 INTEGER(kind=4):: i,j,k
 REAL(kind=8):: stife(nvarl,nvarl)
   k = 1
   DO i=1,nvarl
     j = k+nvarl-i
     stife(i,i:nvarl) = stiff(k:j)
     k= j + 1
   END DO
   DO i=1,nvarl
     DO j=1,i-1
       stife(i,j) = stife(j,i)
     END DO
     Write(58,"(32e15.6)")stife(i,:)
   END DO
 END SUBROUTINE wrst12
