 SUBROUTINE kgshm6(nnode,ndofn,nvarl,q,x,t,lb,stiff)
 !******************************************************************************
 !
 !     this routine compute the geometric stiffness due to shear stresses
 !     for the asummed shear strain shell elements
 !
 !******************************************************************************
 IMPLICIT NONE
 !                  routine parameters
 INTEGER (kind=4), INTENT(IN) :: nnode,ndofn,nvarl
 REAL (kind=8), INTENT(IN) :: q(:),x(:,:),t(:,:),lb(:,:,:)
 REAL (kind=8), INTENT(IN OUT) :: stiff(:)
 !                  local variables
 INTEGER (kind=4) i,j,k,l,n,ni,nj,poses,idof,jdof
 REAL    (kind=8) ckgeo,coef1,coef2,dx(3)
 !     local functions
 REAL (kind=8), PARAMETER  ::                                        &
                    nfass(4,4)=(/ 0.5d0,0.0d0,0.0d0,0.5d0,           &
                                  0.5d0,0.5d0,0.0d0,0.0d0,           &
                                  0.0d0,0.5d0,0.5d0,0.0d0,           &
                                  0.0d0,0.0d0,0.5d0,0.5d0/),         &
                    nfdas(4,2,4)=(/-0.25d0, 0.25d0, 0.25d0,-0.25d0,  &
                                   -0.50d0, 0.00d0, 0.00d0, 0.50d0,  &
                                   -0.50d0, 0.50d0, 0.00d0, 0.00d0,  &
                                   -0.25d0,-0.25d0, 0.25d0, 0.25d0,  &
                                   -0.25d0, 0.25d0, 0.25d0,-0.25d0,  &
                                    0.00d0,-0.50d0, 0.50d0, 0.00d0,  &
                                    0.00d0, 0.00d0, 0.50d0,-0.50d0,  &
                                   -0.25d0,-0.25d0, 0.25d0, 0.25d0/)

 INTEGER (kind=4)  poesti
 poesti(i,j,n) = (2*n-i)*(i-1)/2+j    ! position i,j in estif(nxn)

 !     for every assumed strain point
 DO k = 1,4
   l = MOD(k,2) + 1       !direction
   !       evaluates the configuration derivative in direction l
   !dx = MATMUL(x,nfdas(:,l,k)) !use SELECT CASE instead
   SELECT CASE (k)
   CASE (1)
      dx = (x(:,4) - x(:,1))/2d0
   CASE (2)
      dx = (x(:,2) - x(:,1))/2d0
   CASE (3)
      dx = (x(:,3) - x(:,2))/2d0
   CASE (4)
      dx = (x(:,3) - x(:,4))/2d0
   END SELECT
   !       for every node (row)
   DO ni = 1,nnode                                   !  node i
     idof = (ni-1)*ndofn
     !                      ni   with   ni
     !              delta t(i)  with delta t(i)
     ckgeo = - DOT_PRODUCT(dx,t(:,ni))*nfass(ni,k)*q(k)
     DO i = 4,5
       poses = poesti(idof+i,idof+i,nvarl)
       stiff(poses) = stiff(poses) + ckgeo
     END DO
     !              delta u(i)  with delta t(i)
     ckgeo = nfdas(ni,l,k)*nfass(ni,k)*q(k)
     DO j=1,3 !ndime
       poses = poesti(idof+j,idof+4,nvarl)
       stiff(poses) = stiff(poses) - ckgeo*lb(j,2,ni)
       poses = poses + 1
       stiff(poses) = stiff(poses) + ckgeo*lb(j,1,ni)
     END DO
     !            ni  with  nj    ni <> nj
     DO nj = ni+1,nnode
       jdof = (nj-1)*ndofn
       coef1 =  nfdas(ni,l,k)*nfass(nj,k)*q(k)
       coef2 =  nfdas(nj,l,k)*nfass(ni,k)*q(k)

       DO j = 1,3 !ndime
         ! over the submatrix diagonal delta u(i)  with delta t(j)
         poses = poesti(idof+j,jdof+4,nvarl)
         stiff(poses) = stiff(poses) - coef1*lb(j,2,nj)
         poses = poses + 1
         stiff(poses) = stiff(poses) + coef1*lb(j,1,nj)
         ! under the submatrix diagonal    delta u(j)  with delta t(i)
         poses = poesti(idof+4,jdof+j,nvarl)
         stiff(poses) = stiff(poses) - coef2*lb(j,2,ni)
         poses = poesti(idof+5,jdof+j,nvarl)
         stiff(poses) = stiff(poses) + coef2*lb(j,1,ni)
       END DO
     END DO                                        ! nj
   END DO                                          ! ni

 END DO                                                !k=1,nnass

 RETURN
 END SUBROUTINE kgshm6
