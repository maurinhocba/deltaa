 SUBROUTINE tanma6(nvarl,ndofe,ngaus,nstre,ngamm,nnode,nlayr,plast,   &
                   matty,lnods,prop,dmatx,sf,coora,euler,posgp,dvolu, &
                   cartd,jacin,strsg,ambda,ehist,strap,stres,stiff,   &
                   shape,bmatx,bsmtx,newmt,thick,nangl,jas)
 !***********************************************************************
 !
 !****this routine compute the stiffness matrix for quad-shell (elem.6)
 !
 !***********************************************************************
 IMPLICIT NONE
 !***  routine parameters
 LOGICAL, INTENT(IN) :: plast
 LOGICAL, INTENT(IN OUT) :: newmt
 INTEGER (kind=4), INTENT(IN) :: nvarl,ndofe,ngaus,nstre,ngamm,nnode,  &
                   nlayr,matty,lnods(:)
 REAL (kind=8), INTENT(IN) :: prop(:),dmatx(:),coora(:,:),posgp(:,:), &
                  euler(:,:),dvolu(:),shape(:,:),cartd(:,:,:),jacin(:,:,:), &
                  strsg(:,:),ambda(:,:),thick
 REAL(kind=8), POINTER :: ehist(:,:),strap(:,:,:),stres(:,:,:),nangl(:,:),jas(:,:)
 REAL(kind=8)  :: sf(3)
 REAL (kind=8), INTENT(OUT) :: stiff(:),bmatx(:,:,:),bsmtx(:,:,:)
 !***  local variables
 INTEGER (kind=4) i,j,g,k
 REAL (kind=8) s(2),strdv(8),tgp(3,ngaus),dx(3,2,ngaus),&
               dt(3,2,ngaus),x(3,nnode),t(3,nnode),     &
               lb(3,2,nnode),daux(105),qaux(ngamm),f2
 REAL (kind=8), SAVE :: d(8,8),dm(105)

 INTERFACE
   INCLUDE 'deriv6.h'
   INCLUDE 'dmat06.h'
 END INTERFACE

 !     gathers the actual coordinates and directors
 x  = coora(:,lnods)
 lb(:,1,:) = euler(1:3,lnods)
 lb(:,2,:) = euler(4:6,lnods)
 t  = euler(7:9,lnods)
 !                  evaluates bshear matrix
 CALL bshem6(x,t,lb,bsmtx,ndofe,jas,nangl)
 !     evaluates director, director & configuration derivatives at gauss points
 CALL deriv6(ngaus,shape,cartd,x,t,tgp,dx,dt)
 qaux = 0d0            !initializes qaux
 !     material matrix and memb & bend geo and qaux
 DO g = 1,ngaus
   IF(plast) THEN
     !      computes the consistent elasto-plastic constitutive matrix
     IF( nlayr == 1 )THEN
       CALL elpmo6(matty,ambda(2,g),prop(1),dmatx(1),strsg(1,g),strap(1,g,1), &
                   ehist(1,g),dx(1,1,g),dx(1,2,g),tgp(1,g),d(1,1))
     ELSE
       CALL elpms6(nlayr,ambda(2,g),dmatx(1),                           &
                   strap(1,g,1),strap(1,g,2),stres(1,1,g),              &
                   dx(1,1,g),dx(1,2,g),dt(1,1,g),dt(1,2,g),d(1,1),thick)
     END IF
   ELSE
     IF( nlayr == 1 )THEN
       IF( newmt )THEN
         IF( ndofe == 5 )THEN
           CALL modps6(matty,d(1,1),dmatx(1),prop(1),sf(1))
         ELSE
           CALL dmat06(dm,dmatx)
         END IF
         newmt = .FALSE.
       END IF
     ELSE
       f2 = thick*thick/12d0*ambda(2,g)**2
       d(1,1) = dmatx(1)*thick
       d(2,1) = dmatx(2)*thick
       d(2,2) = dmatx(3)*thick
       d(3,3) = dmatx(4)*thick
       d(4,4) = d(1,1)*f2
       d(5,4) = d(2,1)*f2
       d(5,5) = d(2,2)*f2
       d(6,6) = d(3,3)*f2
       d(7,7) = dmatx(5)*thick
       d(8,8) = d(7,7)
     END IF
   END IF
   !       scales d matrix & stress vector for numerical integration
   IF( ndofe == 5 )THEN
     k = 0
     DO i = 1,nstre
       DO j = i,nstre
         k = k+1
         daux(k) = d(j,i)*dvolu(g)
       END DO
       strdv(i) = strsg(i,g)*dvolu(g)
     END DO
   ELSE
     daux = dvolu(g)*dm
     strdv(:) = strsg(:,g)*dvolu(g)
   END IF
   !                  b matrix for membrane and bending
   CALL bmatx6(nnode,cartd(:,:,g),lb,bmatx,dx(:,:,g),dt(:,:,g),ndofe,nangl)
   !       evaluates shear b matrix at the gauss points
   CALL j1ptb6(ndofe,nnode,posgp(1,g),posgp(2,g),jacin(:,:,g),bsmtx,bmatx)
   !                  sums the material contribution
   !WRITE(58,"(5e15.6)")bmatx(1:5,1:4,7:8)
   !WRITE(58,"(6e14.6)")daux(34:36)
   CALL btdbpr(bmatx(1,1,1),daux(1),stiff(1),nvarl,nstre)
   !                  geometric part due to  membrane & bending stresses
   CALL kgeom6(nnode,ndofe,nvarl,cartd(:,:,g),lb,t,dx(:,:,g),strdv,stiff)
   !       equivalent q for transverse shear
   s(1) = jacin(1,1,g)*strdv(7) + jacin(2,1,g)*strdv(8)
   s(2) = jacin(1,2,g)*strdv(7) + jacin(2,2,g)*strdv(8)
   qaux(1) = qaux(1) + (1d0-posgp(1,g))*s(2)/2d0
   qaux(2) = qaux(2) + (1d0-posgp(2,g))*s(1)/2d0
   qaux(3) = qaux(3) + (1d0+posgp(1,g))*s(2)/2d0
   qaux(4) = qaux(4) + (1d0+posgp(2,g))*s(1)/2d0
 END DO
 !     adds the geometric part due to shear
 CALL kgshm6(nnode,ndofe,nvarl,qaux,x,t,lb,stiff)

 RETURN
 END SUBROUTINE tanma6
