 SUBROUTINE gauss7(coord,eule0,istop,ansmm,nnass,locax,posgp, &
                   shape,ap1,omat,heade,gauss,angdf,zigzag)
 !********************************************************************
 !
 !*** evaluates gauss points constants for shell element 7
 !    valid only for 6-noded triangular  element
 !********************************************************************
 IMPLICIT NONE
 ! dummy arguments
 INTEGER (kind=4), INTENT(OUT) :: istop   !error flag
 REAL (kind=8), INTENT(IN) :: coord(:,:),   & !initial coordinates
                              eule0(:,:),   & !original nodal system
                              posgp(:,:),   & !Gauss point position
                              omat(:,:,:,:),& !Gauss point position
                              angdf         !default angle X_1 - Ort_1
 INTEGER (kind=4), INTENT(IN) :: ansmm,      & !Assumed Natural Strain Model for Membrane
                                 nnass,      & !number of shear strains
                                 locax    !LOCal AXis option
 REAL (kind=8), INTENT(OUT) :: shape(:,:), & !Shape functions at gauss points
                              ap1(:,:,:)    !Shear PA matrix at Gauss Points
 TYPE (ele07), POINTER :: heade   !pointer to first element in the set
 LOGICAL, INTENT (IN) :: zigzag       !TRUE if additional in-plane displacement
 LOGICAL, INTENT (IN OUT) :: gauss    !TRUE if initial constant exists
 ! local variables
 INTEGER (kind=4) g,i,l
 REAL    (kind=8) deriv(nnode,2,ngaus),ang,modul,norml(3),tgp(3,ngaus),x(3,nnode),t(3,nnode),          &
                  rm(9),lb(3,2,nnode),p(2,nnass),dx(3,2,ngaus),dt(3,2,ngaus),dxt(3,nnass),ts(3,nnass), &
                  dfi(3,3,3)
 TYPE (ele07), POINTER :: e
 REAL (kind=8),PARAMETER ::  factor = 1.74532925199433d-02  !pi/180

 INTERFACE
   INCLUDE 'inrotm.h'
   INCLUDE 'lcasy6.h'
 END INTERFACE

 ! gauss points derivatives of nodal functions
 !           derivatives are necessary at GP to compute local system
 l = nnass/2+1
 p = 0d0 ; p(1,1) = 1d0 ; p(2,l) = 1d0
 DO g=1,ngaus
   CALL shap07(posgp(1,g),posgp(2,g),shape(:,g),deriv(:,:,g),0)
   IF( nnass > ngaus )THEN
     p(1,2) = posgp(1,g) ; p(2,l+1) = posgp(1,g)
     p(1,3) = posgp(2,g) ; p(2,l+2) = posgp(2,g)
     IF( nnass == 8 ) THEN
       p(1,4) = posgp(1,g)*posgp(2,g)
       p(2,8) = posgp(1,g)*posgp(2,g)
       p(1,8) =-posgp(2,g)*posgp(2,g)       !  Bathe et al
       p(2,4) =-posgp(1,g)*posgp(1,g)       !
       ap1(:,:,g) = MATMUL(p,am2)
     ELSE
       ap1(:,:,g) = MATMUL(p,am1)
     END IF
   END IF
 END DO

 IF( .NOT.gauss )THEN
 e => heade       !point to first element
 DO               !loop over the elements in the set
   IF (.NOT.ASSOCIATED (e) ) EXIT  !if all element processed, exit
   ! gathers the initial coordinates and directors
   x = coord(:,e%lnods)
   DO i=1,nnode
     CALL inrotm(eule0(:,e%lnods(i)),rm(:))
     t(:,i) = rm(7:9)
     IF( zigzag)THEN
        lb(:,1,i) =  rm(1:3)
        lb(:,2,i) =  rm(4:6)
     END IF
   END DO
   ang = (e%angle+angdf)*factor
   !
   DO g=1,ngaus
     tgp(:,g) = MATMUL(t,shape(:,g))    ! director at Gauss point, direct interpolation
     CALL vecuni(3,tgp(:,g),modul)      ! plus normalization
     !       compute the local cartesian system
     CALL lcasy6(deriv(:,:,g),x,e%jacin(:,:,g),e%dvolu(g),norml,ang,locax)
     IF(e%dvolu(g) <= 0) THEN
       WRITE(lures,"(' Negative or null Jacobian at shell elmnt',         &
         & i8,/,' at Gauss point ',i2,/,' Jacobian =',e13.4)",ERR=9999)     &
         & e%numel,g,e%dvolu(g)
       istop = 1
     END IF
     e%dvolu(g) = e%dvolu(g)*weigp(g)
     e%ambda(1,g) = DOT_PRODUCT(norml,tgp(:,g))    ! original angle between director and surface normal
     e%ambda(2,g) = 1d0                       ! initializes
     DO i = 1,nnode
       DO l = 1,2
         e%cartd(i,l,g) = e%jacin(l,1,g)*deriv(i,1,g)+e%jacin(l,2,g)*deriv(i,2,g)
       END DO
     END DO
   END DO
   !     compute initial 1st and 2nd fundamental forms (& angles with t)
   CALL stran7(ansmm,nnass,e%cartd,shape,ap1,x,t,e%jacin,omat,e%stra0,dx,dt,tgp,dxt,ts,dfi)
   !WRITE(58,"(6e15.5)")e%stra0(1:6,:)
   IF( zigzag ) CALL comp_ang07(nnode,x,t,lb,e%nangl,ang,locax) !e%jas
   e => e%next
   !WRITE(58,"(3e15.5)")t
   !WRITE(58,"(3e15.4)")tgp
 END DO
 gauss = .TRUE.
 END IF

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE gauss7
