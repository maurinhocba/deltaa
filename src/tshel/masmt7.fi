 SUBROUTINE masmt7(heade,emass,mass,sumat,lumpd,ifpre,ndofe,shape)
 !********************************************************************
 !
 !***  evaluates mass matrix for shell/triangular elements
 !
 !********************************************************************
 IMPLICIT NONE
 LOGICAL, INTENT(IN) :: lumpd
 INTEGER(kind=4), INTENT(IN) :: ndofe,ifpre(:,:)
 REAL (kind=8), INTENT(IN) :: shape(:,:)
 REAL (kind=8), INTENT(IN OUT) :: emass(:,:),sumat,mass(:)
 TYPE( ele07 ), POINTER :: heade

 !        local variables
 TYPE( ele07 ), POINTER :: e
 INTEGER (kind=4) g,j,kk,l,n,m,isec,idof,nposn,lm(30),nvar,osec
 REAL    (kind=8) a(nnode),tmass,rmass,auxvl, &
                  ms(465),b(nnode,nnode),diag,outd,sume1,thick
 TYPE (section), POINTER :: sec
 INTEGER (kind=4) poesti
 poesti(l,j) = (60-l)*(l-1)/2+j    ! position l,j in mass(30x30)

 sume1 = 0d0
 nvar = nnode*ndofe
 e => heade
 DO
   IF( .NOT.ASSOCIATED (e) )EXIT
   isec = e%matno                  !associated material
   IF( isec /= osec )THEN             !present and previous material diff
     sec => psecs(isec)%p
     thick = sec%rprop(1)
     tmass = sec%rprop(5)             ! surface density
     rmass = tmass*thick**2/12d0
     osec   = isec                    !update previous material
   END IF

   a = 0d0                !initializes nodal mass
   b = 0d0                !initializes nodal mass

   !       first possibility
   IF(.NOT.lumpd)b = 0d0           !for full mass matrix

   DO g = 1,ngaus
     DO n = 1,nnode
       a(n) = a(n) + e%dvolu(g)*shape(n,g)
       IF(.NOT.lumpd) THEN
         DO m=1,nnode
           b(n,m) = b(n,m) + e%dvolu(g)*shape(n,g)*shape(m,g)
         END DO
       END IF
     END DO
   END DO

   DO n = 1,nnode
     l = e%lnods(n)
     DO idof = 1,3
       emass(idof,l) = emass(idof,l) +  a(n)*tmass
     END DO
     DO idof = 4,ndofe
       emass(idof,l) = emass(idof,l) +  a(n)*rmass
     END DO
   END DO
   sume1 = sume1 + SUM(a)*tmass

   IF(.NOT.lumpd) THEN !consistent mass matrix  Assembles over MASS(maxa)
     nposn = nvar*(nvar+1)/2
     ms(1:nposn) = 0d0
     g = 0
     DO n = 1,nnode
       j = (n-1)*ndofe
       m = e%lnods(n)
       DO l = n,nnode
         kk = (l-1)*ndofe
         DO idof = 1,3
           nposn = poesti(j+idof,kk+idof)
           ms(nposn) = b(n,l)*tmass
         END DO
         !   this is not the correct mass matrix for rotational dof
         DO idof = 4,ndofe
           nposn = poesti(j+idof,kk+idof)
           ms(nposn) = b(n,l)*rmass
         END DO
       END DO
       DO j = 1,ndofe
         nposn = ifpre(j,m)
         g = g+1
         lm(g) = nposn
       END DO
     END DO
     CALL ensmat(nvar,lm(1),ms(1) ,mass(1))
   END IF
   e => e%next
 END DO
 WRITE(lures,"(//'  total mass for shell element :', e15.7)")sume1
 sumat = sumat + sume1
 RETURN
 END SUBROUTINE masmt7
