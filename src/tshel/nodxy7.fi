 SUBROUTINE nodxy7(nelem,heade,coord,eule0,euler,cpx)
 !*********************************************************************
 !
 !     interpolates coordinates for 6-node triangles
 !
 !*********************************************************************
 USE npo_db, ONLY : coora,coori,coorc
 IMPLICIT NONE
 INTEGER (kind=4) nelem,cpx(:,:)
 REAL    (kind=8) coord(:,:),eule0(:,:),euler(:,:)
 TYPE(ele07), POINTER :: heade

 INTEGER (kind=4) i,k,l,n,m
 TYPE(ele07), POINTER :: e
 REAL(kind=8) :: lmd(9,6),ang(3),long,t1(3),t2(3),alpha

  INTERFACE
    INCLUDE 'angeul.h'
    INCLUDE 'inrotm.h'
    INCLUDE 'vecuni.h'
    INCLUDE 'vecpro.h'
  END INTERFACE

 e => heade
 DO n = 1,nelem
   ! compute local systems at all nodes
   DO k=1,6
     ang = eule0(1:3,e%lnods(k))     !Recover the Euler angles (radians)
     CALL inrotm(ang,lmd(1:9,k))     !compute rotation matrix
   END DO
   ! ---------
   DO k = 4,6
     i = e%lnods(k)
     IF( cpx(1,i) == 1 )THEN         !if already computed
       cpx(1,i) = -1               ! inner node (paired)
     ELSE                            !not computed yet
       l = e%lnods(k-3)           ! first node of the side
       m = e%lnods(MOD(k,3)+1)    ! third node of the side
       cpx(1:3,i) = (/ 1, l, m /)  !set as boundary node (not paired), and keep vertex
       IF(ALL(coord(:,i) == 0d0) ) THEN      !generate coordinates?
         coord(:,i) = (coord(:,l)+coord(:,m))/2d0
       ELSE                       !compute control point coordinates
         coord(:,i) = 2*coord(:,i) - (coord(:,l)+coord(:,m))/2d0
       END IF
       coora(:,i) = coord(:,i)
       coorc(:,i) = coord(:,i)
       coori(:,i) = coord(:,i)
       alpha = 4d0   !initializes norm
       DO
         t1 = lmd(7:9,k)*alpha - lmd(7:9,k-3)-lmd(7:9,MOD(k,3)+1)  !t3 at control point
         CALL vecuni(3,t1,long)                                    !unit vector at control point
         t2 = 2d0*t1 + lmd(7:9,k-3) + lmd(7:9,MOD(k,3)+1)          !t3 at mid-side point
         CALL vecuni(3,t2,alpha)                                   !trial unit vector at mid-side point
         long = DOT_PRODUCT(t2,lmd(7:9,k))                         !proyection between trial and real
         IF( ABS(long-1d0) < 1e-14 )EXIT                           !check convergence
       END DO
       CALL vecpro(lmd(7:9,k),t1,ang)                !theta vector
       lmd(7:9,k) = t1                               !move to control point
       CALL vecpro(ang,lmd(1:3,k),t2)                !difference between t1 and new t1
       lmd(1:3,k) = lmd(1:3,k) + t2                  !new t1
       CALL vecuni(3,lmd(1:3,k),long)                !with unit length
       CALL vecpro(lmd(7:9,k),lmd(1:3,k),lmd(4:6,k)) !new t2
       ang = 0d0                                     !initializes euler angles
       CALL angeul(RESHAPE( lmd(1:9,k),(/3,3/)),ang,.TRUE.)   !returns Euler angles (in rads)
       eule0(1:3,i) =  ang
       euler(1:3,i) =  ang
     END IF
  END DO
  e => e%next
 END DO
 RETURN
 END SUBROUTINE nodxy7
