 SUBROUTINE loadp7 (igrav,force,gvect,gravy,heade)
 !********************************************************************
 !
 !***  evaluates gravity and surface loads for shell elements
 !
 !********************************************************************
 IMPLICIT NONE

 INTEGER (kind=4) :: igrav
 REAL (kind=8) :: force(:,:),gvect(3),gravy
 TYPE (ele07), POINTER  :: heade
 !        local variable

 TYPE (ele07), POINTER  :: elem
 INTEGER (kind=4) g,n,l,isec,osec
 REAL (kind=8) weigt,pvect(3),fvect(3),auxvl,rload(3,nnode)
 !REAL (kind=8) x(3,nnode),x1(3),x2(3),x3(3),p(nnode)
 !INTEGER, SAVE ::  i(4) = (/ 6,4,5,6 /), k(4) (/ 4,5,6,5 /)
 TYPE (section), POINTER :: sec

 IF(igrav /= 0) THEN
   osec = -1
   elem => heade
   DO
     IF (.NOT.ASSOCIATED (elem) ) EXIT    !all elements processed, Exit loop

     isec  = elem%matno                     !associated material
     IF( isec /= osec )THEN             !present and previous material diff
       sec => psecs(isec)%p
       weigt  = gravy*sec%rprop(5)      !surface density
       osec   = isec                    !update previous material
     END IF

     ! initializes the load vector
     rload = 0d0

     IF(weigt == 0.0d0) CYCLE

     pvect = weigt*gvect

!!    FIRST POSSIBILITY
!     x = coord(:,elem%lnods)
!!           for each sub-triangle
!            p = 0d0
!            DO n=1,4
!              x1 = x(:,k(n)) - x(:,n)
!              x2 = x(:,i(n)) - x(:,n)
!              CALL vecpro(x1,x2,x3)
!              CALL vecuni(ndime,x3,auxvl)
!              auxvl = auxvl/6d0
!              p(n)    = p(n)   +auxvl
!              p(i(n)) = p(i(n))+auxvl
!              p(k(n)) = p(k(n))+auxvl
!            END DO
!            DO n=1,nnode
!              rload(:e,n) = rload(:,n) + pvect*p(n)
!            END DO

!     SECOND POSSIBILITY
     DO g = 1,ngaus
       auxvl = elem%dvolu(g)
       DO n = 1,nnode
         fvect = shape(n,g)*auxvl*pvect
         rload(1:3,n) = rload(1:3,n) + fvect
       END DO
     END DO

     DO n = 1,nnode
       l = elem%lnods(n)
       force(1:3,l) = force(1:3,l) + rload(1:3,n)
     END DO
     elem => elem%next                       !point to next element
   END DO
 END IF
 RETURN
 END SUBROUTINE loadp7
