 SUBROUTINE load20 (igrav,force,gvect,gravy,heade,ntype,coord)
 !********************************************************************
 !
 !***  evaluates gravity load vector for 2-D Solid triangular elements
 !
 !********************************************************************
 IMPLICIT NONE

 INTEGER (kind=4) :: igrav,ntype
 REAL (kind=8) :: force(:,:),gvect(:),gravy,coord(:,:)
 TYPE (ele20), POINTER  :: heade

 !        local variable

 INTEGER (kind=4) i,j,n,l,osec
 REAL (kind=8) weigt,fvect(2),r,rm
 TYPE (ele20), POINTER :: elem
 TYPE (section), POINTER :: sec

 IF(igrav /= 0) THEN       !if gravity is present

   osec = -1
   elem => heade           !point to first element
   DO
     IF (.NOT.ASSOCIATED (elem) ) EXIT    !all elements processed, Exit loop

     j     = elem%matno                     !associated material
     IF( j /= osec ) THEN
       sec => psecs(j)%p
       weigt = gravy*sec%mtbas%prope(5)     !density
       osec = j
     END IF
     IF(weigt /= 0.0d0) THEN                !if not zero

       fvect = weigt*gvect(1:2)*elem%area1/3d0   !force vector at each node

       IF( ntype == 3 )THEN
         rm = SUM(coord(1,elem%lnods(1:3)))*4d0/3d0
         DO i=1,3   !for each side
           j = elem%lnods(kk(1,i))
           l = elem%lnods(kk(2,i))
           r = (coord(1,j) + coord(1,l) )/rm
           force(1:2,j) = force(1:2,j) + fvect(1:2)*r !sum on global force vector
           force(1:2,l) = force(1:2,l) + fvect(1:2)*r !sum on global force vector
         END DO

       ELSE

         DO n=1,nnode                          !for each node (nnode=3)
           l = elem%lnods(n)                   !node number
           force(1:2,l) = force(1:2,l) + fvect(1:2) !sum on global force vector
         END DO
       END IF
     END IF

     elem => elem%next                       !point to next element
   END DO
 END IF

 RETURN
 END SUBROUTINE load20
