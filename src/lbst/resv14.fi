 SUBROUTINE resv14( nele0, head0, iffix, coora, resid, logst, ierr, ttime, bottom, &
                     top, coorb, coort, ifact, stint, nonrg, quadr)
 !-------------------------------------------------------------------
 !
 !          EVALUATION OF INTERNAL FORCES ELEMENT TL CST-BST++
 !
 !-------------------------------------------------------------------
 !$ USE omp_lib
 !USE ctrl_db, ONLY : itemp
 USE npo_db, ONLY : coori,coord !,tempe !coordinates at previous iteration
 USE gvar_db, ONLY : ksnxt           !computes Stiffness matrix in next iteration
 IMPLICIT NONE

 ! dummy arguments
 LOGICAL, INTENT(IN) :: logst       !flags for small or large strain analysis
 LOGICAL, INTENT(IN) :: bottom,top  !flags for top and bottom surface computation
 LOGICAL, INTENT(IN) :: nonrg       !flags to improve non-regular meshes
 LOGICAL, INTENT(IN) :: quadr       !flags to improve non-regular meshes
 INTEGER (kind=4), INTENT(IN) :: nele0,     & !number of elements in the set
                                 iffix(:)     !nodal fixities
 INTEGER (kind=4), INTENT(OUT) :: ierr,     & !flag for error detection
                               ifact(:)       !weigths for surface computation
 REAL(kind=8),INTENT (IN) :: coora(:,:),    & !present coordinates
                             ttime            !present total time
 REAL(kind=8),INTENT (IN OUT) :: resid(:,:),& !internal nodal forces
                                 coorb(:,:),& !bottom surface coordinates
                                 coort(:,:)   !top surface coordinates
 TYPE (ele14), POINTER  :: head0              !pointer to first element
 REAL(kind=8), POINTER :: stint(:,:)       !moments and shear


 ! local variables
 REAL (kind=8), PARAMETER :: fac(4) = (/ -1d0, 1d0, 1d0, -1d0 /)

 TYPE (ele14), POINTER :: e    !pointer to an element data
 TYPE (ele14), POINTER  :: heade  !pointer to first element

 LOGICAL :: isidf(3),&! TRUE if side is clamped or symmetry line
            sides(3),&! TRUE if side element exist
            solsi(3),mti  ! TRUE if solid side
 INTEGER (kind=4)  :: iel,i3,nelem,   &    !element order
                      lna(4)      !solid side connectivities

 REAL (kind=8) stra1(6),  & !first and second fundamental forms
               bmem(9,3), & !membrane B matrix
               bflt(18,3),& !bending B matrix
               x(3,6),    & !nodal coordinates of the patch
               t(3,2,0:3),& !local in-plane vector at sides elms
               t3(3),tt(3),& !element normal
               h(3,3),    & !integrated vectors
               rl(3,6),   & !nodal internal equivalent forces
               y(3,4),yl(2,4),yp(3,4),sh(4)  !quad coordinates
 REAL (kind=8) ::  mn(3,3),   & !matrix to compute shear at boundaries
                   n1,n2,ls,  & !normal to the side and length
                   n11,n12,n22  !factors

 INCLUDE 'resv_p0.fpp'      !common definition

 !Auxiliar variables for parallel code
 !!$ INTEGER(kind=4), PARAMETER :: maxel=34816,minel=32768  !8 threads
 !!$ INTEGER(kind=4), PARAMETER :: maxel=18432,minel=16384  !4 threads
 !$ INTEGER(kind=4), PARAMETER :: maxel=10240,minel= 8192    !2 threads
 !$ INTEGER(kind=4):: nloop,iloop,irest    !
 INTEGER(kind=4):: lim_inf,  & ! first element for each processor
                   lim_sup,  & ! last element for each processor
                   num_chk     ! number of elements chunks

 !$ INTEGER(kind=4),PARAMETER:: MAXLOCK=2048              !number of keys
 !$ INTEGER(kind=4),SAVE     :: lock1(0:MAXLOCK-1)        !keys
 !!$ INTEGER(kind=OMP_lock_kind),SAVE :: lock1(0:MAXLOCK-1) !keys
 !$ LOGICAL,SAVE             :: inilock=.FALSE.           !initialization flag

 heade => head0
 nelem = nele0

 !Initialize exclusion variables for parallel code (only first time)
 !$ IF (.NOT.inilock) THEN                   !first time only
 !$   DO iel=0,MAXLOCK-1                     !for each key
 !$     CALL omp_init_lock(lock1(iel))          !unlock
 !$   END DO
 !$   inilock = .TRUE.                         !change flag
 !$ END IF
 !  check maximum number of elements to be processed
 !$ IF( nelem > maxel )THEN
 !$   nloop = nelem/minel
 !$   irest = MOD(nelem,minel)
 !$  IF( irest >= maxlock ) nloop = nloop + 1
 !$  nelem = minel
 !$ ELSE
 !$  nloop = 1
 !$ END IF
 !$ DO iloop=1,nloop

 !initialize variables
 num_chk =  1    !only one processor or thread
 lim_inf =  1    !first element
 lim_sup = nelem !last element

 !$OMP  PARALLEL                                                                           &
 !$OMP& SHARED (              ndepd, psecs, pmats,                                         &
 !$OMP&         heade, iffix, coora, resid, logst, ierr, ttime,                            &
 !$OMP&         bottom, top, coort, coorb, ifact, stint,                                   &
 !$OMP&         num_chk, lock1, letra            )                                         &
 !$OMP& PRIVATE(lim_inf, lim_sup, e, isidf, sides, solsi, mti, iel, i3, lna,               &
 !$OMP&         stra1, bmem, bflt, x, t, t3, tt, h, rl, y, yl, yp, sh,                     &
 !$OMP&         large, ttti, pflag,                                                        &
 !$OMP&         newmt,  natst, elast, shell, plast, shear, visco, coupled,                 &
 !$OMP&         ielem, i, j, k, n, l, ilv, jlv, error,                                     &
 !$OMP&         isec, nl, nlayr, mtype, nucom, secty, oldm, mate, numpt, osec, nvar,       &
 !$OMP&         stres, sigma, stran, stral, strel, stine, r1,r2, lb, lc, thnew, zk,        &
 !$OMP&         aux, area1, s1, s2, efpst, strpl, dstpl, eql,                              &
 !$OMP&         thick, poiss, db, ce, cp, c, gh, dm, alpha, propi, chi, chib, chid,        &
 !$OMP&         deatht, minstr, min_tr, max_tr,                                            &
 !$OMP&         thf, wei, shf,                                                             &
 !$OMP&         thickl, zposl, rr, cm, prop, volfr, lvari, val, varin,                     &
 !$OMP&         sec, mat, matm, matf, matsl)

 !$ IF( omp_get_num_threads() > 1 )THEN
   !$ num_chk = (nelem+omp_get_num_threads()-1)/omp_get_num_threads()
   !$ lim_inf = MIN(nelem,1+omp_get_thread_num()*num_chk)     !Find the first element in the list
   !$ lim_sup = MIN(nelem,num_chk*(1+omp_get_thread_num()))   !Find the last element in the list
 !$ END IF

 e => heade                          !point to head of the list
 DO iel=1,lim_inf-1                  !Loop over the list to find the first element in the list
   e => e%next                       !Point the first element of the list
 END DO

 !***  Computes nodal internal forces, integrating trought the thickness

 osec = -1                           !no previous material
 error = 0

 ELEMS: DO iel=lim_inf,lim_sup    !loop over the elements ()
   IF (ierr == 1) CYCLE ELEMS       ! if there is an error CYCLE TO END (RETURN or EXIT are not allowed in parallel)
   ielem = e%numel                   !element number
   isec = e%matno                   !associated material
   newmt = osec /= isec             !same material than previous ?
   IF(newmt)THEN                     !if new material, get properties
     INCLUDE 'resv_p1.fpp'           !get material constant
   END IF
   !*** computes actual configuration

   isidf = .FALSE.                  !initializes
   solsi = .FALSE.                  !initializes
   x(:,1:3) = coora(:,e%lnods(1:3)) ! get coordinates of the main triangle
   !-----------------------------------------------------------------
   ! compute linear strain and stress increments for geometric matrix
   IF(ksnxt) THEN
     y(:,1:3) = coori(:,e%lnods(1:3)) ! get coordinates of the main triangle
     h = x(:,1:3) - y(:,1:3)       ! incremental displacements
     !for main triangle
     t(:,1,0) = -MATMUL(y(:,1:3),e%b(:,0))     ! x(1)
     t(:,2,0) = +MATMUL(y(:,1:3),e%a(:,0))     ! x(2)
     CALL bmem14(e%a(:,0),e%b(:,0),bmem,t(:,:,0),3)
     CALL proma1(stran(1),h(1,1),bmem(1,1),1,3,9)  !incremental in-plane strains at bottom face
     stint(11,iel) =  stint(1,iel) + dm(1)*stran(1) + dm(2)*stran(2)
     stint(12,iel) =  stint(2,iel) + dm(2)*stran(1) + dm(3)*stran(2)
     stint(13,iel) =  stint(3,iel) + dm(4)*stran(3)
   END IF
   !-----------------------------------------------------------------
   x(:,4:6) = 0d0  ! ;  xo(:,4:6) = 0d0
   DO l =1,3                        !for each node in the patch
     i = l+3
     n = e%lnods(i)                 ! node number
     IF(n /= 0) THEN                ! node exist ?
       sides(l) = .TRUE.            ! side element exist
       x(:,i) = coora(:,n)          ! get coordinates of the side node
       !xo(:,i) = coord(:,n)          ! get coordinates of the side node
     ELSE
       sides(l) = .FALSE.           ! side does NOT exists
       j = e%lnods(hh(2,l))         ! first node of the side
       k = e%lnods(hh(1,l))         ! second node of the side
       !IF( iffix(j) < 0 .AND. iffix(k) < 0 )THEN !node on a side
       !  n = -iffix(j)  !compute position of the i+1 node
       !  lna(1:2) = nndpd(2:3,n)
       !  n = -iffix(k)  !compute position of the i+2 node
       !  lna(3:4) = (/ nndpd(3,n),nndpd(2,n) /)
       !  y =  coora(:,lna(:))  ! nodes of the quadrilateral
       !  t(:,1,0) = -y(:,1)+y(:,2)+y(:,3)-y(:,4) !phi,xita at the center
       !  t(:,2,0) = x(:,hh(1,l))-x(:,hh(2,l))    !side vector
       !  CALL vecpro(t(1,1,0),t(1,2,0),x(1,i))   !outward (to the solid) normal vector
       !  CALL vecuni(3,x(1,i),aux)          !unit normal to the quad
       !  e%a(1:3,l) = -x(:,i)           !unit normal to the solid side
       !  solsi(l) = .TRUE.
       !ELSE
       !  x(1:3,i) = 0d0            !null values (unnecessary)
       !END IF
       isidf(l) = ( iffix(j) /= 0 .AND. iffix(k) /= 0 )  !clamped side ?
     END IF
   END DO

   ! compute first and second fundamental forms
   CALL stra14(e%a,e%b,x,t3,t,h,sides,isidf,e%ci,nonrg,quadr,stra1,e%lb)
   !INCLUDE 'resv_p2.fpp'            !check thickness ratio

   ! Modify curvatures, substracting the original ones
   IF( shell ) stra1(4:6) = stra1(4:6) - e%stra0(1:3)
   e%stra1 = stra1(1:6)    ! keep Mid Surface metric tensors
   ! consider thermal strains
   !IF( alpha > 0 )THEN     ! compute
   !  t0 = 1d0+alpha*SUM(tempe(e%lnods(1:3),1))
   !  e%lb = e%lb*t0        ! modify thickness ratio
   !END IF

   thnew = thick*e%lb                  !thickness at new configuration

   !IF( alpha > 0 )t1 = alpha*SUM(tempe(e%lnods(1:3),2))*2d0/thnew

   IF( bottom .OR. top) THEN      !bottom or top surfaces required
     ! determine element normal to compute top-bottom surfaces
     IF( ALL(.NOT.isidf))THEN     !no clamped sides
       tt = t3                    !element normal
     ELSE                         !one or more clamped sides
       n = 0                      !initializes number of clamped sides
       DO i=1,3                   !loop over each side
         IF( isidf(i) )THEN       !if side clamped
           n = n+1                !increase number of clamped sides
           rl(:,n) = e%a(:,i)/2d0  !normal to plane of symmetry
         END IF
       END DO
       IF( n == 1)THEN            !for one clamped side (or symmetry plane)
         CALL vecuni(3,rl(1,1),aux)
         aux = DOT_PRODUCT(rl(:,1),t3)    !proyect normal over plane
         tt(:) = t3 - aux*rl(:,1)       !proyect normal over plane
       ELSE                       !mfor two clamped side (or symmetry planes)
         CALL vecpro(rl(1,1),rl(1,2),tt) !normal to both planes
       END IF
       CALL vecuni(3,tt,aux)             !unit vector
     END IF
     tt = tt*thnew          !
   END IF
   area1 = e%area1

   INCLUDE 'resv_p3.fpp'                !trougth the thickness integration
   stine(7:8) = 0d0                    !initializes shear
   ! new version
   DO i=1,3
     n = e%lside(i)                 ! element side
     IF(n > 0) THEN                 ! element exist ?
       stres(1:3) = stint(4:6,n)
     ELSE !boundary side
       ls  = SQRT(e%b(i,0)**2+e%a(i,0)**2)     !side pseudo length
       n1 =  e%b(i,0)/ls                     !normalizes side to compute normal
       n2 = -e%a(i,0)/ls
       n11 = n1*n1                         !auxiliar factors
       n12 = n1*n2
       n22 = n2*n2
       IF (isidf(i) )THEN !clamped/symmetry
         mn = RESHAPE ((/   n11*n11+n22*n22,       2d0*n11*n22, n12*(n11-n22),    &
                                2d0*n11*n22,   n11*n11+n22*n22, n12*(n22-n11),    &
                          2d0*n12*(n11-n22), 2d0*n12*(n22-n11),   4d0*n11*n22 /), &
                      (/3,3/))
       ELSE               !simple supported
         mn = RESHAPE ((/ 2d0*n11*n22+n22*n22,            -n11*n22,        -n12*n11,    &
                                     -n11*n22, 2d0*n11*n22+n11*n11,        -n12*n22,    &
                                 -2d0*n12*n11,        -2d0*n12*n22, n11*n11+n22*n22 /), &
                      (/3,3/))
       END IF
       stres(1:3) = MATMUL (mn,stint(4:6,iel))
     END IF
     stine(7) = stine(7) + stres(1) * e%b(i,0) - stres(3) * e%a(i,0)
     stine(8) = stine(8) + stres(3) * e%b(i,0) - stres(2) * e%a(i,0)
   END DO
!   old version
!   DO i=1,3
!     n = e%lside(i)                 ! element side
!     IF(n > 0) THEN                ! element exist ?
!       stine(7) = stine(7) + stint(4,n) * e%b(i,0) - stint(6,n) * e%a(i,0)
!       stine(8) = stine(8) + stint(6,n) * e%b(i,0) - stint(5,n) * e%a(i,0)
!     ELSE
!       stine(7) = stine(7) + stint(4,iel) * e%b(i,0) - stint(6,iel) * e%a(i,0)
!       stine(8) = stine(8) + stint(6,iel) * e%b(i,0) - stint(5,iel) * e%a(i,0)
!     END IF
!   END DO

   stint(1:10,iel) = stine                      !store N, M, Q & vMS  for post-processing
   stine(1:6) = stint(1:6,iel)*area1            !Original area used (TLF)

   ! actual membrane B Matrix
   CALL bmem14(e%a(:,0),e%b(:,0),bmem,t(:,:,0),3)
   CALL proma3(rl(1,1),bmem(1,1),stine(1),9,3,.TRUE.)  !membrane contributions
   ! compute bending B matrix
   IF(shell)THEN
     rl(:,4:6) = 0d0
     IF( quadr )THEN
       CALL bfle14q(e%lb,e%a,e%b,sides,isidf,bflt,t,t3,h)
     ELSE
       CALL bfle14(e%lb,e%a,e%b,sides,isidf,bflt,t,t3,h,e%ci,nonrg)
     END IF
     CALL proma3(rl(1,1),bflt(1,1),stine(4),18,3,.FALSE.) !bending contributions
   END IF

   !mti = .FALSE.
   !DO i=3,1,-1
   !  IF( solsi(i) )THEN
   !    j = hh(2,i)         ! first node of the side
   !    k = hh(1,i)         ! second node of the side
   !    t(:,1,0) = x(:,k)-x(:,j)     !side J-K
   !    CALL vecuni(3,t(1,1,0),zk)     !unit side vector
   !    ! bending moment times original side length / 2 / present thickness
   !    aux =-(stine(4)*e%b(2,i)**2+stine(5)*e%b(3,i)**2+2d0*stine(6)*e%b(2,i)*e%b(3,i)) &
   !          /(2d0*area1*e%b(1,i)*thnew)     !times the side length, divided by the thickness
   !    stres = x(:,i+3)*aux            !forces normal to the face
   !  !  ! torsor moment  = forces applied on nodes J and K
   !  !  aux = ((stine(5)-stine(4))*e%b(2,i)*e%b(3,i) + stine(6)*(e%b(2,i)**2-e%b(3,i)**2))/area1
   !  !  lc = aux*t3                     !point loads leading to torsor moment
   !  !  rl(:,j) = rl(:,j) - lc          !modify node J forces
   !  !  rl(:,k) = rl(:,k) + lc          !modify node K forces
   !  !  ! "S" forces = torsor moment * original length / 2 / present thickness
   !  !  aux = aux/(2d0*e%b(1,i)*thnew)
   !  !  stres = stres + aux*t(:,1,0)      !add to node forces
   !    CALL vecpro(t(1,1,0),x(1,i+3),t(1,2,0)) !both are unit vectors ==> t vector at the side
   !    t(:,2,0) = t(:,2,0)*thnew*0.5           !distance along normal
   !    yp(:,1) = x(:,j) - t(:,2,0)  !under j == 1
   !    yp(:,2) = x(:,j) + t(:,2,0)  !above j == 2
   !    yp(:,3) = x(:,k) + t(:,2,0)  !above k == 3
   !    yp(:,4) = x(:,k) - t(:,2,0)  !under k == 4
   !    yl = RESHAPE((/ -1d0,-1d0, 1d0,-1d0, 1d0, 1d0,-1d0, 1d0 /),(/2,4/))
   !    IF( mti )THEN !recompute LNA and Y
   !      n = -iffix(e%lnods(j))  !compute position of the i+1 node
   !      lna(1:2) = nndpd(2:3,n)
   !      n = -iffix(e%lnods(k))  !compute position of the i+2 node
   !      lna(3:4) = (/ nndpd(3,n),nndpd(2,n) /)
   !      y =  coora(:,lna(:))  ! nodes of the quadrilateral
   !    END IF
   !    DO n=1,4
   !      ! recompute proyections
   !      CALL projq4(yp(1,n),y(1,1),yl(1,n),yl(2,n),sh(1),.TRUE.)
   !      lb = fac(n)*stres     !equivalent force
   !      DO j=1,4
   !        i3 = lna(i)          !node
   !        !$ CALL omp_set_lock(lock1(MOD(i3,MAXLOCK)))    !Start blocking acess in shared variables
   !        resid(:,i3) = resid(:,i3) + sh(j)*lb
   !        !$ CALL omp_unset_lock(lock1(MOD(i3,MAXLOCK)))  !End blocking acess in shared variables
   !      END DO
   !    END DO
   !    mti = .TRUE.
   !  END IF
   !END DO

   DO i=1,6             !for each node in the patch
     n = e%lnods(i)     !node
     IF(n > 0) THEN
       !$ CALL omp_set_lock(lock1(MOD(n,MAXLOCK)))    !Start blocking acess in shared variables
       resid(1:3,n) = resid(1:3,n)+rl(1:3,i) !sum internal force
       IF( i < 4 )THEN
         IF( bottom .OR. top )THEN
           IF(bottom) coorb(:,n) = coorb(:,n) - tt !bottom surface
           IF(top   ) coort(:,n) = coort(:,n) + tt !top surface
           ifact(n) = ifact(n) + 2  !increase weigthing factor
         END IF
       END IF
       !$ CALL omp_unset_lock(lock1(MOD(n,MAXLOCK)))  !End blocking acess in shared variables
     END IF
   END DO
   e => e%next          !point to next node in the list
 END DO ELEMS
 !$OMP END PARALLEL
 !$ IF( iloop < nloop )THEN
 !$   DO i=1,nelem
 !$     heade => heade%next
 !$   END DO
 !$   IF( iloop + 1 == nloop ) THEN
 !$     IF( irest < maxlock)THEN
 !$       nelem = nelem + irest
 !$     ELSE
 !$       nelem = irest
 !$     END IF
 !$   END IF
 !$ END IF
 !$ END DO

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE resv14
