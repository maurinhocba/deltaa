 SUBROUTINE stif14(heade, coora, gstif, force, logst, stint, nonrg, iffix)

 ! computes stiffness matrix for element LBST

 IMPLICIT NONE
                               !--------- to optimize ---------
 INTEGER (kind=4), PARAMETER :: ndime =3, nnode = 3, nvarl = 18
 LOGICAL, INTENT(IN) :: logst, & !large strain
                        nonrg    !True = non-regular meshes
 REAL (kind=8), INTENT(IN) :: coora(:,:)      !present coordinates
 REAL (kind=8), INTENT(IN OUT) :: gstif(:), & !global stiffness matrix
                                  force(:)    !global force vector (prescribe displacements)
 TYPE (ele14), POINTER :: heade               !pointer to first element
 REAL(kind=8), POINTER :: stint(:,:)       !moments and shear
 INTEGER (kind=4), INTENT(IN):: iffix(:)

 !Local Variables

 TYPE (ele14), POINTER :: e      !pointer to an element

 LOGICAL :: sides(3), & !if sides exist
            isidf(3)    !if sides clamped

 REAL (kind=8) bmatx(18,6),& !bending B matrix
               x(3,6),     & !nodal coordinates of the patch
               t(3,2,0:3), & !local in-plane vector at sides elms
               t3(3),      & !element normal
               h(3,3),     & !integrated vectors
               stiff(171)     !171 = nvarl*(nvarl+1)/2


 LOGICAL :: ttti,    &! TRUE if Trougth The Thickness Integration is necessary
            pflag     ! TRUE if plastic flow in the step

 LOGICAL :: newmt,   &! TRUE if material constant computation necessary
            found,   &! TRUE if section exists
            natst,   &! TRUE for large strain analysis
            elast,   &! TRUE if material is strictly elastic
            shell,   &! TRUE if bending included
            plast     ! TRUE if plasticity is to be considered

 INTEGER (kind=4) ielem,    & !element number
                  i,j,k,n,l,jn,kn !different indexes

 INTEGER (kind=4) isec,  & !associated material
                  nlayr, & !number of layers
                  mtype, & !associated material type
                  secty, & !section type
                  !numpt, & !number of points in curve
                  osec,  & !associated material of previous element
                  nvar     !number of internal variables per layer

 REAL (kind=8) stran(3),  & !C=U^2  also Log strains
               stres(3),  & !layer stresses or t.t.t integrated stresses (forces)
               stra1(6),  & !first and second fundamental forms
               lambd(7),  & !consistency parameters
               u2(3),     & !C^-1
               r1,r2,     & !eigevenctor components in local system
               lb(3),     & !eigenvalues
               thnew,     & !present thickness
               zk,zk2,    & !distance to mid surface
               aux,       & !auxiliar value
               voli,area1,& !volume and area element
               !! t0,t1,j0,  & !thermical dilatation coeff
               efpst

 REAL (kind=8) thick,     & !thickness (original)
               alpha,     & !thermical dilatation coeff
               propi(13), & !Plastic Material properties
               chi(12),   & !Hill 48 coefficients
               c(4),      & !Elastic constitutive matrix for plane stress
               dm(21),    & !Elastic integrated constitutive matrix
               dmatx(6,6), &
               daux(21),   &
               cm(3,3),    &
               d(3,3),     &
               !deatht,    & !end time for plasticity
               minstr,     & !minimum strain to integrate trougth the thickness
               dummy

 ! Gauss points throught the thickness
 REAL (kind=8) :: thf(7),wei(7)

 !REAL (kind=8), ALLOCATABLE :: cm(:,:), prop(:,:), volfr(:), rr(:,:)
 !REAL (kind=8), POINTER :: val(:,:)
 REAL (kind=8), ALLOCATABLE :: varin(:)                              !internal variables

 TYPE (section), POINTER :: sec    !pointer to a section data
 TYPE (mater), POINTER :: mat    !pointer to a section data

 INTERFACE
   INCLUDE 'rubberps.h'
 END INTERFACE


 !***  Compute Element Stiffness matrix for all elements

 bmatx(10:18,1:3) = 0d0    !zero extra membrane part
 osec = -1
 e => heade
 ielem = 0
 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = ielem + 1                 !element order
   isec  = e%matno                   !associated material
   newmt = osec /= isec              !same material than previous ?
   IF(newmt)THEN                     !if new material, get properties
     ! Get material and section parameters
     !
     ! Uses the following variables

     sec => psecs(isec)%p             !point to section
     nlayr = sec%iprop(1)             !number of layers
     nvar  = sec%iprop(2)             !number of internal variables per layer
     IF( nvar > 0 )THEN
       ALLOCATE(varin(nvar))            !auxiliar internal variables
       varin = 0d0                      !initializes
     END IF
     secty = sec%secty                !section type
     thick = sec%rprop(1)             !original thickness
     minstr= sec%rprop(4)             !strain threshold to use TTTI
     osec = isec                      !keep present section
     IF( secty == 12 )THEN            !standard solid section
       mat => sec%mtbas                 !point to associated material
       shell = nlayr > 1                !membrane or shell
       mtype = mat%mtype                !type of base material
       natst = logst .OR. mtype == 6    !use log strains
       elast = mat%matdef(3) == 1       !elastic
       CALL gaussq(nlayr,thf(1),wei(1)) !integration points through the thickness
       thf(1:nlayr) = thf(1:nlayr)/2d0  !positions
       wei(1:nlayr) = wei(1:nlayr)/2d0  !weights
       alpha = mat%prope(6)             !Thermical Dilatation Coeff
       !IF( .NOT.itemp ) alpha = 0d0
       dm      = 0d0                    !initializes integrated elasticity matrix
       dm((/1,2,7,12,16,17,19,21/)) = sec%rprop(5:12)        !integrated elasticity matrix

       IF( mtype == 1)THEN              !standard isotropic material
         IF( elast )THEN
           plast = .FALSE.
         ELSE   !for elasto-plastic mats
           ! e1, nu1, uniaxial, efren, consn, r, exponent m, hill 79
           propi(1:4) = mat%propp(1:4)       ! isotropic hardening parameters
           propi(5) = REAL( mat%matdef(4),8) ! isotropic hardening model
           chi    = mat%propp(16:27)         ! hill coefficients
           !deatht = mat%propp(5)             !end of plasticity
           !IF (mat%matdef(4) == 5 )THEN
           !  val => mat%chead%val
           !  numpt = mat%chead%np
           !ELSE
           !  NULLIFY (val)
           !  numpt = 0
           !END IF
           plast = propi(1) > 0 ! .AND. death > ttime !consider plasticity ?
         END IF
         c(1:4) = mat%prope(7:10)          ! plane stress elasticity matrix
         CALL dmat14(c(1),propi(1),chi(1),dummy,dummy,dummy,dummy,newmt)
       ELSE IF( mtype == 5)THEN            ! orhthotropic material
         c(1:4) = mat%prope(16:19)         ! plane stress elasticity matrix
         elast = .TRUE.
         plast = .FALSE.                        !consider plasticity ?
         !IF( .NOT.elast )THEN              ! if elasto-plastic
         !  propi(1:13) = mat%propp(17:29)    !orthotropic hardening parameters
         !  deatht = mat%propp(5)             !end of plasticity
         !  plast = deatht > ttime .AND. propi(1) > 0  !consider plasticity ?
         !END IF
         d = 0d0; d(1,1) = c(1); d(1,2) = c(2); d(2,2) = c(3); d(3,3) = c(4)
         newmt = .FALSE.                        !same material than previous ?
       ELSE IF( mtype == 6)THEN            !hyperelastic isotropic
         chi(1:12) = mat%prope(7:18)       !material properties
         elast = .TRUE.                    !elastic only
         plast = .FALSE.                   !consider plasticity ?
       !ELSE IF( mtype == 30)THEN             !user defined material
       !  plast = .TRUE.   !default
       END IF

     ELSE  !secty == 13  composite laminae
       elast = .TRUE. !elast = sec%iprop(3) == 0               !elastic problem
       plast = .FALSE.!plast = .NOT.elast                      !consider plasticity ?
       shell = .TRUE.
       dm(1:15) = sec%rprop((/ 6:8, 18:20, 9:10, 21:23, 11, 24:26 /))    !linear membrane elastic integrated matrix
       dm(16:21) = sec%rprop(12:17)            !linear bending elastic integrated matrix
       !dm = sec%rprop(6:26)                 !linear elastic integrated matrix
       !IF( plast )THEN  !plastic lamina
       !  IF( ALLOCATED ( cm ) )DEALLOCATE( volfr,cm,prop,rr )
       !  ALLOCATE( volfr(nlayr),cm(4,nlayr),prop(17,nlayr),rr(5,nlayr))
       !  i = 27                                !pointer to volume fractions
       !  CALL vecasi(nlayr,sec%rprop(i),volfr)        !volume fractions
       !  i = i+2*nlayr                         !pointer to C-matrices
       !  CALL vecasi(nlayr*4,sec%rprop(i),cm(1,1))    !elasticity matrix
       !  i = i+nlayr*4                         !pointer to R-matrices
       !  CALL vecasi(nlayr*5,sec%rprop(i),rr(1,1))    !rotation matrix
       !  i = i+nlayr*5                         !pointer to plastic properties
       !  CALL vecasi(nlayr*17,sec%rprop(i),prop(1,1)) !plastic properties
       !  oldm = -1                             !recompute constants
       !END IF
       newmt = .FALSE.                        !same material than previous ?
     END IF

   END IF

   !*** computes actual configuration

   isidf = .FALSE.                  !initializes
   x(:,1:3) = coora(:,e%lnods(1:3)) ! get coordinates of the main triangle
   DO i =1,3                        !for each node in the patch
     n = e%lnods(i+3)               ! node number
     IF(n /= 0) THEN                ! node exist ?
       sides(i) = .TRUE.            ! side element exist
       x(:,i+3) = coora(:,n)        ! get coordinates of the side node
     ELSE
       sides(i) = .FALSE.           ! side does NOT exists
       j = e%lnods(hh(1,i))         ! first node of the side
       k = e%lnods(hh(2,i))         ! second node of the side
       isidf(i) = iffix(j) == 1 .AND. iffix(k) == 1 !free or clamped ?
     END IF
   END DO
   area1 = e%area1      !area of main element
   stra1 = e%stra1      ! Metric tensors
   ! local system & normals => t
   CALL stra14(e%a,e%b,x,t3,t,h,sides,isidf,e%ci,nonrg)

   ! compute elasticity matrix
   IF( ASSOCIATED(e%gausv) )THEN
     ttti = .TRUE.
   ELSE IF( plast )THEN
     aux = ABS(stra1(1)-1d0)+ABS(stra1(2)-1d0)+ABS(stra1(3))+ &
          (ABS(stra1(4))+ABS(stra1(5))+ABS(stra1(6)))*thick/2d0
     ttti = aux > minstr
   ELSE
     ttti = .FALSE.
   END IF

   IF( secty == 12 )THEN              !for standard solid section
     IF( ttti )THEN
       ! Integrate throught the thickness Elasto-plastic consistent matrix

       thnew = thick*e%lb             !thickness at new configuration

       IF( mtype == 1 )THEN
         IF( ASSOCIATED(e%gausv) )THEN
           lambd(1:nlayr) = e%gausv(8,1:nlayr)           !consistency parameter
           pflag = ANY( lambd /= 0d0 )
         ELSE
           pflag = .FALSE.
         END IF
       END IF

       dmatx = 0d0                         ! Initializes D matrix

       DO l=1,nlayr                        ! for each layer
         zk = thf(l)*thnew                 ! Z coordinate
         zk2 = zk*zk                       ! Z coord squared
         IF( mtype == 6 )THEN     !hyperelastic materials
           stran = stra1(1:3)+stra1(4:6)*zk  ! layer U^2
           CALL lgst14(stran,r1,r2,lb(1),'STIF14',found) !compute eigenvalues
           lb(3) = 1d0/lb(1)/lb(2)
           CALL rubberps(chi,lb,mat%matdef(8),stran,mat=cm,r1=r1,r2=r2)
         ELSE
           IF( logst )THEN
             stran = stra1(1:3)+stra1(4:6)*zk  ! layer U^2
             ! inverse of U^2
             aux  = (stran(1)*stran(2)-stran(3)**2)
             u2(1) = stran(2)/aux
             u2(2) = stran(1)/aux
             u2(3) = -stran(3)/aux
           END IF

           ! compute layer constitutive matrix (tangent algorithmic)
           IF( mtype == 1 )THEN   ! for an isotropic homogeneous material
             IF( pflag )THEN
               efpst = e%gausv(4,l) + lambd(l)    !Total Eff. plastic strain
               stres(1:3) = e%gausv(9:11,l)       !stresses (Hencky or 2PK)
             ELSE
               efpst = 0d0
             END IF
             CALL dmat14(dummy,dummy,dummy,stres(1),lambd(l),efpst,d(1,1),newmt)
           ELSE IF( mtype == 5 )THEN     ! Orthotropic material
             !d(1,1) = c(1); d(1,2) = c(2); d(2,2) = c(3); d(3,3) = c(4)
           END IF

           IF( logst )THEN           !large strain (modify using the metric tensor)
             cm(1,1) = d(1,1)*u2(1)*u2(1) + 2d0*d(1,3)*u2(1)*u2(3) &
                     + d(3,3)*u2(3)*u2(3)

             cm(1,2) = d(1,3)*u2(1)*u2(3) + d(1,2)*u2(1)*u2(2)     &
                     + d(3,3)*u2(3)*u2(3) + d(2,3)*u2(3)*u2(2)

             cm(1,3) = ( d(1,1)*u2(1)*u2(3) + d(1,2)*u2(1)*u2(3)   &
                     + d(1,3)*( u2(1)*u2(1) + u2(1)*u2(2) + u2(3)*u2(3) )   &
                     + d(2,3)*u2(3)*u2(3)                                   &
                     + d(3,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/2d0

             cm(2,2) = d(2,2)*u2(2)*u2(2) + 2d0*d(2,3)*u2(2)*u2(3) &
                     + d(3,3)*u2(3)*u2(3)

             cm(2,3) = ( d(1,2)*u2(2)*u2(3) + d(1,3)*u2(3)*u2(3)   &
                     + d(2,2)*u2(2)*u2(3)                                   &
                     + d(2,3)*( u2(1)*u2(2) + u2(2)*u2(2) +u2(3)*u2(3) )    &
                     + d(3,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/2d0

             cm(3,3) = (d(3,3)*(u2(1)*u2(1)                        &
                     + 2d0*u2(1)*u2(2)+u2(2)*u2(2))                         &
                     + d(1,1)*u2(3)*u2(3) + 2d0*d(1,2)*u2(3)*u2(3)          &
                     + 2d0*d(1,3)*( u2(1)*u2(3) + u2(2)*u2(3) )             &
                     + d(2,2)*u2(3)*u2(3)                                   &
                     + 2d0*d(2,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/4d0
           ELSE      !small strain
             cm      = d
           END IF
         END IF

         cm = cm*wei(l)
         DO i=1,3
           DO j=i,3
             dmatx(i,j)     = dmatx(i,j)     + cm(i,j)
             dmatx(i,j+3)   = dmatx(i,j+3)   + cm(i,j)*zk
             dmatx(i+3,j+3) = dmatx(i+3,j+3) + cm(i,j)*zk2
           END DO
         END DO
       END DO

       dmatx(2,4) = dmatx(1,5)
       dmatx(3,4) = dmatx(1,6)
       dmatx(3,5) = dmatx(2,6)

       voli = area1*thick   ! Initial Vol
       k = 0
       DO i=1,6
         DO j=i,6
           k = k+1
           daux(k) = voli*dmatx(i,j)
         END DO
       END DO

     ELSE     !use elastic integrated matrix
       daux = dm*area1
     END IF
   ELSE ! secty == 13
     daux = dm*area1
   END IF

   stiff = 0d0                !initializes stiffnes
   ! membrane part (standard constant strain triangle)
   CALL bmem14(e%a(:,0),e%b(:,0),bmatx(:,1:3),t(:,:,0),6)
   ! bending part
   CALL bfle14(e%lb,e%a,e%b,sides,isidf,bmatx(:,4:6),t,t3,h,e%ci,nonrg)
   CALL btdbpr(bmatx(1,1),daux(1),stiff(1),nvarl,6)
   ! geometric stiffness due to membrane part
   stres = stint(1:3,ielem)*area1
   CALL kgmm14(e%a(:,0),e%b(:,0),stres,stiff,nvarl)
   ! assemble stiffness matrix and force vector
   CALL stiaux(2*nnode,e%lnods(1),nvarl,ndime,stiff(1),force(1),gstif(1) )
   e => e%next

 END DO
 RETURN

 END SUBROUTINE stif14
