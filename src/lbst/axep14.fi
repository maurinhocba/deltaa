 SUBROUTINE axep14(x,a,b,area2,sides,is,angle,ci,nonrg,locax,quadr)
 !***********************************************************************
 !
 !    this routine compute the element local axes system
 !    for the 3 node element, and for the adjacent elements
 !    (local x-axis is directed along fiber at an Angle with
 !    standard direction (intersection with X-Y plane)
 !***********************************************************************
 IMPLICIT NONE
 ! dummy arguments
 REAL (kind=8),INTENT(IN) ::  angle      !angle between standard X1 and local X1
 REAL (kind=8),INTENT(IN OUT) :: x(3,6) !nodal coordinates
 REAL (kind=8),INTENT(OUT) :: a(3,0:3),b(3,0:3),ci(3), & !shape function derivatives
                              area2                !element areas (twice)
 LOGICAL, INTENT(IN) :: sides(3), &     !side existence
                        is(3),    &     !side boundary condition
                        nonrg,    &     !non-regular meshes
                        quadr           !quadratic approach
 INTEGER(kind=4), INTENT(IN) :: locax
 ! local variables
 INTEGER (kind=4) i,j,k,ns,ss(2)

 REAL (kind=8) l(3,3),t(3,3),ll1,ll2,lt, &
               cosa,sina,cosb,sinb,cosg,sing,area(3),    &
               r11,r22,r12,t11,t22,t12,no(2,2),nd(2,2),  &
               y(2,6),x0(3),r11i(3,3),sr12(3,3),sr21(3,3),sr22(3,3),z(3)

 INTERFACE
   INCLUDE 'vecpro.h'
   INCLUDE 'vecuni.h'
 END INTERFACE

 !*** evaluate the side vectors
 !
 l(:,1) = x(1:3,3) - x(1:3,2)                             !side 1
 l(:,2) = x(1:3,1) - x(1:3,3)                             !side 2
 l(:,3) = x(1:3,2) - x(1:3,1)                             !side 3

 CALL vecpro(l(:,1),l(:,2),t(:,3))   !=> plane normal
 CALL vecuni(3,t(:,3),area2)         !computes twice area

 IF (area2 == 0.0D0)THEN
   WRITE (55,*,ERR=9999) 'ERROR: AREA2 == 0 '
   WRITE(55,"(3e15.5)",ERR=9999) x(1:3,1:3)
   CALL runen3('AXEP14: WRONG ELEMENT DEFINITION   ')
 END IF

 SELECT CASE (locax)
 CASE (1)
   lt = (t(2,3)*t(2,3)+t(3,3)*t(3,3)) !component in th Y-Z plane
   IF( lt  < 1.0d-5) THEN         !If t3 is almost orthogonal to  Y-Z plane
     t(:,2) = (/ -t(3,3), 0d0, t(2,3) /) !choose t2 orthogonal to global Y direction
     CALL vecuni(3,t(:,2),lt)
     CALL vecpro(t(:,2),t(:,3),t(:,1))
   ELSE       !         SELECT local y=t(:,1) in the global YZ plane
     t(:,1) = (/ 0d0, -t(3,3), t(2,3)  /)
     t(:,2) = (/ lt, -t(2,3)*t(2,3), -t(3,3)*t(2,3) /)
     CALL vecuni(3,t(:,1),lt)   !     normalizes t(:,1) & t(:,2)
     CALL vecuni(3,t(:,2),lt)
   END IF
 CASE (2)
   lt = (t(3,3)*t(3,3)+t(2,3)*t(2,3)) !component in th Z-X plane
   IF( lt  < 1.0d-5) THEN         !If t3 is almost orthogonal to  Z-Y plane
     t(:,2) = (/ t(2,3), -t(2,3), 0d0 /) !choose t2 orthogonal to global Z direction
     CALL vecuni(3,t(:,2),lt)
     CALL vecpro(t(:,2),t(:,3),t(:,1))
   ELSE       !         SELECT local z=t(:,1) in the global ZX plane
     t(:,1) = (/ t(3,3), 0d0, -t(2,3)  /)
     t(:,2) = (/  -t(2,3)*t(2,3), lt, -t(3,3)*t(2,3) /)
     CALL vecuni(3,t(:,1),lt)   !     normalizes t(:,1) & t(:,2)
     CALL vecuni(3,t(:,2),lt)
   END IF
 CASE (3)
   lt = (t(2,3)*t(2,3)+t(2,3)*t(2,3)) !component in th X-Y plane
   IF( lt  < 1.0d-5) THEN         !If t3 is almost orthogonal to  X-Y plane
     t(:,2) = (/ 0d0, t(3,3), -t(2,3) /) !choose t2 orthogonal to global X direction
     CALL vecuni(3,t(:,2),lt)
     CALL vecpro(t(:,2),t(:,3),t(:,1))
   ELSE       !         SELECT local x=t(:,1) in the global xy plane
     t(:,1) = (/ -t(2,3), t(2,3) , 0d0 /)
     t(:,2) = (/ -t(2,3)*t(3,3), -t(2,3)*t(3,3), lt /)
     CALL vecuni(3,t(:,1),lt)   !     normalizes t(:,1) & t(:,2)
     CALL vecuni(3,t(:,2),lt)
   END IF
 END SELECT

 cosa = COS(angle)                            !angle to compute
 sina = SIN(angle)                            !local X1 direction

 z  = t(:,1)                                !auxiliar
 t(:,1) =  z*cosa + t(:,2)*sina                 !local X1 direction
 t(:,2) = -z*sina + t(:,2)*cosa                 !local X2 direction

 !*** find the local coordinates

 a(1,0) = DOT_PRODUCT(l(:,1),t(:,1)) ! l1 . t(:,1)
 a(2,0) = DOT_PRODUCT(l(:,2),t(:,1)) ! l2 . t(:,1)
 a(3,0) = -a(1,0)-a(2,0)
 b(1,0) = DOT_PRODUCT(l(:,1),t(:,2)) ! l1 . t(:,2)
 b(2,0) = DOT_PRODUCT(l(:,2),t(:,2)) ! l2 . t(:,2)
 b(3,0) = -b(1,0)-b(2,0)

 IF( quadr )THEN
   ! compute R matrix
   DO i=1,3
     IF( sides(i) )CYCLE
     j = MOD(i,3)+1
     k = MOD(j,3)+1
     CALL vecpro(l(:,i),t(:,3),b(:,i))      !side external normal
     CALL vecuni(3,b(:,i),lt)               !unit vector in global coordinates
     lt=DOT_PRODUCT(x(:,j)+x(:,k)-2D0*x(:,i),b(:,i))
     x(:,i+3) = x(:,i)+lt*b(:,i)
   END DO
   x0 = (x(:,1)+x(:,2)+x(:,3))/3d0        !element center
   DO i=1,6
     z   = x(:,i) -x0                     !relative coordinates
     y(1,i) = DOT_PRODUCT(z,t(:,1))       !local in-plane
     y(2,i) = DOT_PRODUCT(z,t(:,2))       !coordinates
   END DO
   DO i=1,3
     r11i(1,i) =  1d0/3d0
     r11i(2,i) = -b(i,0)/area2
     r11i(3,i) =  a(i,0)/area2
     sr12(i,1)  = -0.5d0*y(1,i)**2
     sr12(i,2)  = -0.5d0*y(2,i)**2
     sr12(i,3)  = -0.5d0*y(1,i)*y(2,i)
     sr21(i,1)  =  1d0
     sr21(i,2)  =  y(1,i+3)
     sr21(i,3)  =  y(2,i+3)
     sr22(i,1)  = -0.5d0*y(1,i+3)**2
     sr22(i,2)  = -0.5d0*y(2,i+3)**2
     sr22(i,3)  = -0.5d0*y(1,i+3)*y(2,i+3)
   END DO
   sr22 = sr22 - MATMUL(sr21,MATMUL(r11i,sr12))
   CALL invmtx(sr22,r11i,lt,3)
   a(:,1:3) = TRANSPOSE(r11i)
 ELSE
   ns = 0  !initializes number of simple supported or free sides

   DO i=1,3  !for each side
     IF(sides(i)) THEN                 !adjacent elememt exists
       l(:,1) = x(:,kk(3,i)) - x(:,kk(2,i))              !side J-K  (I)
       l(:,2 )= x(:,kk(1,i)) - x(:,kk(3,i))              !side K-I  (J)

       ll1 = SQRT(DOT_PRODUCT(l(:,1),l(:,1))) !length of side (I)
       ll2 = SQRT(DOT_PRODUCT(l(:,2),l(:,2))) !length of side (J)

       CALL vecpro(l(:,1),l(:,2),t(:,3))              !normal vector
       area(i) = SQRT(DOT_PRODUCT(t(:,3),t(:,3)))      !element area (twice)
       IF (area(i) == 0.0D0)THEN
         WRITE (55,*,ERR=9999) 'ERROR: AREA2 == 0 '
         WRITE(55,"(3e15.5)",ERR=9999)x(:,kk(:,i))
         CALL runen3('AXEP14: WRONG ELEMENT DEFINITION   ')
       END IF

       a(1,i) = -a(i,0)                              !projec. of side (I)
       b(1,i) = -b(i,0)
       cosa = a(1,i)/ll1                              !angle of side (I)
       sina = b(1,i)/ll1

       cosb = DOT_PRODUCT(l(:,1),l(:,2))/ll1/ll2 !angle between (I-J)
       sinb = area(i)/ll1/ll2

       cosg = cosa*cosb - sina*sinb                    !angle of side (J) g = a+b
       sing = cosa*sinb + sina*cosb

       a(2,i) = ll2*cosg                              !projec. of side (J)
       b(2,i) = ll2*sing

       IF( nonrg )THEN      !for non-regular meshes
         t11 = b(i,0)*a(2,i)       - a(i,0)*b(2,i)        ! height on adjacent element
         t22 = b(i,0)*a(kk(2,i),0) - a(i,0)*b(kk(2,i),0)  ! height of central element
         t11  = 2d0*t11/(t11+t22)                          !coefficient for curvature computation
         t22  = 2d0-t11                                    !coefficient for curvature computation
         ci(i)= t11

         a(1:2,i) = a(1:2,i)/area(i)*t22             !shape function derivatives
         b(1:2,i) = b(1:2,i)/area(i)*t22

         a(3,i) = -a(1,i)-a(2,i)                      !side (K) shape function derivatives
         b(3,i) = -b(1,i)-b(2,i)

         a(2:3,i) = a(2:3,i) + a(kk(2:3,i),0)/area2*t11 !shape function derivatives
         b(2:3,i) = b(2:3,i) + b(kk(2:3,i),0)/area2*t11

       ELSE
         a(1:2,i) = a(1:2,i)/area(i)                 !shape function derivatives
         b(1:2,i) = b(1:2,i)/area(i)

         a(3,i) = -a(1,i)-a(2,i)                      !side (K) shape function derivatives
         b(3,i) = -b(1,i)-b(2,i)

       END IF


     ELSE IF( is(i)) THEN !clamped
       lt  = 1d0/SQRT(b(i,0)**2+a(i,0)**2)           ! side length (inverse)
       !local proyections of outer normal
       cosa =  b(i,0)*lt                              ! n1
       sina = -a(i,0)*lt                              ! n2
       !keep normal vector to plane of symmetry (outer)
       IF( b(1,i) == 0d0 ) a(:,i) = cosa*t(:,1) + sina*t(:,2) ! n1*t1 + n2*t2
       b(:,i) = (/ lt, cosa, sina /)                  ! side length inverse, n1 & n2
     ELSE                 !simple supported
       ns = ns+1
       ss(ns) = i
     END IF
   END DO
   SELECT CASE(ns)      !if SS or Free sides exist

   CASE (1)          !one side free or simple supported
     i = ss(1)                              !side number
     lt  = SQRT(b(i,0)**2+a(i,0)**2)        !side length
     cosa =  b(i,0)/lt                      !side normal
     sina = -a(i,0)/lt
     r11 = cosa*cosa                        !auxiliar factors
     r12 = cosa*sina
     r22 = sina*sina
     !mn =  1d0-r11*r11     -r22*r11     -2*r12*r11
     !         -r11*r22  1d0-r22*r22     -2*r12*r22
     !         -r11*r12     -r22*r12     1d0-2*r12
     a(:,i) = (/ 1d0-r11*r11,    -r22*r11,    -2*r12*r11 /) !first line of mn matrix
     b(:,i) = (/ 1d0-r22*r22,    -2*r12*r22,   1d0-2*r12 /) !(2,2),(2,3) & (3,3)
     !   mn = RESHAPE ((/ a(1,i),   a(2,i),   a(3,i),    &
     !                    a(2,i),   b(1,i),   b(2,i),    &
     !                  a(3,i)/2, b(2,i)/2,   b(3,i) /), &
     !                 (/3,3/))
   CASE (2)         !Two sides free or simple supported
     DO j=1,2       ! compute the normal vectors
       i = ss(j)    ! free side
       lt  = SQRT(b(i,0)**2+a(i,0)**2)         !side length
       no(1:2,j) = (/ b(i,0), -a(i,0) /)/lt    !side normal
     END DO
     ! second compute the dual base
     lt  = no(1,1)*no(2,2) - no(1,2)*no(2,1)   !determinant
     nd(1,1) =  no(2,2)/lt                     !inverse
     nd(2,1) = -no(1,2)/lt
     nd(1,2) = -no(2,1)/lt
     nd(2,2) =  no(1,1)/lt

     r11 = nd(1,1)*nd(1,2)                     !auxiliar factors
     r22 = nd(2,1)*nd(2,2)
     r12 = nd(1,1)*nd(2,2)+nd(2,1)*nd(1,2)
     t11 = 2d0*no(1,1)*no(1,2)
     t22 = 2d0*no(2,1)*no(2,2)
     t12 = no(1,1)*no(2,2)+no(2,1)*no(1,2)
     !mn =  r11*t11, r11*t22, r11*t12,
     !      r22*t11, r22*t22, r22*t12,
     !      r12*t11, r12*t22, r12*t12
     i = ss(1)                                 !first side
     j = ss(2)                                 !second side
     a(:,i) = (/  t11*r11, t11*r22, t11*r12 /) !first line
     b(:,i) = (/  t22*r11, t22*r22, t22*r12 /) !second line
     a(:,j) = (/  t12*r11, t12*r22, t12*r12 /) !third line
     !mn = RESHAPE ((/ a(1,i),   a(2,i),   a(3,i),
     !                 b(1,i),   b(2,i),   b(3,i),
     !                 a(1,j),   a(2,j),   a(3,j) /)  (/3,3/))

   END SELECT
 END IF

 a(:,0) = a(:,0)/area2                            !shape function derivatives
 b(:,0) = b(:,0)/area2
 area2 = area2/2d0                                !keep the element area

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE axep14
