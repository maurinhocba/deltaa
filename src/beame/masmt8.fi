 SUBROUTINE masmt8 (ndime,nelem,iwrit,nnode,ngaus,axesc,         &
                    heade,weigh,emass,shape,sumat,mass,lumpd,ifpre)
 !******************************************************************
 !
 ! *** calculates lumped mass for beam elements
 ! *** and consistent mass if required (ngaus = nnode)
 !
 !******************************************************************
 IMPLICIT NONE
 !          routine PARAMETER
 INTEGER (kind=4), PARAMETER :: ndofe=6
 LOGICAL, INTENT(IN) :: lumpd
 INTEGER(kind=4), INTENT(IN) :: ndime,nelem,nnode,ngaus,axesc,iwrit,ifpre(:,:)
 REAL   (kind=8), INTENT(IN) :: weigh(:),shape(:,:)
 REAL   (kind=8), INTENT(IN OUT) :: emass(:,:),sumat,mass(:)
 TYPE (ele08), POINTER :: heade
 !          local variables
 INTEGER (kind=4) ielem,i,j,k,g,n,m,isec,l,osec,nv,ii,jj,kk,li,lm(ndofe*nnode)
 REAL (kind=8) sume1,tmass,auxv1,area,rotms(3,3),trmas(nnode),iner(3),inert(3,3)
 REAL (kind=8) lii(3,3),lilt(3,3),mm(nnode,nnode),mc(171),pg(nnode),w(nnode),jc(nnode),   &
               sh(nnode,nnode)
 TYPE(section), POINTER :: sec
 TYPE (ele08), POINTER :: e
 INTEGER (kind= 4) posmt
 posmt(i,j,nv) = (2*nv-i)*(i-1)/2+j  !position i,j in mass(nxn)

 INTERFACE
   INCLUDE 'shape9.h'
 END INTERFACE

 IF( .NOT.lumpd )  CALL shape9(w,pg,sh,mm,nnode,nnode) !note that NGAUS used is NNODE

 sume1 = 0.0
 osec = -1
 nv = nnode*ndofe   !number of total dof in the element
 mc = 0d0           !initializes just once
 e => heade         !point to first element
 DO ielem=1,nelem        !for each element
   isec = e%matno                     !section number
   ! section properties
   IF( isec /= osec )THEN             !present and previous material diff
     sec => psecs(isec)%p               !point to section
     area = sec%rprop(1)                !A*density
     iner(1:3) = sec%rprop(2:4)         !(I1,I2,I3)*density
     osec = isec                        !update previous material number
   END IF

   ! numerical integration of nodal shape functions
   tmass = 0d0                     !initializes length
   trmas(1:nnode) = 0d0            !lumped lengths
   DO g=1,ngaus                       !for each Gauss point
     auxv1 = e%jac(g)*weigh(g)        !associated length
     tmass = tmass + auxv1            !add to total length
     DO n=1,nnode                     !for each node
       trmas(n) = trmas(n) + auxv1*shape(n,g)   !lumped lengths
     END DO
   END DO
   DO n=1,nnode
     rotms(1:3,n) = trmas(n)*iner(1:3)  !lumped rotational inertia at each node
   END DO
   !transform inertia properties to local system & performs lumping
   IF(axesc > 0) THEN    !if relative systems exist
     DO n=1,nnode            !for each node
       l = MIN(axesc,n)        !position in local lambda llbd(:,:,l)
       DO i=1,3                   !for each direction
         inert(i,n) = 0d0            !initializes inertia
         DO j=1,3                        !double loop on both index k,j
           DO k=1,3
             inert(i,n) = inert(i,n) + e%llbd(i,k,l)*e%llbd(j,k,l)*rotms(k,n)
           END DO
         END DO
       END DO
     END DO
   ELSE
     CALL vecasi(3*nnode,rotms,inert) !lumped rotationanl inertia
   END IF
   ! sums over the global vector
   sume1 = sume1 + tmass*area         !total translational mass
   DO n=1,nnode
     l = e%lnods(n)
     emass(1:ndime,l) = emass(1:ndime,l) + trmas(n)*area  !nodal translational mass
     DO j=ndime+1,ndofe
       emass(j,l) = emass(j,l) + inert(j-ndime,n)         !nodal rotational inertia
     END DO
   END DO

   IF( .NOT.lumpd )THEN                !consistent mass matrix  Assembles over MASS(maxa)
     !  note that NNODE integration points are used
     jc = SUM(e%jac)/ngaus              !length/ngaus
     mm = 0d0                           !initializes consistent mass (lengths)
     DO g=1,nnode                        !for each Gauss point
       DO n=1,nnode                        !for each Gauss point
         auxv1 = jc(g)*w(g)                !associated length
         DO m=n,nnode
           mm(n,m) = mm(n,m) + auxv1*sh(n,g)*sh(m,g)
         END DO
       END DO
     END DO
     IF( axesc == 0 )THEN
       lilt = RESHAPE((/ iner(1), 0d0, 0d0, 0d0, iner(2), 0d0, 0d0 ,0d0, iner(3) /),(/3,3/))
     END IF

     DO n = 1,nnode                   ! For each node
       j = (n-1)*ndofe                ! Initializes Column position in M
       jj= j+3
       IF(axesc > 0) THEN
         l = MIN(axesc,n)               !position in local lambda llbd(:,:,l)
         DO ii = 1,3                  ! For each direction in space
           lii(:,ii) = e%llbd(:,ii,l)*iner(ii)
         END DO
       END IF
       DO m = n,nnode                 ! For each node
         k = (m-1)*ndofe              ! Initializes Row position in M
         kk= k+3                      ! Initializes Row position in M
         DO ii = 1,3                  ! For each direction in space
           mc(posmt(j+ii,k+ii,nv)) = mm(n,m)*area   !traslational
         END DO
         IF(axesc > 0) THEN
           l = MIN(axesc,m)             !position in local lambda llbd(:,:,l)
           lilt = MATMUL(lii,TRANSPOSE(e%llbd(:,:,l)))
         END IF
         DO i=1,3
           li = 1
           IF( n == m ) li = i
           DO ii = li,3                  ! For each direction in space
             mc(posmt(jj+i,kk+ii,nv)) = mm(n,m)*lilt(i,ii)  !rotational
           END DO
         END DO
       END DO
     END DO

     g = 0
     DO n=1,nnode
       l = e%lnods(n)
       DO j = 1,ndofe
         g = g+1
         lm(g) = ifpre(j,l)
       END DO
     END DO
     CALL ensmat(nv,lm(1),mc(1) ,mass(1))
   END IF
   e => e%next
 END DO

 IF(iwrit == 1) WRITE(lures,"(//,'  Total mass for Beam element :', &
                        &    e15.7)",ERR=9999) sume1
 sumat = sumat + sume1

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE masmt8
