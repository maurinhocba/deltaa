 SUBROUTINE kgeom8 ( nnode,nv,deriv,shape,jac,lbd,stran, &
                     strd,stiff,llbd,il)
 !******************************************************************
 !
 ! *** computes geometric stiffness matrix for for beam element
 !
 !******************************************************************
 IMPLICIT NONE
 !          routine PARAMETER
 INTEGER (kind=4), PARAMETER :: ndofe=6
 INTEGER(kind=4), INTENT(IN) :: nnode,nv,il
 REAL   (kind=8), INTENT(IN) :: shape(:),deriv(:),jac,llbd(:,:,:),strd(:),stran(:),lbd(:,:)
 REAL   (kind=8), INTENT(IN OUT) :: stiff(:)

 !          local variables
 INTEGER (kind=4) i,j,n,m,k,l,ii,jj,pos
 REAL (kind=8) sb(3,3),nxt(3,3),f,g,ta(3,3),gn(3,3)

 INTEGER (kind= 4) posmt
 posmt(i,j,nv) = (2*nv-i)*(i-1)/2+j  !position i,j in mass(nxn)

 ! compute N x ts for 2nd and 3rd term
 CALL vecpro(nxt(:,1),strd(1:3),lbd(1,:))  ! N x t_1
 CALL vecpro(nxt(:,2),strd(1:3),lbd(2,:))  ! N x t_2
 CALL vecpro(nxt(:,3),strd(1:3),lbd(3,:))  ! N x t_3
 ! compute matrix for 4th term and 5th term
 f = DOT_PRODUCT(stran(1:3),strd(1:3)) + DOT_PRODUCT(stran(4:6),strd(4:6)) ! N.G + M.C
 DO i=1,3
   DO j=1,3
     gn(i,j) = stran(i)*strd(j) + stran(i+3)*strd(j+3)
   END DO
   gn(i,i) = gn(i,i) - f
 END DO

 ii = 0                     !initializes DOF position of node n
 DO n=1,nnode                  !for each node
   jj = ii                     !initializes DOF position of node m
   DO m=n,nnode                   !for each node
     f = deriv(n)/jac*shape(m)    !factor N's(n) N(m)
     g = shape(n)*shape(m)        !factor N(n) N(m)
     sb = f*nxt
     IF( il /= 0 )THEN
       l = MIN(il,m)
       ta = MATMUL(sb,TRANSPOSE( llbd(:,:,l) ))
     ELSE
       ta = sb
     END IF
     ! 2nd term  u(n) - t(m)  always
     DO i=1,3   !for each translational DOF
       DO j=4,6    !for each rotational DOF
         pos = posmt(ii+i,jj+j,nv)
         stiff(pos) = stiff(pos) + ta(i,j-3)
       END DO
     END DO
     ! 3rd term  t(n) - u(m)  m>n only
     IF( m > n )THEN
       IF( il > n ) ta = MATMUL(sb,TRANSPOSE( llbd(:,:,m) ))
       DO i=4,6
         DO j=1,3
           pos = posmt(ii+i,jj+j,nv)
           stiff(pos) = stiff(pos) + ta(j,i-3)
         END DO
       END DO
     END IF
     ! 4rd term and 5th  t(n) - t(m)
     sb = g*gn !+ f*RESHAPE( (/    0d0,  strd(6), -strd(5), &
               !              -strd(6),      0d0, -strd(4), &
               !               strd(5),  strd(4),      0d0 /),(/3,3/))
     IF( il /= 0 )THEN
       k = MIN(il,n)
       l = MIN(il,m)
       ta = MATMUL(llbd(:,:,k),MATMUL(sb,TRANSPOSE( llbd(:,:,l))))
     ELSE
       ta = sb
     END IF
     ii = ii + 3
     jj = jj + 3
     DO i=1,3   !for each translational DOF
       l = i             !diagonal block
       IF( m > n ) l=1   !non-diagonal block
       DO j=l,3    !for each rotational DOF
         pos = posmt(ii+i,jj+j,nv)
         stiff(pos) = stiff(pos) - ta(i,j)
       END DO
     END DO
     jj = jj + 3
     ii = ii - 3
   END DO
   ii = ii + ndofe
 END DO

 RETURN
 END SUBROUTINE kgeom8
