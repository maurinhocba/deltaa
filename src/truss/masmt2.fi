 SUBROUTINE masmt2(ndime,nelem,heade,emass,lumpd,gmass,sumat,ifpre)
 !********************************************************************
 !
 !***   evaluation of mass matrix for truss elements
 !
 !********************************************************************
 IMPLICIT NONE
 !***  dummy arguments
 LOGICAL, INTENT(IN) :: lumpd
 INTEGER (kind=4), INTENT(IN) :: ndime,nelem,ifpre(:,:)
 REAL (kind=8), INTENT(IN OUT) :: gmass(:),emass(:,:),sumat
 TYPE(ele02), POINTER :: heade

 !***  local variables
 INTEGER (kind=4) ielem,nvarl,l,i,n,j,k,m,lm(6),posn,isec,osec
 REAL    (kind=8) tmass,mass(21),sume1,area,dens
 TYPE(ele02), POINTER :: e
 TYPE(section), POINTER :: sec
 LOGICAL :: newm
 INTEGER (kind=4) poesti
 poesti(i,j,n) = (2*n-i)*(i-1)/2+j    ! position i,j in mass(nxn)

 !***  loop over all the elements

 osec = -1
 e => heade
 sume1 = 0d0
 DO ielem=1,nelem
   IF(e%lnods(1) == e%lnods(2) )CYCLE
   isec  = e%matno
   newm = isec /= osec
   IF ( newm )THEN
     sec => psecs(isec)%p
     osec = isec
     area = sec%rprop(1)
     dens = sec%mtbas%prope(5)
   END IF
   nvarl = nnode*ndime
   tmass = e%gausv(1)*area*dens/6d0
   DO n=1,nnode
     l = e%lnods(n)
     emass(1:ndime,l) = emass(1:ndime,l) + 3*tmass
   END DO
   sume1 = sume1 + 6d0*tmass
   IF(.NOT.lumpd) THEN

     l=0
     DO n = 1,nnode
       j = ndime*(n-1)
       DO m = n,nnode
         k = ndime*(m-1)
         DO i = 1,ndime
           posn = poesti(j+i,k+i,nvarl)
           IF(n == m)mass(posn) = 2*tmass
           IF(n < m) mass(posn) =   tmass
         END DO
       END DO

       j = e%lnods(n)
       DO i = 1,ndime
         l = l+1
         lm(l) = ifpre(i,j)
       END DO
     END DO

     CALL ensmat(nvarl,lm(1),mass(1),gmass(1))
   END IF
   e => e%next
 END DO
 !IF(iwrit == 1) &
 WRITE(lures,"(//'  total mass for TRUSS element :', e15.7)")sume1
 sumat = sumat + sume1
 RETURN
 END SUBROUTINE masmt2
