  SUBROUTINE stif17iDF(x0,x,d,e,stdf,ntype,ngaus,nnode)
  !-------------------------------------------------------------------
  !
  !          EVALUATION OF INTERNAL FORCES ELEMENT T-L 2-D QUAD
  !
  !-------------------------------------------------------------------
  IMPLICIT NONE

  ! dummy arguments
  INTEGER (kind=4), INTENT(IN) :: ntype, &     !problem type
                                  ngaus, &     !number of gauss points
                                  nnode        !number of nodes
  REAL(kind=8),INTENT (IN OUT) :: x (:,:),   & !present coordinates
                              x0(:,:),   & !original coordinates
                              d(:,:)       !elasticity matrix
  REAL(kind=8),INTENT (OUT) :: stdf(:,:)   !stiffness matrix computed by finite differences

  ! local variables
  INTEGER (kind=4)  i,j,k,n  !different indexes

  REAL(kind=8) ::  rl(2,nnode),rli(2,nnode),dx !nodal internal equivalent forces

  INTEGER (kind=4), PARAMETER :: ngaud = 2
  REAL (kind=8) :: shape(nnode,ngaus),deriv(nnode,2),posgp(2),weigp(2)

  TYPE (ele17), POINTER :: e    !pointer to an element data

  REAL(kind=8) :: u(2,nnode),s0(3,ngaus)


  IF( ntype == 3 )THEN
    CALL gaussq (ngaud ,posgp ,weigp )

    !       gauss points shape and derivatives of nodal functions

    k = 0
    DO i=1,ngaud
      DO j=1,ngaud
        k = k+1
        CALL shape3(deriv(1,1),shape(1,k),posgp(i),posgp(j),nnode)
      END DO
    END DO
  END IF

  !***  Computes nodal internal forces

  !stdf = 0d0
  dx = MAX(ABS(x0(1,3)-x0(1,1)),ABS(x0(2,3)-x0(2,1)))/1e5
  !   Gauss point loop
  CALL resv17d(ngaus,nnode,ntype,e,x0,x,shape,d,rl)
  k = 0
  DO n=1,nnode
    DO i=1,2
      x(i,n) = x(i,n)+dx
      CALL resv17d(ngaus,nnode,ntype,e,x0,x,shape,d,rli)
      x(i,n) = x(i,n)-dx
      k = k+1
      stdf(:,k) = RESHAPE((rl-rli)/dx, (/ 8 /) )
    END DO
  END DO


  RETURN
  END SUBROUTINE stif17iDF

 SUBROUTINE resv17d(ngaus,nnode,ntype,e,x0,xi,shape,d,rl)
 IMPLICIT NONE
 !dummy arguments
 INTEGER(kind=4), INTENT (IN) :: ngaus,nnode,ntype
 REAL(kind=8), INTENT(IN) :: x0(2,nnode),xi(2,nnode),shape(nnode,ngaus),d(:,:)
 REAL(kind=8), INTENT(OUT) :: rl (2,nnode)
 TYPE (ele17), POINTER :: e    !pointer to an element data
 !local Variables
 INTEGER (kind=4) :: k,ierr
 REAL (kind=8) stres(4),   & !stresses (different measures)
               stran(4),   & !C=U^2  also Log strains
               bmat(2,nnode,4), & !B matrix
               g(2,2),     & !in-plane deformation gradient
               r0,r,       & !original and current 'r' coordinate
               r1,r2,      & !eigevector components in local system
               lb(3),      & !eigenvalues
               delta(4),   & !volumetric strain/3 and Jacobian
               deltm,      & !Average volumetric strain
               press,      & !first stress invariant (mean pressure)
               str(4,ngaus),rf(ngaus),km,nu

  stres(4) = 0d0                        !initializes for plane stress
  bmat(:,:,4) = 0d0                     !initializes for plane stress or strain
  IF( ntype /= 1 )THEN
    nu = d(1,2)/(d(1,1)+d(1,2))
    km = (d(1,1)-d(1,2))*(1d0+nu)
  END IF
  rl = 0d0                               !Initializes equivalent nodal forces
  deltm = 0d0                            !initializes meam volumetric strain
  DO k=1,ngaus
    ! compute deformation gradient F and U^2=tp(F) F
    g = MATMUL(xi,e%cartd(:,:,k))  !deformation gradient
    stran(1) = g(1,1)*g(1,1) + g(2,1)*g(2,1)  !U^2(1,1)
    stran(2) = g(1,2)*g(1,2) + g(2,2)*g(2,2)  !U^2(2,2)
    stran(3) = g(1,1)*g(1,2) + g(2,1)*g(2,2)  !U^2(1,2)
    SELECT CASE (ntype)
    CASE (1)  !   plane stress
      stran(4) = 1d0/(stran(1)*stran(2) - stran(3)**2)  !isochoric
    CASE (2)  !   plane strain
      stran(4) = 1d0
    CASE (3)  !   axilsymmetric
      r0 = DOT_PRODUCT(x0(1,:),shape(:,k))    !original r coordinate
      r  = DOT_PRODUCT(xi(1,:),shape(:,k))     !present r coordinate
      stran(4) = (r/r0)**2                    !Lambda 3 squared
      rf(k) = stran(4)/r                      !Coefficient for B matrix
    END SELECT
    !computes (logarithmic) in-plane strains
    CALL lgst14(stran,r1,r2,lb,'RESV17',ierr)
    IF( ierr == 1 )THEN
      WRITE(55,"(4i5,4e12.4)") e%lnods(1:4),stran(1:4)
      WRITE(55,"(2e15.4)") xi
      CALL runen3('RESV17: negative eigenvalues of U^2')
    END IF
    lb(3) = SQRT(stran(4))
    stran(4) = LOG(lb(3))
    stran = -stran !change sign
    IF( ntype == 1 )THEN            !plane stress
      stres(1) = d(1,1)*stran(1)+d(1,2)*stran(2)
      stres(2) = d(2,1)*stran(1)+d(2,2)*stran(2)
      stres(3) = d(3,3)*stran(3)
    ELSE    !(ntype == 2 or 3) Plane Strain or Axisymmetric
      !IF( mtype == 1 )THEN          !one component material
        ! compute volumetric and deviatoric parts
        delta(k) = ( stran(1) + stran(2) + stran(4) )/3d0
        deltm = deltm + delta(k)*e%dvol(k)     !use mean volumetric strain
        stran(1) = 2d0*(stran(1) - delta(k))  !twice the deviatoric shear strain
        stran(2) = 2d0*(stran(2) - delta(k))
        stran(4) = 2d0*(stran(4) - delta(k))
        !elastic (trial) strains
        stres= d(3,3)*stran                         !Trial elastic shear stresses
      !ELSE IF ( mtype == 5 )THEN ! Orthotropic elastic
      !  stres(1) = d(1,1)*stran(1)+d(1,2)*stran(2)+d(1,4)*stran(4)
      !  stres(2) = d(2,1)*stran(1)+d(2,2)*stran(2)+d(2,4)*stran(4)
      !  stres(3) = d(3,3)*stran(3)
      !  stres(4) = d(4,1)*stran(1)+d(4,2)*stran(2)+d(4,4)*stran(4)
      !END IF
    END IF
    ! store auxiliar values for second loop
    str(:,k)  =  stres
  END DO

  IF( ntype /= 1 )THEN  !only for one-component material
    !IF( mtype == 1 )THEN
      IF( nnode == 4 )THEN
        deltm = deltm/SUM(e%dvol)
        press = km*deltm
        str(1,:) = str(1,:) + press
        str(2,:) = str(2,:) + press
        str(4,:) = str(4,:) + press
      ELSE
        delta = delta*km
        str(1,:) = str(1,:) + delta
        str(2,:) = str(2,:) + delta
        str(4,:) = str(4,:) + delta
      END IF
    !END IF
  END IF
  DO k=1,ngaus         !second Gauss loop (for one component material)
    ! recovers Gauss point values
    stres = str(:,k)   !stresses
    stres = stres*e%dvol(k)     !Original dvol used (TLF)
    !       actual configuration B Matrices
    g = MATMUL(x0,e%cartd(:,:,k))  !deformation gradient
    CALL bmat17(e%cartd(:,:,k),bmat,g,nnode,rf(k),shape(:,k),ntype)
    CALL proma3(rl(1,1),bmat(1,1,1),stres(1),2*nnode,4,.FALSE.)  !nodal contributions
  END DO
  END SUBROUTINE
