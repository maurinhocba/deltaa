 SUBROUTINE gaus17(heade,coord,istop,coora,gauss,plstr,angdf,ntype,ngaus,nnode)
 !-------------------------------------------------------------------
 !--- evaluates gauss points constants for 2D-solid element 17
 !--------------------------------------------------------------------
 IMPLICIT NONE

 INTEGER (kind=4), INTENT(IN) :: ntype,ngaus,nnode
 INTEGER (kind=4), INTENT(OUT) :: istop
 REAL (kind=8), INTENT(IN) :: coord(:,:), & !initial coordinates
                              coora(:,:), & !present coordinates
                              angdf         !default angle X_1 - Ort_1

 TYPE (ele17), POINTER :: heade   !pointer to first element in the set
 LOGICAL, INTENT (IN OUT) :: gauss    !TRUE if initial constant exists
 INTEGER (kind=4), INTENT(IN OUT) :: plstr  !/= 0 if plastic strains required

 !local variables
 INTEGER (kind=4) i,j,k,isec,osec,ngaud
 REAL (kind=8) :: x(2,nnode),cartd(nnode,2),shape(nnode,ngaus), &
                  deriv(nnode,2,ngaus),posgp(2),weigp(2),j1(4)

 REAL (kind=8) :: angle,factor,xita,eta,r,sa,ca,thick
 REAL (kind=8), PARAMETER :: twopi=6.283185307179586
 TYPE (ele17), POINTER :: e
 TYPE (section), POINTER :: sec
 LOGICAL :: plstf

 !     ---------------------------------------------------------

 IF( .NOT.gauss )THEN
   !       gauss points in local coordinates and weigths

   ngaud = 2
   IF( ngaus == 1) ngaud = 1
   CALL gaussq (ngaud ,posgp ,weigp )

   !       gauss points shape and derivatives of nodal functions

   k = 0
   DO i=1,ngaud
     xita = posgp(i)
     DO j=1,ngaud
       k = k+1
       eta = posgp(j)
       CALL shape3(deriv(1,1,k),shape(1,k),xita,eta,nnode)
     END DO
   END DO
 END IF

 !     ---------------------------------------------------------

 factor = twopi/360d0         !pi/180

 osec = -1
 e => heade       !point to first element
 plstf = (plstr == 1)       !compute plastic strains from 2nd P-K stresses
 DO               !loop over the elements in the set
   IF (.NOT.ASSOCIATED (e) ) EXIT  !if all element processed, exit

   IF(.NOT.gauss)THEN    !Compute initial constants if requested
     x = coord(:,e%lnods)     !get original coordinates
     IF( ntype == 3 .AND. ANY(x(1,:) < 0d0))THEN
       WRITE(55,"('For axilsymmetric problems all X1 (r) coordinates' &
              &   ' must be possitive ',/,                            &
              &   ' ELEMENT ',i6,/,(2E15.6) )",ERR=9999) e%numel,x
       CALL runen3('GAUS17: negative coord. r detected ')
     END IF

     angle = ( angdf + e%angle )*factor
     sa    = SIN(angle)
     ca    = COS(angle)

     isec = e%matno
     IF( isec /= osec )THEN
       sec => psecs(isec)%p
       IF( ntype == 1 ) THEN  !plane stress
         thick = sec%rprop(1)
       ELSE IF( ntype == 2 )THEN
         thick = 1d0
       END IF
       osec = isec
     END IF
     ! compute element local systems, nodal functions and derivatives
     k=0
     DO i=1,ngaud
       DO j=1,ngaud
         k = k+1
         CALL jaco17(cartd,deriv(:,:,k),e%dvol(k),x,e%numel,nnode,istop,j1)
         e%dvol(k)= e%dvol(k)*weigp(i)*weigp(j)           !Gauss point area
         IF( ntype == 1 ) e%dvol(k)= e%dvol(k)*thick      !thickness por plane stress
         IF( ntype == 3 )THEN                             !2Pi * r for axilsymmetric problems
           r = DOT_PRODUCT( x(1,:),shape(:,k) )
           thick = r*twopi
           e%dvol(k)= e%dvol(k)*thick
         END IF
         ! compute cartesian derivatives in the skew system
         e%cartd(:,1,k) = cartd(:,1)*ca + cartd(:,2)*sa
         e%cartd(:,2,k) =-cartd(:,1)*sa + cartd(:,2)*ca
         e%stint(:,k) = 0d0    !initializes stresses
       END DO
     END DO
   END IF

   ! If necessary compute plastic strains from stresses
   ! IF( plstr /= 0) CALL stst17( e, iffix, coora, plstf)
   e => e%next          !point to next element
 END DO
 gauss = .TRUE.
 plstr = 0

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE gaus17
