 SUBROUTINE stif17i(heade, coord, gstif, ustif, force, ntype, coora, ngaus,nnode)

 USE solv_db, ONLY : nsymm
 IMPLICIT NONE
                               !--------- to optimize ---------
 INTEGER (kind=4), PARAMETER :: ndime =2
 INTEGER (kind=4), INTENT(IN) :: ntype,ngaus,nnode
 REAL (kind=8), INTENT(IN) :: coord(:,:),coora(:,:)
 REAL (kind=8), INTENT(IN OUT) :: gstif(:),ustif(:),force(:)
 TYPE (ele17), POINTER :: heade

 !Local Variables
 REAL(kind=8), PARAMETER :: as = 1d-3
 LOGICAL :: natst
 TYPE (ele17), POINTER :: e
 LOGICAL  :: newmt,found,bbar
 INTEGER (kind=4) :: ielem,isec,i,j,g,k,nstre,   &
                     osec,mtype,ng,nvarl

 REAL (kind=8) x(2,nnode),t(2,2),                             &
               bmatx(ndime,nnode,4),                          &
               bmat0(ndime,nnode,4),                          &
               thick,voli,x0(2,nnode),r0,r,rf,                &
               d(4,4),deatht,young,poiss,km, bb(8)

 REAL (kind=8) :: stiff(136)      !36 = nvarl*(nvarl+1)/2
 REAL (kind=8) :: stife(8,8),stdf(8,8)      ! nvarl,nvarl
 REAL (kind=8), ALLOCATABLE :: daux(:,:)      ! nstre,nstre

 REAL (kind=8) :: propi(5)      !(nnn) material properties


 TYPE (section), POINTER :: sec
 TYPE (mater), POINTER :: mat

 REAL (kind=8) :: sh(4,ngaus),der(4,2),xita(2)
 REAL(kind=8), PARAMETER :: r3 = 0.577350269189626D+00

 INTERFACE
   INCLUDE 'modp20.h'
 END INTERFACE

 !***  Compute Element Stiffness matrix for all elements

 osec = -1
 e => heade
 nstre = 3
 IF( ntype /= 1 )nstre = 4
 IF( ntype == 3 )THEN
   ng = 2
   IF( ngaus == 1) ng = 1
   xita = (/ -r3,+r3 /)
   g = 0
   DO i=1,ng
     DO j=1,ng
       g = g+1
       CALL shape3(der,sh(1,g),xita(i),xita(j),nnode)
     END DO
   END DO
 END IF
 ALLOCATE( daux(nstre,nstre) )
 bbar = ntype /= 1 .AND. nnode == 4 !use b-bar for plane strain or axilsymmetric problems
 nvarl = ndime * nnode
 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel
   isec = e%matno
   newmt = osec /= isec
   IF(newmt)THEN                     !if new material, get properties
     sec => psecs(isec)%p
     mat => sec%mtbas
     osec = isec                    !keep present material
     mtype = mat%mtype              !type of base material
     IF(ntype == 1)thick = sec%rprop(1)           ! original thickness

     IF( mtype == 1)THEN
       young = mat%prope(1)          ! young modulus
       poiss = mat%prope(2)          ! poisson ratio
       km    = mat%prope(4)          ! bulk modulus
       propi = 0d0
       ! von Mises plasticity IF( mat%matdef(3) <= 2 )
       CALL modp20(d,ntype,young,poiss,propi,0d0,0d0,bbar,.TRUE.,newmt)
       DO i=1,nstre
         DO j=i+1,nstre
           d(j,i) = d(i,j)
         END DO
       END DO
     ELSE IF( mtype == 5)THEN            !elastic orhthotropic
       ! plane stress elasticity matrix
       IF( ntype == 1 )THEN
         d(1:3,1:3) = RESHAPE( mat%prope(20:28), (/3,3/) )
       ELSE
         d = RESHAPE( mat%prope(29:44), (/4,4/) )
       END IF
       newmt = .FALSE.                        !same material than previous ?
     END IF
   END IF

   x = coora(:,e%lnods)     !present material coordinates (variables)
   x0= coord(:,e%lnods)     !spatial coordinates (fixed)

   IF( bbar ) bb = 0d0

   ! Integration loop
   stife = 0d0

   DO g=1,ngaus
     voli = e%dvol(g)
     ! scale D matrix
     daux = d*voli
     ! strain-displacement matrix
     t = MATMUL(x,e%cartd(:,:,g))  !material deformation gradient
     IF( ntype == 3 )THEN
       r0 = DOT_PRODUCT(x0(1,:),sh(:,g))    !original r coordinate (spatial)
       r  = DOT_PRODUCT(x(1,:),sh(:,g))     !present r coordinate (material)
       rf = r/r0**2                         !Coefficient for B matrix
     END IF
     CALL bmat17(e%cartd(:,:,g),bmatx,t,nnode,rf,sh(:,g),ntype)
     t = MATMUL(x0,e%cartd(:,:,g))  !deformation gradient
     IF( ntype == 3 )  rf = 1d0/r0          !Coefficient for B matrix
     CALL bmat17(e%cartd(:,:,g),bmat0,t,nnode,rf,sh(:,g),ntype)
     CALL b0dbpr(bmat0(1,1,1),bmatx(1,1,1),daux(1,1),stife(1,1),nvarl,nstre) ! B0^T D B


     !IF( bbar ) CALL bbar17(e%cartd(:,:,g),bb,t1,voli,ntype,t33,r0,sh(:,g),natst)

   END DO
   !IF( bbar )THEN
   !  aux1 = km/SUM(e%dvol)
   !  CALL btdbpr(bb(1),aux1,stife(1),nvarl,1)
   !END IF
   ! add to global stiffness matrix
   IF( nsymm == 1 )THEN !for non-symmetric matrix
     !CALL stif17iDF(x0,x,d,e,stdf,ntype,ngaus,nnode)
     !CALL stiaux_NS(nnode,e%lnods(1),nvarl,ndime,stdf(1,1),force(1),gstif(1),ustif(1) )
     CALL stiaux_NS(nnode,e%lnods(1),nvarl,ndime,stife(1,1),force(1),gstif(1),ustif(1) )
     !IF( ielem == 1 .OR.  ielem == 198 .OR.  ielem == 203 .OR.  ielem == 400 )THEN
     !  WRITE(58,"('elm.',i5,' analitica')")ielem
     !  WRITE(58,"(8e20.12)")((stife(i,j),j=1,8),i=1,8)
     !  WRITE(58,"('Numérica')")
     !  WRITE(58,"(8e20.12)")((stdf(i,j),j=1,8),i=1,8)
     !END IF
   ELSE
     k = 0
     DO i=1,nvarl
       k = k+1
       stiff(k) = stife(i,i)
       DO j=i+1,nvarl
         k = k+1
         stiff(k) = (stife(i,j)+stife(j,i))/2d0
       END DO
     END DO
     CALL stiaux(nnode,e%lnods,nvarl,ndime,stiff(1),force(1),gstif(1) )
   END IF

   e => e%next
 END DO

 RETURN

 END SUBROUTINE stif17i
