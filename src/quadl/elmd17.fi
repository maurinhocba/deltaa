 SUBROUTINE elmd17 (nelem, heade, taile, iwrit, ntype, ngaus, nnode, nocom)
 !******************************************************************
 !
 !*** READ element DATA for 2-D QUADL element  (TLF)
 !
 !******************************************************************
 IMPLICIT NONE

 INTEGER (kind=4) :: nelem, iwrit, ntype, ngaus, nnode
 TYPE (ele17), POINTER :: heade,taile !pointers to first and last elements
 LOGICAL, INTENT(IN) :: nocom

 LOGICAL found,plast
 INTEGER (kind=4) :: i,ip,chnode,isec,nvare,mtype,osec
 INTEGER (kind=4) :: secs(3) = (/ 1,5,6 /)  !acceptable material types
 TYPE (ele17), POINTER :: elem
 TYPE (section), POINTER :: sec

 ! *** READ the element nodal connections, and the property numbers.

 IF(iwrit == 1) WRITE(lures,"(//6X,'ELEMENT     MAT       NODE NUMBERS ',&
                           &    10x,'angle')",ERR=9999)

 osec = -1
 nvare = 14 !number of internal variables per integration point/per compon
 DO
   ! loop over elements

   CALL listen('ELMD17')          !read a card
   IF (exists('ENDELE')) EXIT     !if key word END_ELEMENT read, exit loop

   nelem = nelem + 1         !increase element counter
   ALLOCATE (elem)           !reserve memory for data

   elem%numel = INT (param(1))    !element label
   isec = INT (param(2))         !associated material
   IF( isec /= osec )THEN        !checks
     CALL sect_search (isec,found,sec,ip)
     IF(.NOT.found)CALL runend('ELMD17: Invalid Section Number used')
     mtype = sec%secty        !check section type for element
     IF( mtype /= 0 ) CALL runend('ELMD17: Invalid sect. type for SOLID')
     mtype = sec%mtbas%mtype       !check material type for element
     IF( .NOT. ANY(mtype == secs) )  &
       CALL runend('ELMD17: Invalid Mat. type for QUADL')
     plast = sec%mtbas%matdef(3) > 1  !plasticity
     IF( mtype == 5 .AND. plast ) &
       CALL runend('QUADL: Orthotropic and plastic Not possible')
     osec = isec
   END IF

   elem%matno = ip       !store position in section array

   ALLOCATE( elem%lnods(nnode) ) ! get meomory for connectivities
   elem%lnods(:) = INT (param(3:2+nnode))  !connectivities
   elem%angle = param(3+nnode)   ! angle between Default Ort_1 and local Ort_1
   !    echo according to flag
   IF(iwrit == 1)THEN
     IF(nnode == 4 ) WRITE(lures,"(i13,i8,4i7,F17.4)",ERR=9999) elem%numel,isec, &
                               elem%lnods,elem%angle
     IF(nnode == 8 ) WRITE(lures,"(i13,i8,8i7,F17.4)",ERR=9999) elem%numel,isec, &
                               elem%lnods,elem%angle
   END IF
   !     original nodes are changed
   DO i=1,nnode
     elem%lnods(i) = chnode(elem%lnods(i))
   END DO

   ALLOCATE (elem%dvol(ngaus),elem%stint(4,ngaus))  !reserve space for variables
   ALLOCATE (elem%cartd(nnode,2,ngaus))      !reserve space for variables
   IF( nocom )THEN
     ALLOCATE (elem%gausv(5,ngaus))       !reserve space for Gauss variables
   ELSE IF( plast )THEN
     ALLOCATE (elem%gausv(nvare,ngaus))   !reserve space for Gauss variables
   ELSE
     ALLOCATE (elem%gausv(1,1))   !reserve space for Gauss variables
   END IF
   elem%gausv = 0d0                     !initializes

   CALL add_ele17e (elem, heade, taile) !add element to list

 END DO

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE elmd17
