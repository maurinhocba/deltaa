 SUBROUTINE stif17(heade, coord, gstif, force, ntype, coora, ngaus,nnode)

 IMPLICIT NONE
                               !--------- to optimize ---------
 INTEGER (kind=4), PARAMETER :: ndime =2
 INTEGER (kind=4), INTENT(IN) :: ntype,ngaus,nnode
 REAL (kind=8), INTENT(IN) :: coord(:,:),coora(:,:)
 REAL (kind=8), INTENT(IN OUT) :: gstif(:),force(:)
 TYPE (ele17), POINTER :: heade

 !Local Variables
 REAL(kind=8), PARAMETER :: as = 1d-3
 LOGICAL :: natst
 TYPE (ele17), POINTER :: e
 LOGICAL  :: newmt,plast,found,elast,bbar
 INTEGER (kind=4) :: ielem,isec,i,j,g,k,l,nstre,   &
                     osec,mtype,nucom,ng,is,numpt,nvarl

 REAL (kind=8) x(2,nnode),t(2,2),efpst,                       &
               bmatx(ndime,nnode,4),daux(10),                 &
               thick,stres(4),cm(4,4),aux1,                   &
               stran(4),voli,u2(4),x0(nnode),r0,r,rf,         &
               d(4,4),deatht,lambd,young,poiss,km,            &
               t1(2,2),t33,bb(8),r1,r2,lb(3)

 REAL (kind=8) :: stiff(136)      !36 = nvarl*(nvarl+1)/2

 REAL (kind=8) :: propi(13),   & !(nnn) material properties
                  chi(12)        !(12) Hill coefficients

 !REAL (kind=8), POINTER :: volfr(:),   & !(NUCOM) components volumetric fraction
 !                          cmc(:,:),   & !(4,NUCOM) Elasticity matrix
 !                          rr(:,:),    & !(5,NUCOM) rotation matrix compon.
 !                          prop(:,:),  & !(nnn,NUCOM) material properties
 !                          yprop(:)      !(nnn) material properties

 TYPE (section), POINTER :: sec
 TYPE (mater), POINTER :: mat
 REAL (kind=8), POINTER :: val(:,:)

 REAL (kind=8) :: sh(4,ngaus),der(4,2),xita(2)
 REAL(kind=8), PARAMETER :: r3 = 0.577350269189626D+00

 INTERFACE
   !INCLUDE 'dmat09.h'
   INCLUDE 'modp20.h'
   INCLUDE 'rubberps.h'
   INCLUDE 'rubber2d.h'
 END INTERFACE

 !***  Compute Element Stiffness matrix for all elements

 osec = -1
 e => heade
 nstre = 3
 IF( ntype /= 1 )nstre = 4
 IF( ntype == 3 )THEN
   ng = 2
   IF( ngaus == 1) ng = 1
   xita = (/ -r3,+r3 /)
   g = 0
   DO i=1,ng
     DO j=1,ng
       g = g+1
       CALL shape3(der,sh(1,g),xita(i),xita(j),nnode)
     END DO
   END DO
 END IF
 bbar = ntype /= 1 .AND. nnode == 4 !use b-bar for plane strain or axilsymmetric problems
 nvarl = ndime * nnode
 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel
   isec = e%matno
   newmt = osec /= isec
   IF(newmt)THEN                     !if new material, get properties
     sec => psecs(isec)%p
     mat => sec%mtbas
     osec = isec                    !keep present material
     nucom = sec%iprop(2)           !number of material components
     mtype = mat%mtype              !type of base material
     IF(ntype == 1)thick = sec%rprop(1)           ! original thickness
     elast = mat%matdef(3) == 1      !elastic

     IF( mtype == 1)THEN
       IF( .NOT.elast )THEN
         propi(1:4) = mat%propp(1:4)       ! isotropic hardening parameters
         propi(5) = REAL( mat%matdef(4),8) ! isotropic hardening model
         chi    = mat%propp(16:27)         ! hill coefficients
         IF( mat%matdef(8) == 1  ) chi(1:6) = chi(7:12)  !associative
         deatht = mat%propp(5)             !end of plasticity
         plast = propi(1) > 0  !consider plasticity ?
         is  = mat%matdef(4)           !isotropic hardening model
         IF ( is == 5 )THEN             !points defined yield curve
           val => mat%chead%val
           numpt = mat%chead%np
         ELSE
           NULLIFY (val)
           numpt = 0
         END IF
       END IF
       young = mat%prope(1)          ! young modulus
       poiss = mat%prope(2)          ! poisson ratio
       km    = mat%prope(4)          ! bulk modulus
       ! von Mises plasticity IF( mat%matdef(3) <= 2 )
       CALL modp20(d,ntype,young,poiss,propi,0d0,0d0,bbar,elast,newmt)
       natst = .TRUE.
     ELSE IF( mtype == 5)THEN            !elastic orhthotropic
       ! plane stress elasticity matrix
       IF( ntype == 1 )THEN
         d(1:3,1:3) = RESHAPE( mat%prope(20:28), (/3,3/) )
       ELSE
         d = RESHAPE( mat%prope(29:44), (/4,4/) )
       END IF
       elast = .TRUE.
       plast = .FALSE.                        !consider plasticity ?
       newmt = .FALSE.                        !same material than previous ?
       natst = .FALSE.
     ELSE IF( mtype == 6)THEN            !hyperelastic isotropic
       propi(1:12) = mat%prope(7:18)
       elast = .TRUE.
       plast = .FALSE.                   !consider plasticity ?
       natst = .TRUE.
       bbar  = .FALSE.
     END IF
   END IF

   x = coora(:,e%lnods)     !nodes of the element

   IF( ntype == 3 )  x0 = coord(1,e%lnods) !for axilsymmetric problems
   IF( bbar ) bb = 0d0

   ! Integration loop
   stiff = 0d0

   DO g=1,ngaus
     voli = e%dvol(g)
     ! compute point constitutive matrix (tangent algorithmic)
     IF( mtype == 1 )THEN   ! for an isotropic one component material
       IF( .NOT.elast )THEN
         lambd = e%gausv(10,g)         !Increment in Total Eff. plastic strain
         efpst = e%gausv(5,g) + lambd  !Total Eff. plastic strain
       ELSE
         lambd = 0d0
         efpst = 0d0
       END IF
       CALL modp20(d,ntype,young,poiss,propi,efpst,lambd,bbar,elast,newmt)
       !stres(1:3) = e%stint(1:3)   !stresses (Hencky or 2PK)
       !CALL dmat14(dummy,dummy,dummy,stres(1),lambd,efpst,d(1,1),.FALSE.)
     END IF

     t = MATMUL(x,e%cartd(:,:,g))  !deformation gradient
     IF( ntype == 3 )THEN
       r0 = DOT_PRODUCT(x0,sh(:,g))         !original r coordinate
       r  = DOT_PRODUCT(x(1,:),sh(:,g))     !present r coordinate
       rf = r/r0**2                         !Coefficient for B matrix
     END IF
     IF( natst )THEN
       ! Compute Metric tensor
       stran(1) = DOT_PRODUCT(t(:,1),t(:,1))
       stran(2) = DOT_PRODUCT(t(:,2),t(:,2))
       stran(3) = DOT_PRODUCT(t(:,1),t(:,2))
       SELECT CASE (ntype)
       CASE (1)  !   plane stress
         stran(4) = 1d0/(stran(1)*stran(2) - stran(3)**2)  !isochoric
       CASE (2)  !   plane strain
         stran(4) = 1d0
       CASE (3)  !   axilsymmetric
         stran(4) = rf*r                                !Lambda 3 squared
       END SELECT
       IF (mtype == 6)THEN
         CALL lgst14(stran,r1,r2,lb(1),'STIF17',found) !compute eigenvalues
         IF( ntype == 1 )THEN !plane stress
           CALL rubberps(propi,lb,mat%matdef(8),stran,vec=daux,r1=r1,r2=r2)
         ELSE                 !plane strain or axilsymmetric
           lb(3) = 1d0
           IF( ntype == 3 ) lb(3) = SQRT(stran(4))
           CALL rubber2d(propi,lb,mat%matdef(8),stran,r1,r2,vec=daux)
         END IF
       ELSE       !other materials
         ! inverse of U^2
         aux1  = (stran(1)*stran(2)-stran(3)**2)*stran(4) !=1d0
         u2(1) = stran(2)/aux1
         u2(2) = stran(1)/aux1
         u2(3) = -stran(3)/aux1
         u2(4) = stran(4)/aux1
         IF( ntype /= 1 )THEN
           ! inverse of F = U(-2)*F(T)
           t1(1,1) = u2(1)*t(1,1) + u2(3)*t(1,2)
           t1(2,1) = u2(3)*t(1,1) + u2(2)*t(1,2)
           t1(1,2) = u2(1)*t(2,1) + u2(3)*t(2,2)
           t1(2,2) = u2(3)*t(2,1) + u2(2)*t(2,2)
           t33     = u2(4)*SQRT(stran(4))
         END IF
            !large strain (modify using the metric tensor)
         cm(1,1) = d(1,1)*u2(1)*u2(1) + 2d0*d(1,3)*u2(1)*u2(3) &
                 + d(3,3)*u2(3)*u2(3)

         cm(1,2) = d(1,3)*u2(1)*u2(3) + d(1,2)*u2(1)*u2(2)     &
                 + d(3,3)*u2(3)*u2(3) + d(2,3)*u2(3)*u2(2)

         cm(1,3) = ( d(1,1)*u2(1)*u2(3) + d(1,2)*u2(1)*u2(3)   &
                 + d(1,3)*( u2(1)*u2(1) + u2(1)*u2(2) + u2(3)*u2(3) )   &
                 + d(2,3)*u2(3)*u2(3)                                   &
                 + d(3,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/2d0

         cm(2,2) = d(2,2)*u2(2)*u2(2) + 2d0*d(2,3)*u2(2)*u2(3) &
                 + d(3,3)*u2(3)*u2(3)

         cm(2,3) = ( d(1,2)*u2(2)*u2(3) + d(1,3)*u2(3)*u2(3)   &
                 + d(2,2)*u2(2)*u2(3)                                   &
                 + d(2,3)*( u2(1)*u2(2) + u2(2)*u2(2) +u2(3)*u2(3) )    &
                 + d(3,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/2d0

         cm(3,3) = (d(3,3)*(u2(1)*u2(1)                        &
                 + 2d0*u2(1)*u2(2)+u2(2)*u2(2))                         &
                 + d(1,1)*u2(3)*u2(3) + 2d0*d(1,2)*u2(3)*u2(3)          &
                 + 2d0*d(1,3)*( u2(1)*u2(3) + u2(2)*u2(3) )             &
                 + d(2,2)*u2(3)*u2(3)                                   &
                 + 2d0*d(2,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/4d0
         IF( nstre == 4 )THEN
           cm(1,4) = u2(1)*d(1,4)*u2(4)+ u2(3)*d(3,4)*u2(4)
           cm(2,4) = u2(2)*d(2,4)*u2(4)+ u2(3)*d(3,4)*u2(4)
           cm(3,4) = (u2(3)*(d(1,4)+d(2,4))*u2(4)+ ( u2(1)+ u2(2))*d(3,4)*u2(4))/2d0
           cm(4,4) =  u2(4)*d(4,4)*u2(4)
         END IF
       END IF
     ELSE  !small strain
       cm      = d
     END IF
     ! scale D matrix
     IF( mtype == 6 )THEN
       IF( ntype == 1 )THEN    !plane stress
         daux(1:6) = voli*daux(1:6)
       ELSE                    !plane strain or axilsymmetric
         daux = voli*daux
       END IF
     ELSE
       k = 0
       DO i=1,nstre
         DO j=i,nstre
           k = k+1
           daux(k) = voli*cm(i,j)
         END DO
       END DO
     END IF
     ! strain-displacement matrix
     CALL bmat17(e%cartd(:,:,g),bmatx,t,nnode,rf,sh(:,g),ntype)
     CALL btdbpr(bmatx(1,1,1),daux(1),stiff(1),nvarl,nstre)

     IF( bbar ) CALL bbar17(e%cartd(:,:,g),bb,t1,voli,ntype,t33,r0,sh(:,g),natst)

     stres = e%stint(:,g)*voli
     ! geometric stiffness
     CALL kgmm17(e%cartd(:,:,g),stres,stiff,ntype,r0,sh(:,g),nnode)
   END DO
   IF( bbar )THEN
     aux1 = km/SUM(e%dvol)
     CALL btdbpr(bb(1),aux1,stiff(1),nvarl,1)
   END IF
   ! add to global stiffness matrix
   CALL stiaux(nnode,e%lnods,nvarl,2,stiff(1),force(1),gstif(1) )

   e => e%next
 END DO

 RETURN

 END SUBROUTINE stif17
