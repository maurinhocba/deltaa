 SUBROUTINE sc_shre3( sec )
 !            --------------------------------
 !            input material properties for multi-layered lamina
 !            Total Lagrangean Shear deformable elements
 !            shear deformable 2-D shell/beam (SHREV)
 !
 !  iprop: 1 :nlayr
 !         2 :nvars:  number of internal variables for the whole laminate (NOT YET)
 !         3 :0  elastic lamina,  1:inelastic
 !         4 :0  RZT
 !         5 :0  layer to compute delamination
 !    6:5+nl :associated material label to each layer
 !
 !  rprop  1 : thick
 !         2 : mean young modulus
 !         3 : mean density
 !         4 : width  for 2-D Beam Element
 !         5 : surface density
 !      6-16 : (11) Standard integrated elasticity matrix
 !     17-21 : ( 5) in-plane integrated matrices associated with additional DOFs (RZT or other)
 !     22-23 : ( 2) transverse integrated matrices associated with additional DOFs (RZT or other)
 !
 !            E1 E2 M1 M2 Q1 Mf QF
 !             6  7 13 14    18
 !                8 15 16    19
 !                   9 10    20
 !                     11    21
 !                        12    23
 !                           17
 !                              22
 !

 ! SCF below is for Shear Correction Factor

 USE ctrl_db, ONLY : ntype
 IMPLICIT NONE
 TYPE (section), POINTER :: sec

 ! material types allowed for this section
 INTEGER (kind=4), PARAMETER :: npl = 9     !number of real values per layer
 INTEGER (kind=4), PARAMETER :: matsa(2) = (/1,5/)  ! material types allowed for this section
 INTEGER (kind=4) matno,nlayr,ith,il,sizer,sizei,imat,k,inter,i0,i,ii,lcomp
 INTEGER (kind=4) nvars
 REAL(kind=8) :: thick,width,youn,dens,thickl,de(18),zl,celoc(6),g1,g2,        &
                 f11,f1,f2,sf,thicks,im(0:1),ce(4), stren,frene,            &
                 v1,v2,v3,vo,xa,xb,xc,w0,x0

 LOGICAL :: found,read_integrated_matrix,fastr,compute
 REAL(kind=8) :: za,ia,ra,ga,da,den,zk    !for shear factors computation
 REAL(kind=8), ALLOCATABLE :: rprop(:,:),phi(:),beta(:),as(:,:),gv(:),fs(:)
 TYPE (mater), POINTER :: mat
 TYPE (postv), POINTER :: var1,var2 !pointers to postprocess variables

 compute = .FALSE.
 lcomp   = 0

 sec%secty = 45         !Laminated shell of revolution
 sec%mabas = -1         ! flag to indicate that no unique associated material exist

 CALL listen('SHREV3')  !read a line


 sizer = 30             ! minimum size of real array
 thick = getrea('THICK ',0.D0,' Thickness ........................')
 if( ntype == 1 )THEN
   width = getrea('WIDTH ',1d0,' Width for 2-D Beam Element........')
 ELSE
   width = 1d0
 END IF
 IF( thick > 0d0 ) THEN
   ith=1 ! thickl will be input as a percentage of thick
 ELSE
   ith=0 ! thickl will be input as a Real dimension
 END IF
 thicks = 0d0 !initializes thickness to check
 nlayr  = getint('NLAYR ',   0,'!NUMBER OF LAYERS .................')
 IF ( nlayr <= 0) CALL runend('SHREV2: VERIFY NUMBER OF LAYERS ')
 sizei =  5+nlayr                  !size of integer array
 ALLOCATE (sec%iprop(sizei), rprop(2,nlayr) )
 sec%iprop = 0   !initializes
 rprop = 0d0     !initializes
 sf = getrea('SHEARF',0.00000D0,' Shear Factor .....................') !for FSDT
 IF( sf == 0D0 )THEN
   WRITE(lures,"(/,' Computed Shear Correction Factors will be used',/)")
 ELSE
   WRITE(lures,"(/,' Data Shear Correction Factors will be used',/)")
 END IF
 read_integrated_matrix = exists('READMA')

 sec%iprop(4)  = getint('INTERP',   0,' Interpolation function ...........')
 inter = sec%iprop(4)
 SELECT CASE (inter)
   CASE(0)
      WRITE(lures,"(/,' R E F I N E D   Z I G Z A G   A P P R O A C H',/)")
      CALL runend
      CALL runend('SHREV3:  Only INTERP=2 allowed for this section type')
   CASE(1)
      WRITE(lures,"(/,' T R I G O N O M E T R I C   A P P R O A C H',/)")
      CALL runend('SHREV3:  Only INTERP=2 allowed for this section type')
   CASE(2)
      WRITE(lures,"(/,' RZT + cuadratic and cubic smeared approach ',/)")
      ALLOCATE( gv(nlayr+3),as(nlayr+3,nlayr+3),fs(0:nlayr) )
 END SELECT

 youn = 0d0            !Initializes mean young modulus
 dens = 0d0            !Initializes mean density
 ii  = 6               !pointer to integer array
 im = 0d0              !rot inertia

 za = 0d0              !SCFV initializes for neutral surface computation NUM
 den = 0d0             !SCFV DEN

 DO il=1,nlayr         !for each layer
   ! read layer information
   CALL listen('SHREV3')  !read a line
   matno    = getint('NUMAT ', 1 ,'!Associated Material ..............')
   CALL mat_search(matno,found,mat,imat)        !search base material
   IF(.NOT.found) CALL runend ('SHREV3: NOT FOUND ASSOCIATED MATERIAL ')
   IF( .NOT.ANY( mat%mtype == matsa) ) &  !check if base material is correct
            CALL runend('SHREV3: Invalid material association')
   sec%iprop(ii)       = imat     !store associated material index (in PMATS)
   IF(ith == 0) THEN   !thicknes must be computed
     thickl = getrea('THICKL',1.D0,'!LAYER THICKNESS ..................')
     thick  = thick + thickl         ! sum layer thickness
   ELSE                !thickness is known
     thickl = getrea('THICKL',1.D+2/nlayr,' LAYER THICKNESS ( % ).............')
     thickl = thick * thickl *1.D-2   ! compute layer thickness
   END IF
   thicks = thicks + thickl           !to check and present position
   IF( exists("COMPUT")) THEN
     Compute = .TRUE.
     lcomp = il
   END IF
   youn = youn + thickl*mat%prope(1)  !mean young modulus
   dens = dens + thickl*mat%prope(5)  !surface density
   rprop(1,il) = thickl               !store layer thickness (real dimension)
   !compute average values
   SELECT CASE (mat%mtype)
   CASE(1)   !isotropic
     da = mat%prope(1)                       !SCFV E/(1-nu^2)
     IF( ntype /= 1 )da = da/(1d0-mat%prope(2)**2)    !SCFV E/(1-nu^2)
     gv(il) = mat%prope(3)
   CASE(5)   !orthotropic
     gv(il) = mat%prope(13)                                           !RZT G13
     !SCF use plane stress orthotropic matrix from database (prope(16:19)
     IF( ntype == 1 ) THEN
       da = mat%prope(7)                                              !SCFV E1
     ELSE
       da = mat%prope(16)                                             !SCFV D11
     END IF
   END SELECT
   den = den + da*thickl                             !SCFV
   za  = za  + da*thickl*(thicks-thickl/2d0)         !SCFV
   ii = ii+1                           !updates pointer to integer array
 END DO
 IF( ith == 1 .AND. ABS(thicks/thick - 1d0) > 0.001 )THEN
   WRITE(lures,"(' layers thickness sums',f8.4,'%')")thicks/thick*1d2
   CALL runend('SHREV3: Sum of layers /= 100%')
 END IF
 sec%iprop(5)    = lcomp    !store layer to compute shear stress
 ! ad-hoc functions *begin*
 thicks = 0d0        ! initializes
 i0 = 1              ! initializes first sublayer of first layer
 fs(0) = 0d0         ! initializes ad-hoc function at zero at bottom surface
 DO il=1,nlayr       ! for each sub-layer
   thickl = rprop(1,il)           !sub-layer thickness
   thicks= thicks+ thickl         !update layer thickness
   IF( il < nlayr)THEN            ! but the last sub layer
      g1 = gv(il)                   !get shear modulus of present layer
      g2 = gv(il+1)                 !get shear modulus of next layer
   ELSE                           ! last layer
      g1 = gv(i0)                   !use previous values
      g2 = gv(il)
   END IF
   ! distinguish when a layer change occur
   IF( ABS(g1/g2 -1d0) > 1e-12  .OR. il == nlayr)THEN   ! if the end of the layers found
     f1 = 1d0/((g1/g2)**2+1)         !factor for equations
     f2 = 1d0-f1
     IF(i0 == 1 )THEN           ! for first layer
       v1 = 0d0                   !
       v2 = g1*f1+g2*f2           !
       v3 = g1                    !
     ELSE IF(il == nlayr )THEN  ! for the last layer
       v1 = vo
       v2 = 0d0
       v3 = g2
     ELSE                       ! inner layers
       v1 = vo
       v2 = g1*f1+g2*f2
       v3 = g1
      END IF
      vo = g1*f1+g2*f2
      xa = (-v1-v2+12*v3)/10d0           ! parameters of the quadratic approach
      xb = (v2-v1)/thicks                !
      xc = 12*(v1+v2-2*v3)/5/thicks**2   !
      zk = -thicks/2d0                   ! initializes local coordinate
      DO i=i0,il                      ! for each sublayer of the real layer
        zk = zk+ rprop(1,i)              !update z coordinate
        fs(i) = xa+xb*zk+xc*zk**2        ! ad-hoc function
      END DO
      i0 = il+1                          !initializes first sublayer of real layer
      thicks = 0d0                       !initializes layer thickness
   END IF
 END DO
 !ad-hoc *end*
 ! Compute equation systems to compute RZT3 Additional functions
 as = 0d0                                                  !initializes
 ! fixed values
 as(1,3) = 1d0 ; as(2,3) = 1d0                             !
 as(3,4) = 1d0 ; as(3,nlayr+3) = as(3,nlayr+3) -1d0
 as(4,4) =-1d0 ; as(4,nlayr+3) = as(4,nlayr+3) -1d0
 as(1,1) = -thick**2/4d0 ; as(1,2) = thick**3/8d0
 as(2,1) = -thick**2/4d0 ; as(2,2) =-thick**3/8d0
 as(3,1) = 2d0*thick     ; as(4,2) = 1.5d0*thick**2
 as(2,4) = rprop(1,1)  !h1
 ! inter-layer conditions
 zk = thick/2d0             !top surface
 DO il=nlayr-1,1,-1            !from upmost interface to lowmost interface
   thickl = rprop(1,il+1)                 !layer thickness upper
   zk = zk-thickl                            ! interface z coordinate
   as(2,il+4) = thickl                       ! hk
   g1 = gv(il) ; g2 = gv(il+1)               ! shear modulus of adjacent layers to the interface
   IF( ABS(g1/g2 -1d0) > 1e-12 )THEN           ! if shear modulus are different (standard)
     as(4+il,1) = 2d0*zk
     as(4+il,2) = 3d0*zk**2
     f1 = 1d0/(g2/g1-1d0)
     f2 = 1d0/(g1/g2-1d0)
     as(il+4,il+3) = f1
     as(il+4,il+4) = f2
     gv(il+4) = 1d0                            ! rhs vector
   ELSE                                       ! if same shear modulus (may be sub-layers)
     as(il+4,il+3) = 1d0
     as(il+4,il+4) =-1d0
     gv(il+4) = 0d0                            ! rhs vector
  END IF
 END DO
 gv(1:3) = 0d0                                 ! rhs vector
 gv(4) = 2d0                                   ! rhs vector
 !WRITE(58,"(7f12.8)")((as(k,il),il=1,6),gv(k),k=1,6)
 CALL solsys(as,gv(:),nlayr+3,.TRUE.)                 ! solve system
 !WRITE(58,"(1f15.8)")gv
 DEALLOCATE( as )

 za = za/den - thick/2d0  !SCFV neutral surface position (from mid surface)

 ALLOCATE (phi(-2:nlayr),beta(nlayr))  !to store values defining phi and derivatives at each layer
 phi(-2:0) = gv(1:3)
 beta(1:nlayr) = gv(4:nlayr+3)
 DO il=1,nlayr
   thickl = rprop(1,il)                 !layer thickness upper
   phi(il) = phi(il-1)+beta(il)*thickl
 END DO
 w0 = phi(-1)
 x0 = phi(-2)
 !      For each layer (2 values)
 !          1: layer thickness
 !          3: layer z coordinate
 sizer = sizer+(nlayr+3)                ! include zig-zag functions
 sizer = sizer+nlayr                    ! include zig-zag functions derivatives
 sizer = sizer+(nlayr+1)                ! include ad-hoc functions
 sec%iprop(1) = nlayr                   !keep number of layers
 sec%iprop(2) = 0                       !set total number of internal variables
 sec%iprop(3) = 0                       !initializes to elastic lamina

 !IF( nvars > 0 )THEN      ! if internal variables exist
 !  sec%iprop(3) = 1                     !set to plastic lamina
 !END IF
 sizer = sizer+nlayr*2                  !update size of real array
 sizer = MAX(sizer,50)
 sec%secdef = (/ sizei,sizer, 0,0,0 /)  !size of arrays
 ALLOCATE (sec%rprop(sizer) )           !get memory
 sec%rprop = 0d0                        !initializes
 sec%rprop(1) = thick                   !thickness
 sec%rprop(2) = youn/thick              !mean young modulus
 sec%rprop(3) = dens/thick              !mean density
 sec%rprop(4) = width                   !keep width for beams
 sec%rprop(5) = dens*width              !surface density
 sec%rprop(24) = sf                     !keep shear factor

 IF(.NOT.read_integrated_matrix)THEN
   ga = 0d0 ; ia = 0d0 ; da = 0d0 ; ra = 0d0  !SCFV initializes arrays
   ! compute elastic integrated matrix
   de = 0d0                                   !initializes through the thickness integrated matrix
   zl = -thick/2d0             !initializes Z position at bottom surface
   DO il=1,nlayr                           !for each layer
     imat= sec%iprop(5+il)                   !material index
     mat => pmats(imat)%p                    !point to material
     ! celoc(1:4) in plane values  celoc(5:6) shear values
     IF( ntype == 1 )THEN
       CALL elastiff(celoc,mat,6)                  !get elastic stiffnes matrix 4=plain stress + transverse shear
     ELSE
       CALL elastiff(celoc,mat,4)                  !get elastic stiffnes matrix 4=plain stress + transverse shear
     END IF
     ce(1:4) = celoc((/1,2,3,5/))                !
     thickl = rprop(1,il)                        !layer thickness
     g1 = thickl*thickl/12d0                     !auxiliar h^2/12
     zl = zl+thickl/2d0                          !update Z position to layer mid-point z_k-bar
     rprop(2,il) = zl                            !keep
     f1 = (phi(il) + phi(il-1))/2d0          !phi_k-bar 1
     f2 = beta(il)*zl                        !beta*zk
     im(0) = im(0) + thickl*mat%prope(5)*(zl**2+g1)              !rotatory inertia
     im(1) = im(1) + thickl*mat%prope(5)*( (zl**6+15*zl**4*g1+27*zl**2*g1**2+27/7*g1**3)*w0*w0    &    !additional rotatory inertia
                                         + (zl**5+10*zl**3*g1+9*zl*g1**2)*2*w0*x0                 &
                                         + (zl**4+6*zl**2*g1+9/5*g1**2)*x0*x0                     &
                                         - (f1*zl*(zl**2+3*g1)+3*beta(il)*g1*(zl**2+3*g1/5))*w0*2 &
                                         - (f1*(zl**2+g1)+2*f2*g1)*x0*2                           &
                                         + f1**2+beta(il)**2*g1)
     ce = ce*thickl                              !scale layer stiffness matrix
     !SCF for shear correction factors in 3 sublayers
     den = thickl/ce(4)*thickl/3d0      !SCFV h/3 / G13
       zk = zl - thickl/3d0             !SCFV mid point of first "sublayer"
       ga = ga - ce(1)/3d0*(zk-za)      !SCFV g_alpha(z)
       ia = ia + ga**2*den              !SCFV
       zk = zk + thickl/3d0             !SCFV
       ga = ga - ce(1)/3d0*(zk-za)      !SCFV g_alpha(z)
       ia = ia + ga**2*den              !SCFV
       zk = zk + thickl/3d0             !SCFV
       ga = ga - ce(1)/3d0*(zk-za)      !SCFV g_alpha(z)
       ia = ia + ga**2*den              !SCFV
     da = da + ce(4)                    !SCFV  => Dt so it is unnecessary
     ra = ra + ce(1)*((zl-za)**2 + g1)  !SCFV g1= thickl*thickl/12d0
     !
     !  components of the integrated stiffness matrix
     !             1  2  8  9     13
     !             2  3 10 11     14                     | 1  2     |
     !             8 10  4  5     15                Ce = | 2  3     |
     !             9 11  5  6     16                     |       4  |
     !                          7     18
     !            13 14 15 16     12
     !                         18     17
     !standard part
     de( 1: 3) = de( 1: 3) + ce(1:3)               !membrane part
     de( 4: 6) = de( 4: 6) + ce(1:3)*(zl*zl+g1)    !bending part
     de(    7) = de(    7) + ce(4)                 !shear part
     de( 8: 9) = de( 8: 9) + ce(1:2)*zl            !coupled part (Sign changed)
     de(10:11) = de(10:11) + ce(2:3)*zl            !coupled part (Sign changed)
     ! Dp(1,1)  phi^T Dk phi                       !12
     f11 =   (zl**6+15*zl**4*g1+27*zl**2*g1**2+27/7*g1**3)*w0*w0    &
           + (zl**5+10*zl**3*g1+9*zl*g1**2)*2*w0*x0                 &
           + (zl**4+6*zl**2*g1+9/5*g1**2)*x0*x0                     &
           - (f1*zl*(zl**2+3*g1)+3*beta(il)*g1*(zl**2+3*g1/5))*w0*2 &
           - (f1*(zl**2+g1)+2*f2*g1)*x0*2                           &
           + f1**2+beta(il)**2*g1
     de(12) = de(12) + ce(1)*f11
     ! Dp(1,3)                                     !13
                                                   !14
     f11 = - (zl**2+g1)*x0 - (zl**3+3*zl*g1)*w0  + f1
     de(13) = de(13) + ce(1)*f11
     de(14) = de(14) + ce(2)*f11
     !Dp(2,3)                                      !15
                                                   !16
     f11 = - (zl**3+3*zl*g1)*x0 - (zl**4+6*zl**2*g1+9/20*g1**2)*w0  + f1*zl+beta(il)*g1
     de(15) = de(15) + ce(1)*f11                  !(Sign changed)
     de(16) = de(16) + ce(2)*f11                  !(Sign changed)
     ! Dt(1,1)                                     !17
     f11 =   9*(zl**4+6*zl**2*g1+9/20*g1**2)*w0**2    &
           + 12*(zl**3+3*zl*g1)*w0*x0                 &
           + (zl**2+g1)*(4*x0**2-6*beta(il)*w0)       &
           - 4*zl*x0*beta(il)                         &
           + beta(il)**2
     de(17) = de(17) + ce(4)*f11
     ! Dt(1,2)                                     !18
     f11 = - 2*zl*x0 - 3*(zl**2+g1)*w0 + beta(il)
     de(18) = de(18) + ce(4)*f11
     !
     zl = zl+thickl/2d0                          !update Z position to layer interface
   END DO
   IF( compute )THEN
      CALL listen('SHREV3')  !read a line
      stren = getrea('STRENG',0.D0,'!LAYER MAXIMUN SHEAR STRESS........')
      frene = getrea('FRENER',0.D0,'!LAYER FRACTURE ENERGY PER UNIT A..')
      sec%rprop(3) = getrea('MAXDAM',0.D0,'!Maximum Damage ...................') !maximum damage
      zl = -thick/2d0
      DO il=1,lcomp-1
        thickl = rprop(1,il)                        !layer thickness
        zl = zl + thickl
      END DO
      ! THE layer
      thickl = rprop(1,lcomp)                   !layer thickness
      zl = zl + thickl/2d0
      imat= sec%iprop(5+lcomp)                   !material index
      mat => pmats(imat)%p                    !point to material
      IF( ntype == 1 )THEN
        CALL elastiff(celoc,mat,6)                  !get elastic stiffnes matrix 4=plain stress + transverse shear
      ELSE
        CALL elastiff(celoc,mat,4)                  !get elastic stiffnes matrix 4=plain stress + transverse shear
      END IF
      g1 = +celoc(5)                                ! layer modulus
      f1 = - 2*zl*x0 - 3*zl**2*w0 + beta(lcomp)     ! derivative
      sec%rprop(27) = f1+1d0                        ! keep function derivative + 1
      sec%rprop(28) = g1                            ! keep modulus
      frene = frene/thickl                          ! fracture energy per unit volume
      sec%rprop(29) = stren/g1                      ! maximumm elastic strain
      sec%rprop(30) = 2d0*frene*g1/stren**2         ! constant A
      IF( sec%rprop(30) < 2.d0 )THEN
        WRITE(lures,"(10x,'WARNING Fracture energy may be to low,',/, &
              &       10x,'Constant A increased from ',f10.4,' to 2')")sec%rprop(30)
        sec%rprop(30) = 2d0
      END IF
   END IF
   WRITE(58,"(' phi and Beta Values')")
   zl = -thick/2d0                            !bottom
   WRITE(58,"('x0 =',e16.8,'W0 =',e16.8)")x0,w0
   WRITE(58,"(2e16.8)")zl,phi(0)
   !WRITE(58,"(2e16.8)")zl,phi(0)-x0*zl**2-w0*zl**3
   DO il=1,nlayr
     thickl = rprop(1,il)                        !layer thickness
     zl = rprop(2,il)                            !update Z position to layer interface
     !WRITE(58,"(4e16.8)")zl+thickl/2d0,phi(il)-x0*zl**2-w0*zl**3, zl,beta(il)-2*x0*zl-3*w0*zl**2
     WRITE(58,"(4e16.8)")zl+thickl/2d0,phi(il), zl,beta(il)
   END DO
   WRITE(58,"(' Integrated D matrices')")
   WRITE(58,"(5e15.8)")de*width
   !WRITE(58,"(' Integrated Inertias')")
   !WRITE(58,"(5e15.8)")im
 ELSE
   fastr = .FALSE.
   CALL rdfrre('SC_SHREV3',de,il,18,fastr)
   CALL rdfrre('SC_SHREV3',im,il,2,fastr)
 END IF
 sec%rprop(6:23) = de*width                          !keep integrated matrix
 sec%rprop(25:26) = im*width                         !keep integrated inertias
 ! ESTOY INCLUYENDO LAS FUNCIONES PHI Y SUS DERIVADAS BETA
 CALL vecasi (nlayr+3,phi(-2),sec%rprop(31))      !keep phi
 k =  33+nlayr+1
 CALL vecasi (nlayr,beta(1),sec%rprop(k))         !keep beta
 k = k+nlayr
 CALL vecasi (2*nlayr,rprop,sec%rprop(k))      !keep initial data
 k = k+2*nlayr
 CALL vecasi (nlayr+1,fs,sec%rprop(k))         !keep ad-hoc functions
 zl = -thick/2d0                            !bottom
 DO il=0,nlayr
   !WRITE(58,"(3e16.8)")zl,fs(il)
   IF( il < nlayr) zl = zl+rprop(1,il+1)     !update Z position to next layer interface
 END DO
 DEALLOCATE( fs,gv)
 ! shear correction factors according to VLACHOUTSIS (better)
 ga = ra**2/de(7)/ia
 WRITE(lures,"(' SHEAR CORRECTION FACTORS ',/,' Kx: ',f12.7)")sec%rprop(24)
 WRITE(lures,"('  FACTORS ',/,' R1: ',E15.5)")ra
 WRITE(lures,"('  FACTORS ',/,' I1: ',E15.5)")Ia
 WRITE(lures,"('  FACTORS ',/,' d1: ',E15.5)")de(7)
 WRITE(lures,"(' VLACHOUTSIS SHEAR CORRECTION FACTORS ',/,' Kx: ',f12.7)")ga

 sec%rprop(24)=  ga

 !  end of computation of shear correction factors
 DEALLOCATE (rprop,phi,beta)                 !release local memory
 sec%secdef(3) =  5        !GENERAL orthotropic with COUPLING including delamination

 ! Additional postprocess variables --------------------------------------------
 sec%secdef(4) = 2  !2 variables
 sec%secdef(5) = 2  !2 values

 ALLOCATE(var1,var2)  ! new variables

 var1%type = 0
 var1%dim = 1
 var1%name(:) = (/ 'Phi_Moment','Phi_Mxx',' ',' ',' ',' ',' ' /)

 var2%type = 0
 var2%dim = 1
 var2%name(:) = (/ 'Phi_Shear','Phi_Shear_X',' ',' ',' ',' ',' ' /)

 sec%postp => var1   !keep pointer to first variable
 var1%next => var2
 NULLIFY (var2%next)


 RETURN
 END SUBROUTINE sc_shre3
