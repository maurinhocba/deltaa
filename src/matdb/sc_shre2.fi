 SUBROUTINE sc_shre2( sec )
 !            --------------------------------
 !            input material properties for multi-layered lamina
 !            Total Lagrangean Shear deformable elements
 !            shear deformable 2-D shell/beam (SHREV)
 !
 !  iprop: 1 :nlayr
 !         2 :nvars:  number of internal variables for the whole laminate (NOT YET)
 !         3 :0  elastic lamina,  1:inelastic   (0 ELASTIC ONLY)
 !         4 :0 No additional DOFs  1 RZT  2: TRIG  trigonometric shear deformation theory
 !    5:4+nl :associated material label to each layer
 !
 !  rprop  1 : thick
 !         2 : mean young modulus
 !         3 : mean density
 !         4 : width  for 2-D Beam Element
 !         5 : surface density
 !      6-16 : (11) Standard integrated elasticity matrix
 !     17-21 : ( 5) in-plane integrated matrices associated with additional DOFs (RZT or other)
 !     22-23 : ( 2) transverse integrated matrices associated with additional DOFs (RZT or other)
 !
 !             E1E2 M1 M2 Q1 Mf QF
 !             6  7 13 14    18
 !                8 15 16    19
 !                   9 10    20
 !                     11    21
 !                        12    23
 !                           17
 !                              22
 !
 !        24 : shear factor (5/6 is the standard value)
 !     25:26 : inertia values
 !    nl+1 : phi (zig-zag) functions
 !    nl   : Beta (zig-zag derivative) values
 !    nl+1 : ad-hoc functions to distribute shear due to eta-strain
 !      For each layer (npt values)
 !          1: layer thickness
 !          2: layer z coordinate
 !

 ! SCF below is for Shear Correction Factor

 USE ctrl_db, ONLY : ntype
 IMPLICIT NONE
 TYPE (section), POINTER :: sec

 ! material types allowed for this section
 INTEGER (kind=4), PARAMETER :: npl = 9     !number of real values per layer
 INTEGER (kind=4), PARAMETER :: matsa(2) = (/1,5/)  ! material types allowed for this section
 INTEGER (kind=4) matno,nlayr,ith,il,sizer,sizei,imat,k,inter,i0,i,ii
 INTEGER (kind=4) nvars,kvar
 REAL(kind=8) :: thick,width,youn,dens,thickl,de(18),zl,celoc(6),gi,g1,g2,     &
                 f11,f1,f2,sf,thicks,dq,im(0:1),ce(4),                         &
                 dbi(2,2),db(2,2),h,a(2,2),d1,cz(2,2),det,csi,v1,v2,v3,vo,xa,xb,xc

 LOGICAL :: found,read_integrated_matrix,fastr,rzt
 REAL(kind=8) :: za,ia,ra,ga,da,den,zk,pi,pih    !for shear factors computation
 REAL(kind=8), ALLOCATABLE :: rprop(:,:),phi(:),beta(:),as(:,:),gv(:),fs(:)
 TYPE (mater), POINTER :: mat
 TYPE (postv), POINTER :: var1,var2 !pointers to postprocess variables


 sec%secty = 44         !Lminated shell of revolution
 sec%mabas = -1         ! flag to indicate that no unique associated material exist

 CALL listen('SHREV2')  !read a line


 sizer = 26             ! minimum size of real array
 thick = getrea('THICK ',0.D0,' Thickness ........................')
 if( ntype == 1 )THEN
   width = getrea('WIDTH ',1d0,' Width for 2-D Beam Element........')
 ELSE
   width = 1d0
 END IF
 IF( thick > 0d0 ) THEN
   ith=1 ! thickl will be input as a percentage of thick
 ELSE
   ith=0 ! thickl will be input as a Real dimension
 END IF
 thicks = 0d0 !initializes thickness to check
 nlayr  = getint('NLAYR ',   0,'!NUMBER OF LAYERS .................')
 IF ( nlayr <= 0) CALL runend('SHREV2: VERIFY NUMBER OF LAYERS ')
 sizei =  4+nlayr*2                !size of integer array
 ALLOCATE (sec%iprop(sizei), rprop(2,nlayr) )
 sec%iprop = 0   !initializes
 rprop = 0d0     !initializes
 sf = getrea('SHEARF',0.00000D0,' Shear Factor .....................') !for FSDT
 IF( sf == 0D0 )THEN
   WRITE(lures,"(/,' Computed Shear Correction Factors will be used',/)")
 ELSE
   WRITE(lures,"(/,' Data Shear Correction Factors will be used',/)")
 END IF
 read_integrated_matrix = exists('READMA')

 sec%iprop(4)  = getint('INTERP',   0,' Interpolation function ...........')
 inter = sec%iprop(4)
 SELECT CASE (inter)
   CASE(0)
      WRITE(lures,"(/,' N O   A D D I T I O N A L   D O F s ',/)")
   CASE(1)
      WRITE(lures,"(/,' R E F I N E D   Z I G Z A G   A P P R O A C H',/)")
   CASE(2)
      WRITE(lures,"(/,' T R I G O N O M E T R I C   A P P R O A C H',/)")
   CASE(3)
      WRITE(lures,"(/,' RZT + cuadratic and cubic smeared approach ',/)")
      CALL runend('SHREV2: Use SHREV3 for RZT-3')

 END SELECT
 rzt = inter == 1 .OR. inter == 3

 youn = 0d0            !Initializes mean young modulus
 dens = 0d0            !Initializes mean density
 ii  = 5               !pointer to integer array
 kvar=1                !pointer to layer internal variables
 gi = 0d0              !average values of trasnverse modulus
 im = 0d0              !rot inertia

 za = 0d0              !SCFV initializes for neutral surface computation NUM
 den = 0d0             !SCFV DEN

 DO il=1,nlayr         !for each layer
   ! read layer information
   CALL listen('SHREV2')  !read a line
   matno    = getint('NUMAT ', 1 ,'!Associated Material ..............')
   CALL mat_search(matno,found,mat,imat)        !search base material
   IF(.NOT.found) CALL runend ('SHREV2: NOT FOUND ASSOCIATED MATERIAL ')
   IF( .NOT.ANY( mat%mtype == matsa) ) &  !check if base material is correct
            CALL runend('SHREV2: Invalid material association')
   sec%iprop(ii)       = imat     !store associated material index (in PMATS)
   sec%iprop(ii+nlayr) = kvar     !pointer to layer varin (internal variables)
   IF(ith == 0) THEN   !thicknes must be computed
     thickl = getrea('THICKL',1.D0,'!LAYER THICKNESS ..................')
     thick  = thick + thickl         ! sum layer thickness
   ELSE                !thickness is known
     thickl = getrea('THICKL',1.D+2/nlayr,' LAYER THICKNESS ( % ).............')
     thickl = thick * thickl *1.D-2   ! compute layer thickness
   END IF
   thicks = thicks + thickl           !to check and present position
   youn = youn + thickl*mat%prope(1)  !mean young modulus
   dens = dens + thickl*mat%prope(5)  !surface density
   rprop(1,il) = thickl               !store layer thickness (real dimension)
   !get required internal variables increment
   !kvar = kvar + get_nvar(mat,1)  !1: plane stress
   !compute average values
   SELECT CASE (mat%mtype)
   CASE(1)   !isotropic
     gi = gi+thickl/mat%prope(3)             ! Int 1/G
     da = mat%prope(1)                       !SCFV E/(1-nu^2)
     IF( ntype /= 1 )da = da/(1d0-mat%prope(2)**2)    !SCFV E/(1-nu^2)
   CASE(5)   !orthotropic
     g1 = mat%prope(13)                                              !RZT G12
     gi = gi+thickl/g1                                               !RZT
     !SCF use plane stress orthotropic matrix from database (prope(16:19)
     IF( ntype == 1 ) THEN
       da = mat%prope(7)                                              !SCFV E1
     ELSE
       da = mat%prope(16)                                              !SCFV D11
     END IF
   END SELECT
   den = den + da*thickl                             !SCFV
   za  = za  + da*thickl*(thicks-thickl/2d0)         !SCFV
   ii = ii+1                           !updates pointer to integer array
 END DO
 IF( ith == 1 .AND. ABS(thicks/thick - 1d0) > 0.001 )THEN
   WRITE(lures,"(' layers thickness sums',f8.4,'%')")thicks/thick*1d2
   CALL runend('SHREV2: Sum of layers /= 100%')
 END IF
 IF( inter > 0 )THEN
   gi = thick/gi
   za = za/den - thick/2d0  !SCFV neutral surface position (from mid surface)

   ALLOCATE (phi(0:nlayr),beta(nlayr))
   phi(0) = 0d0
   !      For each layer (2 values)
   !          1: layer thickness
   !          2: layer z coordinate
   sizer = sizer+(nlayr+1)                ! include zig-zag functions
   sizer = sizer+nlayr                    ! include zig-zag functions derivatives
   sizer = sizer+nlayr*2                  !update size of real array
 END IF
 nvars = kvar-1                         !number of internal variables
 sec%iprop(1) = nlayr                   !keep number of layers
 sec%iprop(2) = nvars                   !set total number of internal variables
 sec%iprop(3) = 0                       !initializes to elastic lamina

 !IF( nvars > 0 )THEN      ! if internal variables exist
 !  sec%iprop(3) = 1                     !set to plastic lamina
 !END IF
 sec%secdef = (/ sizei,sizer, 5,0,0 /)  !size of arrays
 ALLOCATE (sec%rprop(sizer) )           !get memory
 sec%rprop = 0d0                        !initializes
 sec%rprop(1) = thick                   !thickness
 sec%rprop(2) = youn/thick              !mean young modulus
 sec%rprop(3) = dens/thick              !mean density
 sec%rprop(4) = width                   !keep width for beams
 sec%rprop(5) = dens*width              !surface density
 sec%rprop(24) = sf                     !keep shear factor

 IF(.NOT.read_integrated_matrix)THEN
   ga = 0d0 ; ia = 0d0 ; da = 0d0 ; ra = 0d0  !SCFV initializes arrays
   ! compute elastic integrated matrix
   de = 0d0                                   !initializes through the thickness integrated matrix
   zl = -thick/2d0             !initializes Z position at bottom surface
   pi = 4d0*ATAN(1d0)   !pi
   pih= pi/thick        !pi/h
   DO il=1,nlayr                           !for each layer
     imat= sec%iprop(4+il)                   !material index
     mat => pmats(imat)%p                    !point to material
     ! celoc(1:4) in plane values  celoc(5:6) shear values
     IF( ntype == 1 )THEN
       CALL elastiff(celoc,mat,6)     !get elastic stiffnes matrix 6= 1D + transverse shear
     ELSE
       CALL elastiff(celoc,mat,4)     !get elastic stiffnes matrix 4=plain stress + transverse shear
     END IF
     ce(1:4) = celoc((/1,2,3,5/))                !
     thickl = rprop(1,il)                        !layer thickness
     g1 = thickl*thickl/12d0                     !auxiliar h^2/12
     zl = zl+thickl/2d0                          !update Z position to layer mid-point z_k-bar
     rprop(2,il) = zl                            !keep
     im(0) = im(0) + thickl*mat%prope(5)*(zl**2+thickl**2/12d0)              !rotatory inertia
     SELECT CASE (inter)
     CASE (0)                      !FSDT
     CASE (1)                      !Refined ZigZag Theory
       beta(il) = gi/ce(4) - 1d0
       phi(il) = phi(il-1) + beta(il)*thickl
       f1 = (phi(il) + phi(il-1))/2d0          !phi_k-bar 1
      ! may be not integrated correctly
      im(1) = im(1) + thickl*mat%prope(5)*(f1**2+(beta(il)*thickl)**2/12d0)   !additional rotatory inertia
   CASE (2)                       !trigonometric approah
       phi(il) = thick*SIN(pih*(zl+thickl/2d0))/2d0-(zl+thickl/2d0)   !interpolation function at upper surface
       beta(il) = pi*COS(pih*zl)/2d0-1d0                              !interpolation fucntion derivative at the layer
       f1 = phi(il)                                                   !phi_k-bar 1
      ! may be not integrated correctly
       im(1) = im(1) + thickl*mat%prope(5)*(f1**2+(beta(il)*thickl)**2/12d0)   !additional rotatory inertia
     END SELECT
     ! ???
     ce = ce*thickl                              !scale layer stiffness matrix
     !SCF for shear correction factors in 3 sublayers
     den = thickl/ce(4)*thickl/3d0            !SCFV h/3 / G13
       zk = zl - thickl/3d0             !SCFV mid point of first "sublayer"
       ga = ga - ce(1)/3d0*(zk-za)      !SCFV g_alpha(z)
       ia = ia + ga**2*den              !SCFV
       zk = zk + thickl/3d0             !SCFV
       ga = ga - ce(1)/3d0*(zk-za)      !SCFV g_alpha(z)
       ia = ia + ga**2*den              !SCFV
       zk = zk + thickl/3d0             !SCFV
       ga = ga - ce(1)/3d0*(zk-za)      !SCFV g_alpha(z)
       ia = ia + ga**2*den              !SCFV
     da = da + ce(4)                    !SCFV  => Dt so it is unnecessary
     ra = ra + ce(1)*((zl-za)**2 + g1)  !SCFV g1= thickl*thickl/12d0
     !
     !  components of the integrated stiffness matrix
     !             1  2  8  9     13
     !             2  3 10 11     14                     | 1  2     |
     !             8 10  4  5     15                Ce = | 2  3     |
     !             9 11  5  6     16                     |       4  |
     !                          7     18
     !            13 14 15 16     12
     !                                17
     !standard part
     de( 1: 3) = de( 1: 3) + ce(1:3)               !membrane part
     de( 4: 6) = de( 4: 6) + ce(1:3)*(zl*zl+g1)    !bending part
     de(    7) = de(    7) + ce(4)                 !shear part
     de( 8: 9) = de( 8: 9) + ce(1:2)*zl            !coupled part
     de(10:11) = de(10:11) + ce(2:3)*zl            !coupled part
     IF( inter > 0 )THEN
       ! Dp(1,1)  phi^T Dk phi                       !12
       f11 = f1*f1+beta(il)**2*g1                    !
       de(12) = de(12) + ce(1)*f11
       ! Dp(1,3)       Dk Phi                        !13
                                                     !14
       de(13) = de(13) + ce(1)*f1
       de(14) = de(14) + ce(2)*f1
       !Dp(2,3)     z Dk Phi                         !15
       f11 = f1*zl+beta(il)*g1                       !16
       de(15) = de(15) + ce(1)*f11
       de(16) = de(16) + ce(2)*f11
       ! Dt(1,1)                                     !17
       f1 = beta(il)                               !
       f11 = f1*f1
       de(17) = de(17) + ce(4)*f11
       ! Dt(1,2)                                     !18
       de(18) = de(18) + ce(4)*f1                    !
     END IF
     !
     zl = zl+thickl/2d0                          !update Z position to layer interface
   END DO
   IF(rzt)THEN
     WRITE(58,"(' phi and Beta Values')")
     zl = -thick/2d0                            !bottom
     WRITE(58,"(2e16.8)")zl,phi(0)
     DO il=1,nlayr
       thickl = rprop(1,il)                        !layer thickness
       zl = zl+thickl/2d0                          !update Z position to layer interface
       WRITE(58,"(15x,2e16.8)")zl,beta(il)
       zl = zl+thickl/2d0                          !update Z position to layer interface
       WRITE(58,"(2e16.8)")zl,phi(il)
     END DO
   ELSE IF( inter == 2 )THEN
     WRITE(58,"(2e16.8)")(phi(il),il=1,nlayr)
     WRITE(58,"(5x,2e16.8)")(beta(il),il=1,nlayr)
   END IF
   WRITE(58,"(' Integrated D matrices')")
   WRITE(58,"(5e15.8)")de*width
   WRITE(58,"(' Integrated Inertias')")
   WRITE(58,"(5e15.8)")im*width
 ELSE
   fastr = .FALSE.
   CALL rdfrre('SC_SHREV2',de,il,18,fastr)
   CALL rdfrre('SC_SHREV2',im,il,2,fastr)
 END IF
 sec%rprop(6:23) = de*width                          !keep integrated matrix
 sec%rprop(25:26) = im*width                         !keep integrated inertias
 !
 IF( inter == 0 ) RETURN   !no SCF computed
 CALL vecasi (nlayr+1,phi,sec%rprop(27))      !keep phi
 k =  27+nlayr+1
 CALL vecasi (nlayr,beta,sec%rprop(k))         !keep beta
 k = k+nlayr
 CALL vecasi (2*nlayr,rprop,sec%rprop(k))      !keep initial data
! !
! !  compute Shear correction factors
! ! recover Db and Invert it
! db(:,1) = sec%rprop( 9:10)       ; db(:,2) = sec%rprop(10:11)
! CALL invmtx(db,dbi,det,2)     ! (Db)^-1 ==> Dbi
! h = 0d0                       ! initializes integrated matrix
! dq = 0d0                      ! initializes D1(z).Q
! zl = -thick/2d0               !initializes Z position at bottom surface (this is true for symmetric laminates only)
! DO il=1,nlayr                           !for each layer
!   imat= sec%iprop(4+il)                   !material index
!   mat => pmats(imat)%p                    !point to material
!   thickl = rprop(1,il)                          !layer thickness
!   CALL elastiff(celoc,mat,4)              !get elastic stiffnes matrix 4=plain stress
!   cz(:,1) = celoc(1:2) ; cz(:,2) = celoc(2:3)
!   a = MATMUL(cz,dbi)*thickl
!   d1 =  a(1,1)
!   csi = 1d0 /celoc(5)
!   DO k=1,5  !use five-point integration for each layer
!     zl = zl+thickl/10.                         !update Z position to layer mid-point z_k-bar
!     dq = dq-zl/2d0*d1/5d0                      !
!     h  = h + dq*csi*dq*thickl/5d0
!     zl = zl+thickl/10.                         !update Z position to layer mid-point z_k-bar
!   END DO
! END DO                                   ! z = layer midpoint
! csi = 1d0/h
! sec%rprop(24) = csi/ce(4)
 ! shear correction factors according to VLACHOUTSIS (better)
 ga = ra**2/de(7)/ia
 WRITE(lures,"(' SHEAR CORRECTION FACTORS ',/,' Kx: ',f12.7)")sec%rprop(24)
 WRITE(lures,"('  FACTORS ',/,' R1: ',E15.5)")ra
 WRITE(lures,"('  FACTORS ',/,' I1: ',E15.5)")Ia
 WRITE(lures,"('  FACTORS ',/,' d1: ',E15.5)")de(7)
 WRITE(lures,"(' VLACHOUTSIS SHEAR CORRECTION FACTORS ',/,' Kx: ',f12.7)")ga

 IF( sf == 0d0) sec%rprop(24)=  ga

 !  end of computation of shear correction factors
 DEALLOCATE (rprop,phi,beta)                 !release local memory

 ! Additional postprocess variables --------------------------------------------
 sec%secdef(4) = 2  !2 variables
 sec%secdef(5) = 2  !2 values

 ALLOCATE(var1,var2)  ! new variables

 var1%type = 0
 var1%dim = 1
 var1%name(:) = (/ 'Phi_Moment','Phi_Mxx',' ',' ',' ',' ',' ' /)

 var2%type = 0
 var2%dim = 1
 var2%name(:) = (/ 'Phi_Shear','Phi_Shear_X',' ',' ',' ',' ',' ' /)

 sec%postp => var1   !keep pointer to first variable
 var1%next => var2
 NULLIFY (var2%next)


 RETURN
 END SUBROUTINE sc_shre2
