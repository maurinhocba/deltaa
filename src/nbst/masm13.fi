 SUBROUTINE masm13(ndime,nnode,heade,emass,mass,sumat,lumpd,ifpre)
 IMPLICIT NONE
 LOGICAL, INTENT(IN) :: lumpd
 INTEGER (kind=4), INTENT(IN) :: ndime,nnode,ifpre(:,:)
 REAL (kind=8), INTENT(IN OUT) :: emass(:,:),sumat,mass(:)
 TYPE( ele13 ), POINTER :: heade

 INTEGER (kind=4) :: inode,lnode,idofn,lm(3,3),isec,osec
 REAL (kind=8) :: diag,outd,suma,voli,rhoel,ms(45),thick,sume1
 TYPE( ele13 ), POINTER :: e
 TYPE (section), POINTER :: sec

 IF(.NOT.lumpd)ms = 0d0
 sume1=0.
 osec = -1
 e => heade
 DO
   IF( .NOT.ASSOCIATED (e) )EXIT
   suma=0.
   isec = e%matno                    !associated material
   IF( isec /= osec )THEN
     sec => psecs(isec)%p
     IF( sec%secty == 12 )THEN
       thick = sec%rprop(1)                !shell thickness
       rhoel = sec%mtbas%prope(5)*thick    !surface density
     ELSE
       rhoel = sec%rprop(5)                !surface density
     END IF
     osec = isec
   END IF
   voli = e%area1*rhoel
   suma = suma + voli
   diag = voli/3d0

   !---generates lumped mass matrix proportional to diagonal

   DO inode=1,nnode
     lnode = e%lnods(inode)
     DO idofn=1,ndime
       emass(idofn,lnode)=emass(idofn,lnode)+diag
     END DO
   END DO
   sume1 = sume1 + suma
   IF(.NOT.lumpd)THEN  !consistent mass matrix
     diag = diag/2d0
     outd = diag/2d0
     !diagonal terms
     ms( 1) = diag
     ms(10) = diag
     ms(18) = diag
     ms(25) = diag
     ms(31) = diag
     ms(36) = diag
     ms(40) = diag
     ms(43) = diag
     ms(45) = diag
     !out diagonal terms
     ms( 4) = outd
     ms( 7) = outd
     ms(13) = outd
     ms(16) = outd
     ms(21) = outd
     ms(24) = outd
     ms(28) = outd
     ms(34) = outd
     ms(39) = outd
     lm(1:3,1:3) = ifpre(1:3,e%lnods(1:3))
     CALL ensmat(9,lm(1,1),ms(1),mass(1))
   END IF
   e => e%next
 END DO
 !IF(iwrit == 1) &
 WRITE(lures,"(//'  total mass for shell element :', e15.7)")sume1
 sumat = sumat + sume1
 RETURN
 END SUBROUTINE masm13
