 SUBROUTINE resv04i( heade, coora, resid, ierr, small, ngaus, beta)
 !-------------------------------------------------------------------
 !
 !          EVALUATION OF INTERNAL FORCES ELEMENT T-L 3-D SOLID
 !
 !-------------------------------------------------------------------
 USE ele18_db, ONLY : lgst18
 USE npo_db, ONLY : coord, coori  !original coordinates & at previous iteration
 IMPLICIT NONE

 ! dummy arguments
 INTEGER (kind=4), INTENT(OUT) :: ierr        !flag for error detection
 INTEGER (kind=4), INTENT(IN) :: ngaus        !number of integration points
 REAL(kind=8),INTENT (IN) :: coora(:,:),    & !present coordinates
                             beta(:)          !stabilization factors
 REAL(kind=8),INTENT (IN OUT) :: resid(:,:)       !internal nodal forces
 TYPE (ele04), POINTER  :: heade              !pointer to first element
 LOGICAL, INTENT(IN) :: small

 ! local variables
 INTEGER (kind=4), PARAMETER :: ndime=3
 ! variables for assumed strain transverse shear
 REAL (kind=8) :: tas(3,4),      & ! der x/x_3 at Assumed Strain points
                  gas(3,4),      & ! der x/tan at Assumed Strain points
                  vas(4,2),va(4)   ! strains at Assumed Strain Points
 TYPE (ele04), POINTER :: e      !pointer to an element data
 LOGICAL :: newmt      ! TRUE if material constant computation necessary
 INTEGER (kind=4) :: osec,     & !associated material of previous element
                     ndofe       !number of DOFs
 REAL (kind=8) ::  km,gm         !bulk modulus and shear modulus

 INTEGER (kind=4) ielem,             & !element number
                  isec,              & !associated material
                  flag,              & !flag for eigen-decomposition
                  i,ii,jj,j,g,n        !different indexes

 INTEGER (kind=4) oldm        !old material label

 REAL (kind=8) staux(6),   & !local streses auxiliar
               sig(6),str(6),  & !stresses (different measures)
               stran(6),   & !C=U^2  also Log strains
               aux,voli,   & !auxiliar value
               r(3,3),lb(3),& !eigen-pair in local system
               delta         !volumetric strain/3, element volume
 REAL (kind=8) f3(3),c3(nstre),fac, &  !EAS
               d33,d33z,seq(11),deq(11),ralpha,stm,sts,stab,ka
 REAL (kind=8) :: u(ndime,nnode),          &  !incremental displacements
                  x0(ndime,nnode),         &  !element coordinates (original)
                  x(ndime,nnode),          &  !element coordinates
                  rl(ndime,nnode),         &  !nodal internal equivalent forces
                  cq(3,2)                     !average metric tensor at each face
 REAL (kind=8) :: tq(3,2,4,2),    &  !(ndime,2,3,2) local in-plane deformation gradient at face sides
                  eh(4,2)            !in-plane 12-strains at mid-point sides for stabilization

 REAL (kind=8) :: tas0(3,4),      & ! der x/x_3 at Assumed Strain points
                  gas0(3,4),      & ! der x/tan at Assumed Strain points
                  bs0(3,8,2,2),   &  ! Bs matrix at face centers
                  tq0(3,2,4,2),   &  !(ndime,2,3,2) local in-plane deformation gradient at face sides
                  bq0(3,4,3,2),   &  !(ndime,nnode,3,2) in-plane B-matrix at face centers
                  bm0(12,4,2),    &  !in-plane B12-matrix at mid-point sides for stabilization
                  bh0(24,2,2),    &  !  Stab matrix
                  f30(3),b30(3,nnode),h0(3,nnode)
 REAL (kind=8) :: thf(ngaus), wei(ngaus), sh(3,ngaus), shape(2,ngaus),jac   !thickness gauss integration

 TYPE (section), POINTER :: sec  !pointer to a section data
 TYPE (mater), POINTER   :: mat  !pointer to a material data


 ndofe = ndime*nnode                      ! number of DOFs
 !integration points through the thickness
 CALL gaussq(ngaus,thf(1),wei(1))         ! for example ngaus = 2 thf =+/-0.577  wei = 1
 wei = wei*4d0                            ! 4 is the master element area
 ! compute shape(2,ngaus) to interpolate
 ! compute sh(3,ngaus) to evaluate jacobian
 DO g=1,ngaus
   sh(1,g) = -0.5d0*(1d0-thf(g))*thf(g)  !quadratic 1-D Lagrangian polynomials (for jacobian)
   sh(2,g) =  1d0-thf(g)**2
   sh(3,g) =  0.5d0*(1d0+thf(g))*thf(g)
   shape(1,g) =  0.5d0*(1d0-thf(g))      !linear 1-D Lagrangian polynomials (for interpolation)
   shape(2,g) =  0.5d0*(1d0+thf(g))
 END DO

 !***  Computes nodal internal forces
 osec = -1                           !no previous material
 e => heade                          !point to first element in the list
 DO                                  !loop over all the elements
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel                   !element number
   isec = e%matno                    !associated material
   !     SET MATERIAL CONSTANTS
   newmt = osec /= isec              !same material than previous ?
   IF(newmt)THEN                     !if new material, get properties
     osec = isec                     !keep present material
     sec => psecs(isec)%p             !point to section
     !************************** STANDARD SOLID *****************************************
     !            !Isotropic Elastic - Anisotropic Plastic  ( mtype == 1)
     mat => sec%mtbas                !point to associated material
     km = mat%prope(4)*3d0              ! bulk modulus * 3
     gm = mat%prope(3)                  ! shear modulus
     stm = 8d0*gm*beta(1)               ! membrane stabilization factor
     sts = 4d0/9d0*gm*beta(2)           ! shear stabilization factor
     aux = (km - gm*2d0)/3d0            ! lambda (Lamé parameter)
     c3 = (/ aux,aux,aux+2d0*gm, 0d0,0d0,0d0/)  ! Elastic column 3 of C
     !************************** STANDARD SOLID *****************************************
     oldm = -1                              !recompute constants
     newmt = .FALSE.                        !same material than previous ?

   END IF !newmt

   !****  compute derivatives in spatial configuration
   x0(:,1:nnode) = coord(:,e%lnods(1:nnode))               !spatial (fixed) coordinates
   x(:,1:nnode) = coora(:,e%lnods(1:nnode))                !material (searched) coordinates
   ! compute EAS parameter from incremental displacements
   u(:,1:nnode) = x(:,1:nnode) - coori(:,e%lnods(1:nnode))             !incremental displacements
   e%alpha = e%alpha + DOT_PRODUCT( e%h, RESHAPE(u,(/ ndofe /)))/e%ka  !update EAS parameter
   !
   cq = 0d0  ! initializes average in-plane metric tensor at each face
   DO ii=1,2 ! for each face
     i = 4*ii-3         !first node of the face (1 or 5)
     DO jj=1,4  !for each mid side point
       tq(:,1:2,jj,ii) = MATMUL(x(:,i:i+3),e%cdq(1:4,1:2,jj,ii))
       tq0(:,1:2,jj,ii) = MATMUL(x0(:,i:i+3),e%cdq(1:4,1:2,jj,ii))      !fixed local system
       ! add to averaged d tensor
       cq(1,ii) = cq(1,ii) + DOT_PRODUCT(tq(:,1,jj,ii),tq(:,1,jj,ii))*e%area(jj,ii) !d11
       cq(2,ii) = cq(2,ii) + DOT_PRODUCT(tq(:,2,jj,ii),tq(:,2,jj,ii))*e%area(jj,ii) !d22
       eh(jj,ii) =           DOT_PRODUCT(tq(:,1,jj,ii),tq(:,2,jj,ii))               !eh12
       cq(3,ii) = cq(3,ii) + eh(jj,ii)*e%area(jj,ii)                                !d12
     END DO
     eh(:,ii) =  eh(:,ii) - cq(3,ii)  !hourglass strains
     !compute transverse shear strain components
     tas(:,:)  = MATMUL(x, e%nfdas(:,:,ii))  !der X/x_3  at the 4 sides
     tas0(:,:) = MATMUL(x0,e%nfdas(:,:,ii))  !der X/x_3  at the 4 sides
     IF( ii == 1 )THEN
       gas(:,1) = (x(:,4) -x(:,1))/2d0 !point A der X/eta
       gas(:,2) = (x(:,2) -x(:,1))/2d0 !point B der X/xita
       gas(:,3) = (x(:,3) -x(:,2))/2d0 !point C der X/eta
       gas(:,4) = (x(:,3) -x(:,4))/2d0 !point D der X/xita
       !
       gas0(:,1) = (x0(:,4) -x0(:,1))/2d0 !point A der X/eta
       gas0(:,2) = (x0(:,2) -x0(:,1))/2d0 !point B der X/xita
       gas0(:,3) = (x0(:,3) -x0(:,2))/2d0 !point C der X/eta
       gas0(:,4) = (x0(:,3) -x0(:,4))/2d0 !point D der X/xita
       CALL bsma04(gas0,tas0,e%nfdas(:,:,1),bs0(:,:,:,1),e%jacin(:,:,1),1,bh0(:,:,1))     !compute B_s matrix at sampling points
     ELSE
       gas(:,1) = (x(:,8) -x(:,5))/2d0 !point A der X/eta
       gas(:,2) = (x(:,6) -x(:,5))/2d0 !point B der X/xita
       gas(:,3) = (x(:,7) -x(:,6))/2d0 !point C der X/eta
       gas(:,4) = (x(:,7) -x(:,8))/2d0 !point D der X/xita
       !
       gas0(:,1) = (x0(:,8) -x0(:,5))/2d0 !point A der X/eta
       gas0(:,2) = (x0(:,6) -x0(:,5))/2d0 !point B der X/xita
       gas0(:,3) = (x0(:,7) -x0(:,6))/2d0 !point C der X/eta
       gas0(:,4) = (x0(:,7) -x0(:,8))/2d0 !point D der X/xita
       CALL bsma04(gas0,tas0,e%nfdas(:,:,2),bs0(:,:,:,2),e%jacin(:,:,2),2,bh0(:,:,2))     !compute B_s matrix at sampling points
     END IF
     DO g=1,4  !for each assumed strain point compute X_tan . X_x_3
       va(g) = DOT_PRODUCT(tas(:,g),gas(:,g))
     END DO
     vas(3,ii) =(va(2)+va(4))/2d0                                        !d_xi3
     vas(4,ii) =(va(1)+va(3))/2d0                                        !d_eta3
     vas(1,ii) = e%jacin(1,1,ii)*vas(3,ii)+e%jacin(2,1,ii)*vas(4,ii)     !X_1-X_3
     vas(2,ii) = e%jacin(1,2,ii)*vas(3,ii)+e%jacin(2,2,ii)*vas(4,ii)     !X_2-X_3
     vas(3,ii) = -va(2)+va(4)                                            !d_xi3_H
     vas(4,ii) = -va(1)+va(3)                                            !d_eta3_H
   END DO

   CALL bmat04q(e%cdq,bq0,tq0,bm0,e%area) !in-plane b-matrix at faces and stabilization

   ! EAS
   f3  = MATMUL(x (:,1:nnode),e%cartd)    !h_3 at element center
   f30 = MATMUL(x0(:,1:nnode),e%cartd)    !t_3 at element center
   d33 = DOT_PRODUCT(f3,f3)               !d(3,3) at element center
   DO i=1,nnode
     b30(:,i) = f30*e%cartd(i)             !b(:,3) matrix at element center
   END DO
   !---------------   change sign of hourglass strains
   vas(3:4,:) = -vas(3:4,:)
   eh =  -eh
   !   Gauss point loop
   ! initializes variables to be computed over GP loop
   ralpha = 0d0             !EAS residual
   seq = 0d0                !initializes integrated equivalent stresses
   deq = 0d0                !initializes integrated equivalent D3 vector
   ka = 0d0
   DO g=1,ngaus      !for each Gauss point
     fac = EXP(-2d0*e%alpha*thf(g)) !to compute d33(\zeta)    !
     !interpolate d tensor from lower and upper surfaces
     stran((/1,2,4/)) = shape(1,g)*cq(:,1) + shape(2,g)*cq(:,2)  !in-plane components
     stran(5:6) = +shape(1,g)*vas(1:2,1) + shape(2,g)*vas(1:2,2) !transverse shear components
     d33z = d33*fac                                              ! out-of-plane components
     stran(3) = d33z                                             !V^-2(3,3)
     IF( small )THEN
       flag = 2                   ! no spectral decomposition
     ELSE
       flag = 1                   ! initializes to no spectral decomposition
     END IF
     ! decomponse in volumetric and shear strains (unnecesary but follows the usual stream)
     ! all strains are changed sign here
     IF( small )THEN               !Green Lagrange strains (twice)
       delta = (3d0-SUM(stran(1:3)))/6d0       !volumetric strain /3
       stran(1:3) = 1d0-delta*2d0-stran(1:3)   !shear strains (twice)
       stran(4:6) = -stran(4:6)                !shear strain (twice)
     ELSE   ! Hencky (logarithmic) strains (volumetric and deviatoric parts)
       ! stran = twice the deviatoric strains    Delta = Ln(J)/3
       CALL lgst18(stran,r,lb,'RESVPL',ierr,flag,delta)
       IF( ierr == 1 )THEN
          WRITE(55,"(15i5)",ERR=9999) e%lnods(1:nnode)
          WRITE(55,"(6e12.4)",ERR=9999) stran(1:6)
          WRITE(55,"(3e15.4)",ERR=9999) x
          RETURN !CALL runen3('RESVPL: negative eigenvalues of U^2')
       END IF
       stran(1:6) = -stran(1:6)
       delta = -delta
     END IF
     jac = EXP(3*delta)        !v/v0
     !elastic stresses (Kirchhoff stresses)
     sig = gm*stran                                  !elastic shear stresses
     sig(1:3) = sig(1:3) + delta*km                  !add press to deviatoric stress tensor
     voli = DOT_PRODUCT(sh(:,g),e%dvol)*wei(g)/jac   !gauss point volume
     e%stint(:,g) = sig ! keep Kirchhoff stress for output

     !***   compute Int(B**t*sigma) on element level
     sig = sig*voli          !deformed dvol used

     ! Compute equivalent stresses and constitutive matrix
     seq( 1: 3) = seq( 1: 3) + sig((/1,2,4/))*shape(1,g)    ! bar-S(1)
     seq( 4: 6) = seq( 4: 6) + sig((/1,2,4/))*shape(2,g)    ! bar-S(2)
     seq( 7: 8) = seq( 7: 8) + sig(5:6)      *shape(1,g)    ! Q(1)
     seq( 9:10) = seq( 9:10) + sig(5:6)      *shape(2,g)    ! Q(2)
     seq(11)    = seq(11)    + sig(3)        *fac           ! S33 to compute rl of displacement DOFs
     ! Next to be used to condense Alpha contribution
     staux = c3*d33z*thf(g)*voli
     deq( 1: 3) = deq( 1: 3) + staux((/1,2,4/))*shape(1,g)
     deq( 4: 6) = deq( 4: 6) + staux((/1,2,4/))*shape(2,g)
     deq( 7: 8) = deq( 7: 8) + staux(5:6)      *shape(1,g)
     deq( 9:10) = deq( 9:10) + staux(5:6)      *shape(2,g)
     deq(11)    = deq(11)    + staux(3)*fac
     !deq(11)    = deq(11)    + (staux(3) + sig(3)*2d0*thf(g))*fac
     ! compute  EAS residual and stiffness
     ralpha = ralpha + sig(3)*thf(g)*d33z
     ka = ka + (staux(3) + sig(3)*2d0*thf(g))*d33z *thf(g)

   END DO
   DO i=1,4 !for each face node
     j  = i+4  !for each other face node
     rl(:,i) = seq( 1)*bq0(:,i,1,1) + seq( 2)*bq0(:,i,2,1) + seq( 3)*bq0(:,i,3,1) + &
               seq( 7)*bs0(:,i,1,1) + seq( 8)*bs0(:,i,2,1) +                        &
               seq( 9)*bs0(:,i,1,2) + seq(10)*bs0(:,i,2,2) + seq(11)*b30(:,i)
     rl(:,j) = seq( 4)*bq0(:,i,1,2) + seq( 5)*bq0(:,i,2,2) + seq( 6)*bq0(:,i,3,2) + &
               seq( 7)*bs0(:,j,1,1) + seq( 8)*bs0(:,j,2,1) +                        &
               seq( 9)*bs0(:,j,1,2) + seq(10)*bs0(:,j,2,2) + seq(11)*b30(:,j)
     ! h0 is to be computed with B0
     h0(:,i) = deq( 1)*bq0(:,i,1,1) + deq( 2)*bq0(:,i,2,1) + deq( 3)*bq0(:,i,3,1) + &
               deq( 7)*bs0(:,i,1,1) + deq( 8)*bs0(:,i,2,1) +                        &
               deq( 9)*bs0(:,i,1,2) + deq(10)*bs0(:,i,2,2) + deq(11)*b30(:,i)
     h0(:,j) = deq( 4)*bq0(:,i,1,2) + deq( 5)*bq0(:,i,2,2) + deq( 6)*bq0(:,i,3,2) + &
               deq( 7)*bs0(:,j,1,1) + deq( 8)*bs0(:,j,2,1) +                        &
               deq( 9)*bs0(:,j,1,2) + deq(10)*bs0(:,j,2,2) + deq(11)*b30(:,j)
   END DO
   e%ka = ka                        !store
   rl   = rl - h0*ralpha/e%ka       !modify residual forces using EAS residual and vector
   e%alpha = e%alpha - ralpha/e%ka  !first update of EAS parameter
   !Stabilization
   ! compute in-plane stabilization
   stab = e%dvol(2)*stm ! jacobian at element center times Beta_m x 8G
   DO i=1,2  !for each face
     DO j=1,4   !for each mid-side point
       eh(j,i) = eh(j,i)*stab*e%area(j,i) !S_12^KH
     END DO
   END DO
   CALL stbm04r(rl,bm0,eh)
   ! compute shear stabilization
   stab = e%dvol(2)*sts
   vas(3:4,:) = vas(3:4,:)*stab                                         !C_xi3_H
   CALL stbs04r(rl,bh0,vas(3:4,:),e%jacin)
   DO i=1,nnode             !for each node in the element
     n = e%lnods(i)     !node
     resid(1:3,n) = resid(1:3,n)-rl(1:3,i) !sum internal force
   END DO
   e => e%next          !point to next element in the list
 END DO

RETURN
 9999 CALL runen2('')
 END SUBROUTINE resv04i
