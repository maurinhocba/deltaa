 SUBROUTINE stif04i(heade, gstif, ustif, force, coora, ngaus, beta)

 ! 8-node solid-shell element (SSOLAG).
 ! use Almansi strains and associated stresses

 USE npo_db, ONLY : coord  !original coordinates
 USE solv_db, ONLY : nsymm
 IMPLICIT NONE
 ! dummy arguments
 INTEGER (kind=4), INTENT(IN) :: ngaus    !number of integration points

 REAL (kind=8), INTENT(IN) :: coora(:,:), &  ! present coordinates
                              beta(3)        !stabilization factors
 REAL (kind=8), INTENT(IN OUT) :: gstif(:),ustif(:),force(:)  !global force vector
 TYPE (ele04), POINTER :: heade   !pointer to first element

 !Local Variables
 INTEGER (kind=4), PARAMETER :: ndime =3

 TYPE (ele04), POINTER :: e               !pointer to an element
 LOGICAL  :: newmt       !if present material different than previous
 INTEGER (kind=4) :: i,j,g,k,ii,jj,l, &  !different indexes
                     isec,osec,       &  !present and old section
                     nvarl,ielem         !number of DOFs in the patch

 REAL (kind=8) :: propi(13),       & !(nnn) material properties
                  young,poiss,     & !mechanical properties
                  d(6,6),          & !full constitutive matrix (constant)
                  daux(6,6)          !constitutive matrix x dvol

 REAL (kind=8) f3(3),b3(3,nnode), & !gradient 3, C33 and associate B matrix
               f30(3),b30(3,nnode), & !gradient 3, C33 and associate B matrix
               voli,d330,         & !Gauss point volume
               fac,               & !exp(2 x alpha x zeta)
               ka,stm,sts           !stabilization factor

 REAL (kind=8) :: bmatx(ndime,nnode,nstre), &   !global B matrix (to be interpolated)
                  bmat0(ndime,nnode,nstre), &   !global B0 matrix (to be interpolated)
                  x(ndime,nnode),           &   !local material coordinates
                  x0(ndime,nnode),          &   !local spatial coordinates
                  bq(3,4,3,2),              &   !in-plane B matrix at faces
                  bq0(3,4,3,2),             &   !in-plane B0 matrix at faces
                  bm(12,4,2),               &   !in-plane B-12 matrix at mid-point on faces
                  bm0(12,4,2),              &   !in-plane B0-12 matrix at mid-point on faces
                  tq(ndime,2,4,2),          &   !in-plane tangent vectors at sides
                  tq0(ndime,2,4,2),         &   !in-plane tangent vectors at sides
                  stife(24,24),stiff(300),  &               !stiffness matrix
                  deq(11),staux(6),h0(3,nnode),h(3,nnode)
 !           variables for interpolation into the Gauss points
 REAL (kind=8) :: thf(ngaus),   & !G-P positions
                  wei(ngaus),   & !G-P weigths
                  sh(3,ngaus),  & !Quadratic approach functions for Jacobian
                  shape(2,ngaus)  !Linear approach for C components
 ! variables for assumed strain transverse shear
 REAL (kind=8) :: tas(3,4),tas0(3,4),      & ! der x/x_3 at Assumed Strain points
                  gas(3,4),gas0(3,4),      & ! der x/tan at Assumed Strain points
                  bs(3,8,2,2),bh(24,2,2),  & ! Bs matrix at faces and stabilization part
                  bs0(3,8,2,2),bh0(24,2,2)   ! Bs matrix at faces and stabilization part


 TYPE (section), POINTER :: sec   !pointer to section
 TYPE (mater), POINTER :: mat     !pointer to material

 INTERFACE
   INCLUDE 'modp18.h'
 END INTERFACE

 nvarl = ndime*nnode  !nnode*ndime number of element DOFs

 CALL gaussq(ngaus,thf(1),wei(1)) !integration points through the thickness
 wei = wei*4d0
 DO g=1,ngaus
   ! compute sh(3,ngaus) to evaluate jacobian
   sh(1,g) = -0.5d0*(1d0-thf(g))*thf(g)
   sh(2,g) =  1d0-thf(g)**2
   sh(3,g) =  0.5d0*(1d0+thf(g))*thf(g)
   ! compute shape(2,ngaus) to interpolate from upper and lower faces
   shape(1,g) =  0.5d0*(1d0-thf(g))
   shape(2,g) =  0.5d0*(1d0+thf(g))
 END DO

 !***  Compute Element Stiffness matrix for all elements
 bmatx = 0d0           !initializes B-matrix
 bmat0 = 0d0           !initializes B-matrix
 osec = -1             !initialize to a non-existent section
 e => heade            !point to first element

 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   isec = e%matno                    !associated section to element
   ielem = e%numel
   newmt = osec /= isec              !a different material must be considered
   IF(newmt)THEN                     !if new material, get properties
     osec = isec                     !keep present material
     sec => psecs(isec)%p            !point to section
     mat => sec%mtbas                !point to associated material
     !Isotropic Elastic - Anisotropic Plastic  ( mtype == 1)
     young = mat%prope(1)          ! young modulus
     poiss = mat%prope(2)          ! poisson ratio
     CALL modp18(d,young,poiss,propi,0d0,0d0,.FALSE.,.TRUE.,newmt) !elastic matrix
     DO i=1,nstre
       DO j=i,nstre
         d(j,i) = d(i,j)
       END DO
     END DO

     stm = 4d0*young/(1d0+poiss)*beta(1)
     sts = 2d0/9d0*young/(1d0+poiss)*beta(2)
     newmt = .FALSE.               !same material than previous ?

   END IF !newmt
   !
   x(:,1:nnode)  = coora(:,e%lnods(1:nnode))     !material coordinates (changing)
   x0(:,1:nnode) = coord(:,e%lnods(1:nnode))     !spatial coordinates (fixed)
   ! compute in-plane gradient at each mid-side point of upper and lower faces

   DO ii=1,2 ! for each face
     i = 4*ii-3      !first node of the face  (1 or 5)

     DO jj=1,4  !for each mid side point
       tq (:,1:2,jj,ii) = MATMUL(x (:,i:i+3),e%cdq(1:4,1:2,jj,ii))  !main element contribution
       tq0(:,1:2,jj,ii) = MATMUL(x0(:,i:i+3),e%cdq(1:4,1:2,jj,ii))  !main element contribution
     END DO
     !compute transvere shear strain components
     tas (:,:) = MATMUL(x, e%nfdas(:,:,ii))  !der x/x_3 at the 4 mid-side points
     tas0(:,:) = MATMUL(x0,e%nfdas(:,:,ii))  !der x0/x_3 at the 4 mid-side points
     IF( ii == 1 )THEN      !bottom face
       gas(:,1) = (x(:,4) -x(:,1))/2d0 !point A der x/eta
       gas(:,2) = (x(:,2) -x(:,1))/2d0 !point B der x/xita
       gas(:,3) = (x(:,3) -x(:,2))/2d0 !point C der x/eta
       gas(:,4) = (x(:,3) -x(:,4))/2d0 !point D der x/xita
       CALL bsma04(gas,tas,e%nfdas(:,:,1),bs(:,:,:,1),e%jacin(:,:,1),1,bh(:,:,1))     !compute B_s matrix at sampling points
       gas0(:,1) = (x0(:,4) -x0(:,1))/2d0 !point A der x/eta
       gas0(:,2) = (x0(:,2) -x0(:,1))/2d0 !point B der x/xita
       gas0(:,3) = (x0(:,3) -x0(:,2))/2d0 !point C der x/eta
       gas0(:,4) = (x0(:,3) -x0(:,4))/2d0 !point D der x/xita
       CALL bsma04(gas0,tas0,e%nfdas(:,:,1),bs0(:,:,:,1),e%jacin(:,:,1),1,bh0(:,:,1))     !compute B_s matrix at sampling points
     ELSE
       gas(:,1) = (x(:,8) -x(:,5))/2d0 !point A der x/eta
       gas(:,2) = (x(:,6) -x(:,5))/2d0 !point B der x/xita
       gas(:,3) = (x(:,7) -x(:,6))/2d0 !point C der x/eta
       gas(:,4) = (x(:,7) -x(:,8))/2d0 !point D der x/xita
       CALL bsma04(gas,tas,e%nfdas(:,:,2),bs(:,:,:,2),e%jacin(:,:,2),2,bh(:,:,2))     !compute B_s matrix at sampling points
       gas0(:,1) = (x0(:,8) -x0(:,5))/2d0 !point A der x/eta
       gas0(:,2) = (x0(:,6) -x0(:,5))/2d0 !point B der x/xita
       gas0(:,3) = (x0(:,7) -x0(:,6))/2d0 !point C der x/eta
       gas0(:,4) = (x0(:,7) -x0(:,8))/2d0 !point D der x/xita
       CALL bsma04(gas0,tas0,e%nfdas(:,:,2),bs0(:,:,:,2),e%jacin(:,:,2),2,bh0(:,:,2))     !compute B_s matrix at sampling points
     END IF
   END DO

   CALL bmat04q(e%cdq,bq,tq,bm,e%area)    !in-plane b-matrix at faces and stabilization
   CALL bmat04q(e%cdq,bq0,tq0,bm0,e%area) !in-plane b-matrix at faces and stabilization

   ! EAS
   f3  = MATMUL(x, e%cartd)             ! x_3 at element center
   d330 = DOT_PRODUCT(f3,f3)
   f30 = MATMUL(x0,e%cartd)             ! x_3 at element center
   DO i=1,nnode
     b3 (:,i) = f3 *e%cartd(i)          ! B33 at element center
     b30(:,i) = f30*e%cartd(i)          ! B33 at element center
   END DO

   ! Integration loop
   stife = 0d0              !initializes stiffness matrix
   ka = e%ka                !present version it is constant in all process
   deq = 0d0                !present version it is constant in all process
   DO g=1,ngaus             !for each integration point
     fac =  EXP(-2d0*e%alpha*thf(g))                !exp(-2*alpha*zeta)
     voli = DOT_PRODUCT(sh(:,g),e%dvol)*wei(g)      !gauss point volume
     ! for an isotropic one component material
     ! scale D matrix
     daux = voli*d
     CALL bmat04(bmatx,bq,shape(:,g),bs,b3,fac)                !interpolate B matrix
     CALL bmat04(bmat0,bq0,shape(:,g),bs0,b30,fac)             !interpolate B matrix
     CALL b0dbpr(bmat0(1,1,1),bmatx(1,1,1),daux(1,1),stife(1,1),nvarl,nstre) ! B0^T D B

     staux = d(:,3)*d330*fac*thf(g)*voli                       !D3*zeta*Dvol
     deq( 1: 3) = deq( 1: 3) + staux((/1,2,4/))*shape(1,g)
     deq( 4: 6) = deq( 4: 6) + staux((/1,2,4/))*shape(2,g)
     deq( 7: 8) = deq( 7: 8) + staux(5:6)      *shape(1,g)
     deq( 9:10) = deq( 9:10) + staux(5:6)      *shape(2,g)
     deq(11)    = deq(11)    + staux(3)*fac
   END DO

   DO i=1,4 !for each face node
     j  = i+4  !for each other face node
     ! h0 is to be compued with B0
     h0(:,i) = deq( 1)*bq0(:,i,1,1) + deq( 2)*bq0(:,i,2,1) + deq( 3)*bq0(:,i,3,1) + &
               deq( 7)*bs0(:,i,1,1) + deq( 8)*bs0(:,i,2,1) +                        &
               deq( 9)*bs0(:,i,1,2) + deq(10)*bs0(:,i,2,2) + deq(11)*b30(:,i)
     h0(:,j) = deq( 4)*bq0(:,i,1,2) + deq( 5)*bq0(:,i,2,2) + deq( 6)*bq0(:,i,3,2) + &
               deq( 7)*bs0(:,j,1,1) + deq( 8)*bs0(:,j,2,1) +                        &
               deq( 9)*bs0(:,j,1,2) + deq(10)*bs0(:,j,2,2) + deq(11)*b30(:,j)
     ! h is to be compued with B
     h(:,i)  = deq( 1)*bq(:,i,1,1) + deq( 2)*bq(:,i,2,1) + deq( 3)*bq(:,i,3,1) +  &
               deq( 7)*bs(:,i,1,1) + deq( 8)*bs(:,i,2,1) +                        &
               deq( 9)*bs(:,i,1,2) + deq(10)*bs(:,i,2,2) + deq(11)*b3(:,i)
     h(:,j)  = deq( 4)*bq(:,i,1,2) + deq( 5)*bq(:,i,2,2) + deq( 6)*bq(:,i,3,2) +  &
               deq( 7)*bs(:,j,1,1) + deq( 8)*bs(:,j,2,1) +                        &
               deq( 9)*bs(:,j,1,2) + deq(10)*bs(:,j,2,2) + deq(11)*b3(:,j)
   END DO
   !WRITE(58,"('standard stiffness')")
   !DO i=1,nvarl
     !DO j=1,nvarl
     !   IF( ABS(stife(i,j) - stife(j,i)) > 1d0 )WRITE(58,"(2i5,2e15.5)")i,j,stife(i,j),stife(j,i)
     !END DO
     !write(58,"(24e15.6)")(stife(i,j),j=1,nvarl)
   !END DO
   e%h  = RESHAPE( h, (/nvarl/))    !keep EAS vector
   !Membrane Stabilization
   ka = e%dvol(2)*stm
   CALL stbm04i(stife,bm0,bm,ka,e%area)
   !WRITE(58,"('after membrane stabilization')")
   !DO i=1,nvarl
     !DO j=1,nvarl
     !   IF( ABS(stife(i,j) - stife(j,i)) > 1d0 )WRITE(58,"(2i5,2e15.5)")i,j,stife(i,j),stife(j,i)
     !END DO
     !write(58,"(24e15.6)")(stife(i,j),j=1,nvarl)
   !END DO
   !Shear Stabilization
   ka = e%dvol(2)*sts
   CALL stbs04i(stife,bh0,bh,ka,e%jacin)
   !WRITE(58,"('after shear stabilization')")
   !DO i=1,nvarl
     !DO j=1,nvarl
     !   IF( ABS(stife(i,j) - stife(j,i)) > 1d0 )WRITE(58,"(2i5,2e15.5)")i,j,stife(i,j),stife(j,i)
     !END DO
     !write(58,"(24e15.6)")(stife(i,j),j=1,nvarl)
   !END DO
   ! condense EAS parameter
   CALL cond04i(stife,RESHAPE( h0, (/nvarl/)),RESHAPE( h, (/nvarl/)),e%ka,nvarl)
   !WRITE(58,"('after alpha condensation ')")
   !DO i=1,nvarl
     !DO j=1,nvarl
     !   IF( ABS(stife(i,j) - stife(j,i)) > 1d0 )WRITE(58,"(2i5,2e15.5)")i,j,stife(i,j),stife(j,i)
     !END DO
     !write(58,"(24e15.6)")(stife(i,j),j=1,nvarl)
   !END DO
   ! add to global stiffness (change to non-symmetric matrix)
   IF( nsymm == 1 )THEN
     CALL stiaux_NS(nnode,e%lnods(1),nvarl,ndime,stife(1,1),force(1),gstif(1),ustif(1) )
   ELSE
     k = 0
     DO i=1,nvarl
       k = k+1
       stiff(k) = stife(i,i)
       DO j=i+1,nvarl
         k = k+1
         stiff(k) = (stife(i,j)+stife(j,i))/2d0
       END DO
     END DO
     CALL stiaux(nnode,e%lnods,nvarl,ndime,stiff(1),force(1),gstif(1) )
   END IF
!   write(58,"(24e15.6)")((stife(i,j),j=1,nvarl),i=1,nvarl)

   e => e%next
 END DO

RETURN

 END SUBROUTINE stif04i

 SUBROUTINE cond04i(k,h0,h,ka,n)
 IMPLICIT NONE
 ! dummy arguments
 INTEGER(kind=4), INTENT(IN) :: n
 REAL(kind=8), INTENT(IN) :: ka,h0(:),h(:)
 REAL(kind=8), INTENT(IN OUT) :: k(:,:)
 ! local variables
 INTEGER(kind=4) :: i,j
 REAL(kind=8) :: f

 DO i=1,n
   f = h0(i)/ka
   DO j=1,n
     k(i,j) = k(i,j) - f*h(j)
   END DO
 END DO

 RETURN

 END SUBROUTINE cond04i


 SUBROUTINE stbm04i(s,b0,b,ka,area)
 ! membrane stabilization matrix
 IMPLICIT NONE
 ! dummy arguments
 REAL(kind=8), INTENT(IN) :: ka,b0(:,:,:),b(:,:,:),area(:,:)
 REAL(kind=8), INTENT(IN OUT) :: s(:,:)
 ! local variables
 INTEGER(kind=4) :: i,j,k,l,n,m
 REAL(kind=8) :: f

 l = 0   !first position in stiff for first face
 n = 12  !last position in stiff for first face
 DO m=1,2  !for each face
   DO k=1,4        !for each mid-side point
     DO i=1,n      !for each DOF in the face
       f = b0(i,k,m)*ka*area(k,m)
       DO j=1,n
         s(i+l,j+l) = s(i+l,j+l) + f*b(j,k,m)
       END DO
     END DO
   END DO
   l = l+12       !first position in stiff for second face
 END DO

 RETURN

 END SUBROUTINE stbm04i

 SUBROUTINE stbs04i(s,bh0,bh,ka,ji)
 ! shear stabilization matrix
 IMPLICIT NONE
 ! dummy arguments
 REAL(kind=8), INTENT(IN) :: ka,bh0(:,:,:),bh(:,:,:),ji(:,:,:)
 REAL(kind=8), INTENT(IN OUT) :: s(:,:)
 ! local variables
 INTEGER(kind=4) :: i,j,m
 REAL(kind=8) :: a,b,f1,f2


 DO m=1,2  !for each face
   a = (ji(1,1,m)*ji(1,1,m) + ji(2,1,m)*ji(2,1,m))*ka
   b = (ji(1,2,m)*ji(1,2,m) + ji(2,2,m)*ji(2,2,m))*ka
   DO i=1,24       !for each DOF
     f1 = bh0(i,1,m)*a
     f2 = bh0(i,2,m)*b
     DO j=1,24     !for each DOF
       s(i,j) = s(i,j) + f1*bh(j,1,m) + f2*bh(j,2,m)
     END DO
   END DO
 END DO

 RETURN

 END SUBROUTINE stbs04i
