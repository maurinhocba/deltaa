 SUBROUTINE outp27(b1,b2,iwrit,heade,nreqs,narch,ngrqs,ttime,ngaus,isg,fpsg,easts)
 !--------------------------------------------------------------------
 !
 !       output routine for 3-D solid element (TLF)
 !
 !--------------------------------------------------------------------
 IMPLICIT NONE

 INTEGER (kind=4), INTENT (IN) :: iwrit,    &!flag for output into ASCII file
                                  nreqs,    &!number of elements for output
                                  ngaus,    &!number of integration points
                                  easts,    &!EAS for Transverse Strain
                                  narch,isg(2,2)      !output file number
 INTEGER (kind=4), POINTER :: ngrqs(:)   !element numbers for output
 REAL (kind=8), INTENT(IN) :: ttime,fpsg(2,2)
 LOGICAL, INTENT(IN) :: b1,   & !flag for output at selected points
                        b2      !flag for global output
 TYPE (ele27), POINTER  :: heade  !pointer to first element

 INTEGER (kind=4) isec,k,l,m,ielem,osec,i,j,m1,m2
 REAL (kind=8) stres(6),strpl,sxx,syy,sxy,szz,sxz,syz,vm,preys,var(8,2,ngaup)
 TYPE (ele27), POINTER :: e
 TYPE (section), POINTER :: sec
 LOGICAL :: newm,yield

 !     output at selected elements for HISTORY

 IF(b1 .AND. (nreqs > 0)) THEN
   osec = -1
   WRITE(narch,ERR=9999) ttime                  !write process time
   DO l=1,nreqs                        !for each element
     k = MOD(ngrqs(l)-1,ngaus) + 1     !gauss point TTT
     m = MOD(ngrqs(l)-1,ngaup) + 1     !in-plane gauss pont
     ielem = (ngrqs(l)-1) / ngaus + 1
     e => heade                   !point to first element
     DO                           !search for element with label IELEM
       IF( e%numel == ielem )EXIT !if found, exit search
       e => e%next                !point to next element
     END DO
     isec = e%matno
     newm = isec /= osec
     IF( newm )THEN
       sec => psecs(isec)%p             !point to section
       yield = sec%mtbas%matdef(3) > 1
       osec = isec
     END IF
     stres = e%stint(:,k,m)     !integrated Kirchhoff stresses
     IF( yield )THEN
       strpl = e%gausv( 7,k,m) !plastic strain of first component
       preys = 0d0 !actual yield stress ??
     ELSE
       strpl = 0d0
       preys = 0d0 !actual yield stress
     END IF
     vm = (stres(1)+stres(2)+stres(3))/3d0
     sxx = stres(1)-vm         !
     syy = stres(2)-vm         !
     szz = stres(3)-vm         !
     sxy = stres(4)            !Stress XY
     sxz = stres(5)            !Stress XZ
     syz = stres(6)            !Stress YZ
     vm = SQRT(1.5d0*(sxx**2+syy**2+szz**2+2d0*sxy**2+2d0*sxz**2+2d0*syz**2))  !Von Mises stress
     WRITE(narch,ERR=9999)(stres(m),m=1,6),strpl,vm,preys
     !WRITE(narch,ERR=9999)e%gausv(1:4,k),stres(1:4),strpl
   END DO
 END IF
 !
 ! *** writes complete stress state on file 27 for post-process
 !
 IF(b2) THEN
   IF(iwrit == 1) WRITE(lures,900,ERR=9999)  !if echo to ASCII file
   osec = -1                              !initializes
   e => heade                             !point to first element
   DO                                     !loop over all elements
     IF (.NOT.ASSOCIATED (e) ) EXIT       !if last element processed, exit
     isec = e%matno                      !associated material
     newm = isec /= osec
     IF( newm )THEN
       sec => psecs(isec)%p             !point to section
       yield = sec%mtbas%matdef(3) > 1
       osec = isec
     END IF
     !-------------------------------------------------------------
     IF(iwrit == 1)THEN
       IF( easts == 2 )THEN
         WRITE(lures,"('elem = ',i5,' alpha= ',4e12.4)",ERR=9999) e%numel,e%alpha
       ELSE
         WRITE(lures,"('elem = ',i5)",ERR=9999) e%numel
       END IF
     END IF
     var = 0d0
     DO m=1,3  ! ngaup
       DO k=1,ngaus
         stres = e%stint(:,k,m)     !integrated Kirchhoff stresses on material axis
         strpl = 0d0                   !equivalent plastic strain
         vm    = 0d0                   !von Mises equivalent stress
         IF( yield )THEN
           strpl = e%gausv(7,k,m)   !equivalent plastic strain
         END IF
         vm = (stres(1)+stres(2)+stres(3))/3d0
         sxx = stres(1)-vm         !
         syy = stres(2)-vm         !
         szz = stres(3)-vm         !
         sxy = stres(4)            !Stress XY
         sxz = stres(5)            !Stress XZ
         syz = stres(6)            !Stress YZ
         vm = SQRT(1.5d0*(sxx**2+syy**2+szz**2+2d0*sxy**2+2d0*sxz**2+2d0*syz**2))  !Von Mises stress
         IF(iwrit == 1)WRITE(lures,920,ERR=9999) k,stres(1:6),strpl,vm
         DO i=1,2
           DO j=1,2
             IF( k == isg(j,i) )var(:,i,m) = var(:,i,m)+fpsg(j,i)*(/stres(1:6),strpl,vm/)
           END DO
         END DO
       END DO
     END DO
     DO i=1,2
       IF( ngaup == 3 )THEN
         DO m=1,ngaup
           m1 = MOD(m,3)+1
           m2 = MOD(m1,3)+1
           WRITE(16,ERR=9999) (2d0*var(:,i,m) + 2d0*var(:,i,m1) - var(:,i,m2) )/3d0
           !WRITE(16,ERR=9999) var(:,i,m)
         END DO
       ELSE
         DO m=1,3  ! ngaup
           m1 = MOD(m,3)+1
           m2 = MOD(m1,3)+1
           WRITE(16,ERR=9999) (3d0*var(:,i,m) + 3d0*var(:,i,m1) - 2d0*var(:,i,m2) )/4d0
           !WRITE(16,ERR=9999) (14d0*var(:,i,m) - var(:,i,m1) - var(:,i,m2) )/12d0
         END DO
       END IF
     END DO
     e => e%next                   !point to next element
   END DO
 END IF

 RETURN
 900 FORMAT(5X,'STRESSES FOR 3-D SOLID ELEMENTS in MATERIAL AXES'//   &
 &       '      G   S-XX',9X,'S-YY',9X,'S-ZZ',9X,'S-XY',9X,'S-XZ',9X,'S-YZ', &
 &       9X,'EPST',9X,'VMST')
 920 FORMAT(5x,i2,8e13.4)
 9999 CALL runen2('')
 END SUBROUTINE outp27
