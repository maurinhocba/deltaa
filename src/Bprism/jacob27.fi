 SUBROUTINE jacob27( derv,derm,ders,dersp,dert,x,lb,ielem,istop,ansmm,anssh,easts,nassp, &
                     dvol,ipcdm,cartd,nfdas,nf3,jacim,jacis)
 !*********************************************************************
 !
 !**** this SUBROUTINE evaluates the jacobian matrix and the cartesian
 !     shape FUNCTION derivatives
 !
 !*********************************************************************
 IMPLICIT NONE
 ! dummy arguments
 REAL(kind=8), INTENT(IN) :: derv(:,:,:,:),   & !(nnode,ndime,ngaup,ngaud)Local natural ders at external faces and mid-surface for DVOLU
                             derm(:,:,:,:),   & !(nnode,ndime,ngaup,nface)Local natural ders for membrane gradient computation
                             ders(:,:,:,:),   & !(nnode,ndime,ngaup,nface)Local natural ders for shear gradient computation
                             dersp(:,:,:,:),  & !(nnode,ndime,nassp,nface)Local natural ders for shear gradient computation
                             dert(:,:,:,:),   & !(nnode,ndime,ngaup,nface)Local natural ders for transverse gradient computation
                             x(:,:),          & !(3,nnode) element coordinates
                             lb(:,:)            !(3,3) Local cartesyan system at element center
 INTEGER(kind=4), INTENT(IN) :: ielem,        & !element label
                                ansmm,        & !membrane model
                                anssh,        & !transverse shear model
                                easts,        & !transverse strain model
                                nassp
 INTEGER(kind=4), INTENT(IN OUT) :: istop       !in case of error
 REAL(kind=8), INTENT(OUT) :: dvol(:,:),      & !(ngaup,ngaud) gauss point jacobian at faces and center
                              ipcdm(:,:,:,:), & !(nnode,2,nface,ngaud) in-plane cartesyan derivatives  (ANSMM=0)
                              cartd(:,:,:,:), & !(nnode,3,face,ngaup) cartesian derivatives (ANSSH = 0)
                              nfdas(:,:,:),   & !(nnode,nassp,nface) standard cartesian derivative (y3) at shear sampling points
                              nf3(:,:,:),     & !(nnode,ngaup,nface) standard cartesian derivative (y3) at axial sampling points
                              jacim(:,:,:,:), & !(2,2,2,ngaup) in-plane inverse jacobian at each face and each in-plane gauss point for membrane
                              jacis(:,:,:,:)    !(2,2,2,ngaup) in-plane inverse jacobian at each face and each in-plane gauss point for shear
 ! local variables

 INTEGER (kind=4) i,face,g,ias,face1
 REAL (kind=8) lt,j0,jaci(3,3),gcova(3,3)

 ! for volume computation
 DO face=1,nface+1  !for each surface (bottom, top, center)
   DO g=1,ngaup        !for each in-plane GP

     gcova = MATMUL(x,derv(:,:,g,face))  ! covariant base

     j0 =  gcova(1,1)*gcova(2,2)*gcova(3,3) +gcova(1,3)*gcova(2,1)*gcova(3,2)  &
          +gcova(3,1)*gcova(1,2)*gcova(2,3) -gcova(3,1)*gcova(2,2)*gcova(1,3)  &
          -gcova(3,3)*gcova(1,2)*gcova(2,1) -gcova(1,1)*gcova(2,3)*gcova(3,2)

     IF( j0   <= 0d0 ) THEN       !check
        WRITE(*,600,ERR=9999) ielem
        WRITE(*,900,ERR=9999)
        WRITE(*,910,ERR=9999) x
        WRITE(lures,600,ERR=9999) ielem
        WRITE(lures,900,ERR=9999)
        WRITE(lures,910,ERR=9999) x
        istop = 1
        RETURN
     END IF
     dvol(face,g) = j0*wp(g)  !keep gauss point volume (all points has the same weight)
   END DO
 END DO

 ! for membrane strains

 DO face=1,nface  !for each surface (bottom, top)
   DO g=1,ngaup        !for each in-plane GP

     gcova = MATMUL(x,derm(:,:,g,face))  ! covariant base

     j0 =  gcova(1,1)*gcova(2,2)*gcova(3,3) +gcova(1,3)*gcova(2,1)*gcova(3,2)  &
          +gcova(3,1)*gcova(1,2)*gcova(2,3) -gcova(3,1)*gcova(2,2)*gcova(1,3)  &
          -gcova(3,3)*gcova(1,2)*gcova(2,1) -gcova(1,1)*gcova(2,3)*gcova(3,2)

     ! determine a cartesyan local system (y coord) based on center system (lb)
     ! here gcova(:,3) must be set as direction 3
     CALL vecpro(gcova(1,1),gcova(1,2),jaci(1,3)) !tl_3 = g_xita x g_eta
     CALL vecuni(3,jaci(1,3),lt)                  !unit vector, normal to xita-eta plane
     CALL vecpro(jaci(1,3),lb(1,1),jaci(1,2))     !tl_2 = tl_3 x lb_1
     CALL vecuni(3,jaci(1,2),lt)                  !unit vector
     CALL vecpro(jaci(1,2),jaci(1,3),jaci(1,1))   !tl_1 = tl_2 x tl_3
     !compute components of gcova respect to the local system
     gcova = MATMUL(TRANSPOSE(jaci),gcova)        !d_y/d_xita
     ! and inverse of jacobian matrix
     jaci(1,1) =  (gcova(2,2)*gcova(3,3)-gcova(2,3)*gcova(3,2))/j0  ! der xita/x1
     jaci(2,1) = -(gcova(2,1)*gcova(3,3)-gcova(3,1)*gcova(2,3))/j0  ! der  eta/x1
     jaci(3,1) =  (gcova(2,1)*gcova(3,2)-gcova(2,2)*gcova(3,1))/j0  ! der zeta/x1
     jaci(1,2) = -(gcova(1,2)*gcova(3,3)-gcova(1,3)*gcova(3,2))/j0  ! der xita/x2
     jaci(2,2) =  (gcova(1,1)*gcova(3,3)-gcova(3,1)*gcova(1,3))/j0  ! der  eta/x2
     jaci(3,2) = -(gcova(1,1)*gcova(3,2)-gcova(1,2)*gcova(3,1))/j0  ! der zeta/x2

     IF( ansmm == 0 )THEN !standard displacement formulation for in-plane
       DO i=1,nnode
         ipcdm(i,1,face,g) = DOT_PRODUCT(derm(i,:,g,face),jaci(:,1))
         ipcdm(i,2,face,g) = DOT_PRODUCT(derm(i,:,g,face),jaci(:,2))
       END DO
     ELSE
       !  keep in plane inverse jacobian (J^-T) at sampling surfaces
       jacim(:,:,face,g) = jaci(1:2,1:2)           !dxi-eta /dx 1-2
     END IF

   END DO
 END DO

 ! for shear strains

 DO face=1,nface  !for each surface (bottom, top)
   DO g=1,ngaup        !for each in-plane GP

     gcova = MATMUL(x,ders(:,:,g,face))  ! covariant base

     j0 =  gcova(1,1)*gcova(2,2)*gcova(3,3) +gcova(1,3)*gcova(2,1)*gcova(3,2)  &
          +gcova(3,1)*gcova(1,2)*gcova(2,3) -gcova(3,1)*gcova(2,2)*gcova(1,3)  &
          -gcova(3,3)*gcova(1,2)*gcova(2,1) -gcova(1,1)*gcova(2,3)*gcova(3,2)

     ! determine a cartesyan local system (y coord) based on center system (lb)
     ! here gcova(:,3) must be set as direction 3
     CALL vecpro(gcova(1,1),gcova(1,2),jaci(1,3)) !tl_3 = g_xita x g_eta
     CALL vecuni(3,jaci(1,3),lt)                  !unit vector, normal to xita-eta plane
     CALL vecpro(jaci(1,3),lb(1,1),jaci(1,2))     !tl_2 = tl_3 x lb_1
     CALL vecuni(3,jaci(1,2),lt)                  !unit vector
     CALL vecpro(jaci(1,2),jaci(1,3),jaci(1,1))   !tl_1 = tl_2 x tl_3
     !compute components of gcova respect to the local system
     gcova = MATMUL(TRANSPOSE(jaci),gcova)        !d_y/d_xita
     ! and inverse of jacobian matrix
     jaci(1,1) =  (gcova(2,2)*gcova(3,3)-gcova(2,3)*gcova(3,2))/j0    ! der xita/x1
     jaci(2,1) = -(gcova(2,1)*gcova(3,3)-gcova(3,1)*gcova(2,3))/j0    ! der  eta/x1
     jaci(3,1) =  (gcova(2,1)*gcova(3,2)-gcova(2,2)*gcova(3,1))/j0    ! der zeta/x1
     jaci(1,2) = -(gcova(1,2)*gcova(3,3)-gcova(1,3)*gcova(3,2))/j0    ! der xita/x2
     jaci(2,2) =  (gcova(1,1)*gcova(3,3)-gcova(3,1)*gcova(1,3))/j0    ! der  eta/x2
     jaci(3,2) = -(gcova(1,1)*gcova(3,2)-gcova(1,2)*gcova(3,1))/j0    ! der zeta/x2
     jaci(1,3) =  (gcova(1,2)*gcova(2,3)-gcova(1,3)*gcova(2,2))/j0    ! der xita/x3
     jaci(2,3) = -(gcova(1,1)*gcova(2,3)-gcova(1,3)*gcova(2,1))/j0    ! der  eta/x3
     jaci(3,3) =  (gcova(1,1)*gcova(2,2)-gcova(2,1)*gcova(1,2))/j0    ! der zeta/x3

     IF( anssh == 0 )THEN !standard displacement formulation for shear strains
       DO i=1,nnode
         cartd(i,1,face,g) = DOT_PRODUCT(ders(i,:,g,face),jaci(:,1))
         cartd(i,2,face,g) = DOT_PRODUCT(ders(i,:,g,face),jaci(:,2))
         cartd(i,3,face,g) = DOT_PRODUCT(ders(i,:,g,face),jaci(:,3))
       END DO
     ELSE  ! ANS
      !  keep in plane inverse jacobian (J^-T) at sampling surfaces
       jacis(:,:,face,g) = jaci(1:2,1:2)           !dxi-eta /dx 1-2
     END IF

   END DO
   IF( anssh > 0 )THEN    ! for ANS models
     DO ias=1,nassp         !for each sampling pont

       gcova = MATMUL(x,dersp(:,:,ias,face))  ! covariant base

       j0 =  gcova(1,1)*gcova(2,2)*gcova(3,3) +gcova(1,3)*gcova(2,1)*gcova(3,2)  &
            +gcova(3,1)*gcova(1,2)*gcova(2,3) -gcova(3,1)*gcova(2,2)*gcova(1,3)  &
            -gcova(3,3)*gcova(1,2)*gcova(2,1) -gcova(1,1)*gcova(2,3)*gcova(3,2)

       ! determine a cartesyan local system (y coord) based on center system (lb)
       ! here gcova(:,3) must be set as direction 3
       CALL vecpro(gcova(1,1),gcova(1,2),jaci(1,3)) !tl_3 = g_xita x g_eta
       CALL vecuni(3,jaci(1,3),lt)                  !unit vector, normal to xita-eta plane
       CALL vecpro(jaci(1,3),lb(1,1),jaci(1,2))     !tl_2 = tl_3 x lb_1
       CALL vecuni(3,jaci(1,2),lt)                  !unit vector
       CALL vecpro(jaci(1,2),jaci(1,3),jaci(1,1))   !tl_1 = tl_2 x tl_3
       !compute components of gcova respect to the local system
       gcova = MATMUL(TRANSPOSE(jaci),gcova)        !d_y/d_xita
       ! and inverse of jacobian matrix
       jaci(1,3) =  (gcova(1,2)*gcova(2,3)-gcova(1,3)*gcova(2,2))/j0  ! der xita/x3
       jaci(2,3) = -(gcova(1,1)*gcova(2,3)-gcova(1,3)*gcova(2,1))/j0  ! der  eta/x3
       jaci(3,3) =  (gcova(1,1)*gcova(2,2)-gcova(2,1)*gcova(1,2))/j0  ! der zeta/x3

       ! compute cartesyan (y3) derivatives of the shape functions
       ! necessary to compute f_3 for transverse axial strain
       DO i=1,nnode
         nfdas(i,ias,face) = DOT_PRODUCT(dersp(i,:,ias,face),jaci(:,3))
       END DO

     END DO
   END IF
 END DO

 ! For axial Transverse strains
 DO face=1,nface  !for each sampling surface
   DO g=1,ngaup        !for each in-plane GP

     gcova = MATMUL(x,dert(:,:,g,face))  ! covariant base

     j0 =  gcova(1,1)*gcova(2,2)*gcova(3,3) +gcova(1,3)*gcova(2,1)*gcova(3,2)  &
          +gcova(3,1)*gcova(1,2)*gcova(2,3) -gcova(3,1)*gcova(2,2)*gcova(1,3)  &
          -gcova(3,3)*gcova(1,2)*gcova(2,1) -gcova(1,1)*gcova(2,3)*gcova(3,2)

     ! determine a cartesyan local system (y coord) based on center system (lb)
     ! here gcova(:,3) must be set as direction 3
     CALL vecpro(gcova(1,1),gcova(1,2),jaci(1,3)) !tl_3 = g_xita x g_eta
     CALL vecuni(3,jaci(1,3),lt)                  !unit vector, normal to xita-eta plane
     CALL vecpro(jaci(1,3),lb(1,1),jaci(1,2))     !tl_2 = tl_3 x lb_1
     CALL vecuni(3,jaci(1,2),lt)                  !unit vector
     CALL vecpro(jaci(1,2),jaci(1,3),jaci(1,1))   !tl_1 = tl_2 x tl_3
     !compute components of gcova respect to the local system
     gcova = MATMUL(TRANSPOSE(jaci),gcova)        !d_y/d_xita
     ! and inverse of jacobian matrix
     jaci(1,3) =  (gcova(1,2)*gcova(2,3)-gcova(1,3)*gcova(2,2))/j0      ! der xita/x3
     jaci(2,3) = -(gcova(1,1)*gcova(2,3)-gcova(1,3)*gcova(2,1))/j0      ! der  eta/x3
     jaci(3,3) =  (gcova(1,1)*gcova(2,2)-gcova(2,1)*gcova(1,2))/j0      ! der zeta/x3

     DO i=1,nnode
       nf3(i,face,g) = DOT_PRODUCT(dert(i,:,g,face),jaci(:,3))
     END DO

   END DO
   IF( easts > 0 ) EXIT    !mid-surface only
 END DO

 RETURN
  600 FORMAT(//,' PROGRAM halted in SUBROUTINE jacob27',/,11x,           &
     &' zero or negative volume',/,10x,' element number ',i5)
  900 FORMAT(//,5x,'coordinates of element nodes')
  910 FORMAT(5x,3e15.8)
 9999 CALL runen2('')
 END SUBROUTINE jacob27
