 SUBROUTINE stra27( e, x, ansmm, anssh, easts, nassp)
 !-------------------------------------------------------------------
 !
 !     EVALUATION OF INITIAL STRAINS T-L 3-D Solid-Shell Bezier Prism
 !
 !-------------------------------------------------------------------

 IMPLICIT NONE

 ! dummy arguments
 REAL(kind=8),INTENT (IN) :: x(:,:)           !initial element coordinates
 TYPE (ele27), POINTER  :: e                  !pointer to element data
 INTEGER (kind=4), INTENT(IN) :: ansmm,   &   !Assumed Natural Strain Membrane Model
                                 anssh,   &   !Assumed Natural Strain SHear model
                                 easts,   &   !Enhanced Assumed Stran Transverse Strain
                                 nassp

 ! local variables
 INTEGER (kind=4), PARAMETER :: ndime=3

 INTEGER (kind=4) ielem,             & !element number
                  face,gp,vert,jj !indexes

 REAL (kind=8) :: ji(2,2),f(3,3)              !jacobinas
 ! variables for assumed in-plane strains
 REAL (kind=8) :: cn(3,nface,3),           &  !natural FFF at each face and at each sampling point
                  cq(3,nface,ngaup),       &  !metric tensor at each face at each gauss point
                  tq(ndime,3,nface,ngaup)         !local in-plane deformation gradient at face sides at each sampling point

 ! variables for assumed strain transverse shear
 REAL (kind=8) :: tas(ndime,nassp,nface),      & ! der x/x_3 at Assumed Strain points
                  gas(ndime,nassp,nface),      & ! der x/tan at Assumed Strain points
                  cmas(nassp,nface),           & ! mixed strains at Assumed Strain Points
                  ccas(2,nface,ngaup),         & ! cartesian shear strains at in-plane integration Points
                  vas(2)                         ! mixed shear strains at integration  Points

 ! variables for Enhanced assumed normal strain
 REAL (kind=8) f3(ndime),c33(ngaup,2)      !EAS

   ielem = e%numel                   !element number


   ! COMPUTE REFERENCE VALUES AT EACH GAUSS POINT FOR EACH SAMPLING SURFACE

   ! loop to compute C components at different surfaces
   DO face=1,nface ! for each face
     ! for membrane strains
     SELECT CASE (ansmm )   ! according with the membrane approach
     CASE (0)   !standard displacement formulation
       DO gp=1,ngaup !in-plane Gauss points
         !Gradient in local system at Gauss  points
         tq(:,1,face,gp) = MATMUL(x,e%ipcdm(:,1,face,gp))
         tq(:,2,face,gp) = MATMUL(x,e%ipcdm(:,2,face,gp))
         !First Fundamental Form  (FFF) in local cartesisn coordinates at each Gauss Point
         cq(1,face,gp) = DOT_PRODUCT(tq(:,1,face,gp),tq(:,1,face,gp)) !C11
         cq(2,face,gp) = DOT_PRODUCT(tq(:,2,face,gp),tq(:,2,face,gp)) !C22
         cq(3,face,gp) = DOT_PRODUCT(tq(:,1,face,gp),tq(:,2,face,gp)) !C12
       END DO
     CASE (1:2)   !ANS
       DO jj=1,3    !for each sampling points in the three side directions
         !gradient in local system at sampling points
         tq(:,jj,face,1) = MATMUL(x,mdtan(:,  jj,face))
         tq(:,jj,face,2) = MATMUL(x,mdtan(:,3+jj,face))
         tq(:,jj,face,3) = MATMUL(x,mdtan(:,6+jj,face))
         !Components of First Fundamental Form  (FFF) in natural coordinates at each assumed strain point
         cn(jj,face,1) = DOT_PRODUCT(tq(:,jj,face,1),tq(:,jj,face,1)) !Cxx
         cn(jj,face,2) = DOT_PRODUCT(tq(:,jj,face,2),tq(:,jj,face,2)) !Cee
         cn(jj,face,3) = DOT_PRODUCT(tq(:,jj,face,3),tq(:,jj,face,3)) !Ctt
       END DO
       DO gp=1,ngaup !in-plane Gauss points
         !First Fundamental Form (FFF) in natural coordinates at each integration point
         cq(:,face,gp) =  MATMUL(pagm(:,:,gp),RESHAPE((/cn(:,face,:)/),(/ansmm/)))   ! (zeta,xita,eta)
         ji = e%jacim(:,:,face,gp)   !inverse in-plane jacobian at integration point of the face
         f = RESHAPE( (/ ji(1,1)**2,              ji(1,2)**2,      ji(1,1)*ji(1,2), &     !transformation matrix for a 2x2 tensor
                         ji(2,1)**2,              ji(2,2)**2,      ji(2,1)*ji(2,2), &
                         2d0*ji(1,1)*ji(2,1), 2d0*ji(1,2)*ji(2,2), ji(1,1)*ji(2,2)+ji(1,2)*ji(2,1) /),(/3,3/))
         !transform FFF to local Cartesian system
         cq(1:3,face,gp) = MATMUL(f,cq(1:3,face,gp))            !FFF cartesian at GP of face
       END DO
     END SELECT
     !For shear strain
     SELECT CASE (anssh)
     CASE (0)       ! standard displacement formulation
       jj = 0
       DO gp = 1,ngaup
         jj = jj + 1
         tas(:,jj,face) = MATMUL(x,e%cartd(:,3,face,gp))      !der x/x_3  at gauss point (shear strain)
         gas(:,jj,face) = MATMUL(x,e%cartd(:,1,face,gp))      !der x/1 at each gauss point (shear strain)
         ccas(1,face,gp) = DOT_PRODUCT(tas(:,jj,face),gas(:,jj,face)) !cartesyan shear strain at gauss points
         jj = jj + 1
         tas(:,jj,face) = tas(:,jj-1,face)                    !der x/x_3  at gauss point (shear strain)
         gas(:,jj,face) = MATMUL(x,e%cartd(:,2,face,gp))      !der x/3 at each gauss point (shear strain)
         ccas(2,face,gp) = DOT_PRODUCT(tas(:,jj,face),gas(:,jj,face)) !cartesyan shear strain at gauss points
       END DO
     CASE (1:2)    ! ANS methods
       tas(:,:,face) = MATMUL(x,e%nfdas(:,:,face))          !der x/x_3  at each assumed strain point (shear)
       gas(:,:,face) = MATMUL(x,sdtan(:,:,face))            !der x/tan  at each assumed strain point (shear)
       DO jj=1,nassp    !for each assumed strain point (shear)
         cmas(jj,face) = DOT_PRODUCT(tas(:,jj,face),gas(:,jj,face)) !mixed tangent-normal shear strain
       END DO
       DO gp = 1,ngaup
         ji = e%jacis(:,:,face,gp)   !inverse in-plane jacobian at integration point of the face
         vas(1:2) = MATMUL(pags(1:2,1:nassp,gp),cmas(:,face)) !(2) (NASSP) mixed shear strains at gauss points
         ccas(:,face,gp) = MATMUL(vas,ji)                    !x_1-x_3 & x_2-x3
       END DO
     END SELECT
     ! For transverse axial strains
     DO gp=1,ngaup !compute metric tensors (5 of 6 components) at in-plane integration points
       !compute cartesian transverse shear strain components at Gauss points (gp) at faces (face)
       IF( easts == 0 )THEN  !standard displacement formulation
         f3 = MATMUL(x,e%nf3(:,face,gp))                 !f_3 at the surfac
         e%c33i(gp,face) = DOT_PRODUCT(f3,f3) - 1d0      !C(3,3) at each-surface
       ELSE  ! EAS or reduced integration
         IF( face == 1 )THEN
           f3 = MATMUL(x,e%nf3(:,face,gp))                 !f_3 at mid-surface
           e%c33i(gp,face) = DOT_PRODUCT(f3,f3) - 1d0      !C(3,3) at mid-surface
         END IF
       END IF
     END DO
   END DO
   ! This must be substracted from bar-C to have a unit tensor at initial configuration
   e%cqi = cq
   e%cqi(1:2,:,:) = e%cqi(1:2,:,:) -1d0
   e%ccasi = ccas
   !WRITE(58,"(3e12.4,1x,3e12.4,1x,2e12.4,1x,2e12.4,1x,e12.4 )")(e%cqi(:,:,gp),e%ccasi(:,:,gp),e%c33i(gp),gp=1,ngaup)

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE stra27
