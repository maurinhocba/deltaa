 SUBROUTINE stif27(heade, gstif, force, coora, small, ngaus, ansmm, anssh, easts,nassp)

 ! 12-node solid-shell element (Bprism).
 ! use Green-Lagrange strains and 2nd Piola-Kirchhoff stresses

 USE ele18_db, ONLY : rubber3d
 IMPLICIT NONE
 ! dummy arguments
 INTEGER (kind=4), INTENT(IN) :: ngaus,    & !number of integration points across the thickness
                                 ansmm,    & !Assumed Natural Strain Membrane Model
                                 anssh,    & !Assumed Natural Strain SHear model
                                 easts,    & !Enhanced Assumed Natural Transverse Strain
                                 nassp
 LOGICAL, INTENT(IN) :: small                ! use Green-Lagrange strains
 REAL (kind=8), INTENT(IN) :: coora(:,:)     ! present coordinates
 REAL (kind=8), INTENT(IN OUT) :: gstif(:),force(:)  !global stiffness and force vector
 TYPE (ele27), POINTER :: heade              !pointer to first element

 !Local Variables
 INTEGER (kind=4), PARAMETER :: ndime =3
 LOGICAL, PARAMETER :: natst = .FALSE.       !do not use large strains but for rubbers

 TYPE (ele27), POINTER :: e         !pointer to an element
 LOGICAL  :: newmt,   &             !if present material different than previous
             plast,   &             !if plastic strains may be present
             elast                  !if the material is elastic
 INTEGER (kind=4) :: face,vert,       &  !different indexes
                     i,j,g,k,gp,jj,   &  !different indexes
                     isec,osec,       &  !present and old section
                     mtype,           &  !material type
                     nlayr,           &  !number of material components
                     ielem               !element label

 REAL (kind=8) :: propi(13),       & !material properties
                  young,poiss,     & !mechanical properties
                  deatht,          & !death time for plasticity (not used)
                  d(6,6),          & !full constitutive matrix (constant)
                  cm(6,6),         & !full constitutive matrix (pull-back)
                  daux(21),        & !upper diagonal constitutive matrix x dvol
                  chi(12)            !(12) Hill coefficients

 REAL (kind=8) efpst,             &     !effective plastic strain
               c33,b3(3,nnode,ngaup,2), & !gradient 3, C33 and associate B matrix
               stres(6),          &     !2nd P-K stresses for Geometric matrix
               stran(6),          &     !C tensor to pull-back constitutive matrix
               voli,              &     !Gauss point volume
               lambd,             &     !iterative consistency parameter
               fac                      !exp(2 x alpha x zeta)

 REAL (kind=8) :: bmatx(ndime,nnode,nstre),   &  !global B matrix (to be interpolated)
                  x(ndime,nnode)                 !local coordinates
 REAL (kind=8) :: bm(ndime,nnode,3,ngaup,nface),  &  !in-plane B matrix at faces
                  tq(ndime,3,nface,ngaup),        &  !convective base at faces at each vertex
                  stiff(666),line(ndofe),     &  !stiffness matrix, and a line of it
                  tas(ndime,nassp,nface),     &  ! der x/x_3 at Assumed Strain points
                  gas(ndime,nassp,nface),     &  ! der x/tan at Assumed Strain points
                  bs(ndime,nnode,nassp,nface),&  ! Bs matrix at Assumed strain Points
                  bm1(ndime,nnode,3,nface),   &  ! Bm matrix at faces ready to interpolate
                  bs1(ndime,nnode,2,nface)       ! Bs matrix at faces ready to interpolate
 !           variables for interpolation into the Gauss points
 REAL (kind=8) :: thf(ngaus),   & !G-P positions
                  wei(ngaus),   & !G-P weigths
                  shv(3,ngaus), & !Quadratic approach functions for Jacobian
                  shm(2,ngaus), & !Linear approach for membrane components
                  shs(2,ngaus), & !Linear approach for shear components
                  sht(2,ngaus)    !Linear approach for normal transverse components


 TYPE (section), POINTER :: sec   !pointer to section
 TYPE (mater), POINTER :: mat     !pointer to material
 !TYPE (mater), POINTER :: matm,matf !pointer to a material data
 ! Functions
 CHARACTER(len=mich):: inttoch

 INTERFACE
   INCLUDE 'modp18.h'
 END INTERFACE

 d = 0d0   !initializes constitutive matrix
 bm = 0d0  !initializes
 !integration points through the thickness
 CALL gaussq(ngaus,thf(1),wei(1))
 ! compute sh?(2,ngaus) to interpolate in thickness direction
 ! compute shv(3,ngaus) to evaluate jacobian from three surfaces
 DO g=1,ngaus
   ! this are quadratic Bezier for Jacobian computation
   shv(1,g) = (1d0+thf(g)/gpzv(1))**2/4d0      !bottom
   shv(2,g) = (1d0+thf(g)/gpzv(2))**2/4d0      !top
   shv(3,g) = (1d0-(thf(g)/gpzv(2))**2)/2d0    !center
   ! this are linear functions
   shm(1,g) =  0.5d0*(1d0+thf(g)/gpzm(1))
   shm(2,g) =  0.5d0*(1d0+thf(g)/gpzm(2))
   shs(1,g) =  0.5d0*(1d0+thf(g)/gpzs(1))
   shs(2,g) =  0.5d0*(1d0+thf(g)/gpzs(2))
   IF( easts == 0 )THEN
     sht(1,g) =  0.5d0*(1d0+thf(g)/gpzt(1))
     sht(2,g) =  0.5d0*(1d0+thf(g)/gpzt(2))
   END IF
 END DO
 !***  Compute Element Stiffness matrix for all elements
 osec = -1             !initialize to a non-existent section
 e => heade            !point to first element

 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   isec = e%matno                    !associated section to element
   ielem= e%numel                    ! element label
   newmt = osec /= isec              !a different material must be considered
   IF(newmt)THEN                     !if new material, get properties
     osec = isec                     !keep present material
     sec => psecs(isec)%p            !point to section
     nlayr = sec%iprop(1)             !number of layers
     !nvar  = sec%iprop(2)             !total number of internal variables

     !************************** STANDARD SOLID *****************************************
     IF( nlayr == 0 )THEN            !standard solid section (not layered)

       mat => sec%mtbas                !point to associated material
       mtype = mat%mtype               !type of base material
       elast = mat%matdef(3) == 1      !elastic material
       !is    = mat%matdef(4)           !isotropic hardening model
       ! ------------------------------------------------------------------------------------
       ! ONLY MTYPES 1, 5, 6, 7 and 92 ARE ALLOWED
       SELECT CASE (mtype)
       ! ------------------------------------------------------------------------------------
       CASE (1)                        !Isotropic Elastic - Anisotropic Plastic  ( mtype == 1)
         !IF( .NOT.elast ) THEN
         !  ! e1, nu1, uniaxial, efren, consn, r, exponent m, hill 79
         !  propi(1:4) = mat%propp(1:4)       ! isotropic hardening parameters
         !  propi(5) = REAL( mat%matdef(4),8) ! isotropic hardening model
         !  chi    = mat%propp(16:27)         ! hill coefficients
         !  IF( mat%matdef(6) == 1  ) chi(1:6) = chi(7:12)  !associative
         !  deatht = mat%propp(5)             !end of plasticity
         !  plast = propi(1) > 0  !consider plasticity ?
           young = mat%prope(1)          ! young modulus
           poiss = mat%prope(2)          ! poisson ratio
         !  ! von Mises plasticity IF( mat%matdef(3) <= 2 )
           CALL modp18(d,young,poiss,propi,0d0,0d0,.FALSE.,elast,newmt) !no-bbar

         !ELSE
           plast = .FALSE.
        ! END IF
         ! ------------------------------------------------------------------------------------
       CASE (5)                        !Orthotropic Elastic - No Plasticity      ( mtype == 5)
         d = RESHAPE( mat%prope(26:61), (/6,6/) )
         elast = .TRUE.
         plast = .FALSE.                        !consider plasticity ?
       ! ------------------------------------------------------------------------------------
       CASE (6)                        !Hyperelastic isotropic rubber            ( mtype == 6)
         propi(1:12) = mat%prope(7:18)     !elastic properties
         elast = .TRUE.                    !elastic only
         plast = .FALSE.                   !consider plasticity ?
       ! ------------------------------------------------------------------------------------
       CASE (7)                        !Isotropic damague model                  ( mtype == 7)
         d = RESHAPE( mat%prope(45:80), (/6,6/) )                 !linear elastic integrated matrix
       !
       ! ------------------------------------------------------------------------------------
       END SELECT

       !************************** LAYERED SOLID *************************************************
     ELSE  !nlayr >= 1      layered solid (at integration point level)
       !thick = sec%rprop(1)             !original thickness
       !minstr= sec%rprop(4)             !strain threshold to use TTTI

       !nl=1
       elast = .TRUE. !sec%iprop(3) == 0               !elastic problem
       plast = .NOT.elast                      !consider plasticity ?
       d = RESHAPE( sec%rprop(6:41), (/6,6/) )                 !linear elastic integrated matrix
       !IF( plast )THEN  !plastic lamina
       !  IF( ALLOCATED ( rr ) )DEALLOCATE( thickl,zposl,rr,matsl,lvari )
       !  ALLOCATE( thickl(nlayr),zposl(nlayr),rr(5,nlayr),matsl(3,nlayr),lvari(nlayr) )
       !  i = 42                                !pointer to layer thickness
       !  CALL vecasi(nlayr,sec%rprop(i),thickl(1))        !layer thickness
       !  i = i+2*nlayr                         !pointer to layer z position
       !  !CALL vecasi(nlayr,sec%rprop(i),zposl(1))         !layer z position
       !  i = i+nlayr                           !pointer to layer rotation matrix
       !  CALL vecasi(nlayr*5,sec%rprop(i),rr(1,1))        !layer rotation matrix
       !
       !  lvari(1:nlayr)= sec%iprop(nlayr+5:2*nlayr+4)
       !  DO il=1,nlayr
       !    mate= sec%iprop(4+il)
       !    mat => pmats(mate)%p        !search layer material
       !    matsl(1,il)%p => mat
       !    SELECT CASE (mat%mtype)
       !    CASE ( 91,92 )
       !      !point to component materials data bases
       !      matsl(2,il)%p => pmats(mat%matdef(4))%p  !matm
       !      matsl(3,il)%p => pmats(mat%matdef(5))%p  !matf
       !    CASE DEFAULT
       !      NULLIFY( matsl(2,il)%p )
       !      NULLIFY( matsl(3,il)%p )
       !    END SELECT
       !  END DO
       !END IF
       !osec = -1                              !recompute constants
     END IF
     newmt = .FALSE.               !same material than previous ?

   END IF !newmt

   x = coora(:,e%lnods)     !position of control points of the element

   ! First loop to compute gradient vectors at faces
   DO face=1,nface ! for each face
     IF( ansmm == 0 )THEN   !standard displacement formulation
       !gradient in local system at Gauss  points
       DO gp=1,ngaup                !for each in-plane Gauss point (mid-side points)
         tq(:,1,face,gp) = MATMUL(x,e%ipcdm(:,1,face,gp))
         tq(:,2,face,gp) = MATMUL(x,e%ipcdm(:,2,face,gp))
       END DO
     ELSE !IF(ansmm > 0 )THEN  !ANS sampling points
       DO jj=1,3    !mid-side points of each subtriangle (sampling points)
         !gradient in local system at sampling points
         tq(:,jj,face,1) = MATMUL(x,mdtan(:,  jj,face))     !x_xita
         tq(:,jj,face,2) = MATMUL(x,mdtan(:,3+jj,face))     !x_eta
         tq(:,jj,face,3) = MATMUL(x,mdtan(:,6+jj,face))     !x_tan
       END DO
     END IF
     !For shear strain
     IF( anssh == 0 )THEN
       jj = 0
       DO gp=1,ngaup                !for each in-plane Gauss point (mid-side points)
         jj = jj + 1
         tas(:,jj,face) = MATMUL(x,e%cartd(:,3,face,gp))                         !der x/x_3  at gauss point (shear strain)
         gas(:,jj,face) = MATMUL(x,e%cartd(:,1,face,gp))  !der x/1 at each gauss point (shear strain)
         jj = jj + 1
         tas(:,jj,face) = tas(:,jj-1,face)                                     !der x/x_3  at gauss point (shear strain)
         gas(:,jj,face) = MATMUL(x,e%cartd(:,2,face,gp))  !der x/1 at each gauss point (shear strain)
       END DO
     ELSE ! IF (anssh > 0 ) THEN
       tas(:,:,face) = MATMUL(x,e%nfdas(:,:,face))    !der x/x_3  at each assumed strain point (shear)
       gas(:,:,face) = MATMUL(x,sdtan(:,:,face))       !der x/tan  at each assumed strain point (shear)
     END IF
   END DO
   !compute membrane matrix at faces
   CALL bmma27(tq,bm,ansmm,e%ipcdm)
   !compute  shear matrix at faces
   CALL bsma27(gas,tas,anssh,nassp,e%nfdas,e%cartd,bs)
   !compute transverse strain matrix at surfaces or center
   CALL btma27(easts,e%nf3,x,b3)
   stiff = 0d0              !initializes stiffness matrix
   fac = 0d0                !factor
   DO gp=1,ngaup                !for each in-plane Gauss point (mid-side points)
     CALL bmai27(bm,bs,e%jacim(:,:,:,gp),e%jacis(:,:,:,gp),bm1,bs1,gp,ansmm,anssh,nassp)
     ! TTT Integration loop
     DO g=1,ngaus             !for each integration point
       IF( easts == 2 ) fac = EXP(2d0*e%alpha(gp)*thf(g)) !exp(2*alpha*zeta)
       voli = DOT_PRODUCT(shv(:,g),e%dvol(:,gp))*wei(g)    !gauss point volume
       ! compute point constitutive matrix (tangent algorithmic)
       IF( nlayr == 0 )THEN
         SELECT CASE (mtype)
         CASE ( 1 )   ! for an isotropic one component material
           !IF( .NOT.elast )THEN
           !  lambd = e%gausv(14,g)         !Increment in Total Eff. plastic strain
           !  efpst = e%gausv(7,g) + lambd  !Total Eff. plastic strain
           !ELSE
           !  lambd = 0d0
           !  efpst = 0d0
           !END IF
           !CALL modp18(d,young,poiss,propi,efpst,lambd,.FALSE.,elast,newmt)
           !IF( natst )THEN
           !  ! Compute Metric tensor
           !  stran(1) = DOT_PRODUCT(t(:,1),t(:,1))
           !  stran(2) = DOT_PRODUCT(t(:,2),t(:,2))
           !  stran(3) = DOT_PRODUCT(t(:,3),t(:,3))
           !  stran(4) = DOT_PRODUCT(t(:,1),t(:,2))
           !  stran(5) = DOT_PRODUCT(t(:,1),t(:,3))
           !  stran(6) = DOT_PRODUCT(t(:,2),t(:,3))
           !  ! inverse of U^2
           !  a1  = stran(2)*stran(3) - stran(6)*stran(6)
           !  a2  =-stran(4)*stran(3) + stran(5)*stran(6)
           !  a3  = stran(4)*stran(6) - stran(5)*stran(2)
           !  aux1 = stran(1)*a1 + stran(4)*a2 + stran(5)*a3
           !  !IF(aux1 == 0d0) CALL runend('STIF18, singular matrix ')
           !  u2(1) = a1/aux1
           !  u2(2) = ( stran(1)*stran(3) - stran(5)*stran(5))/aux1
           !  u2(3) = ( stran(1)*stran(2) - stran(4)*stran(4))/aux1
           !  u2(4) = a2/aux1
           !  u2(5) = a3/aux1
           !  u2(6) = (-stran(1)*stran(6) + stran(4)*stran(5))/aux1
           !
           !ELSE  !small strain
             cm      = d
           !END IF
        ! CASE ( 6 )   !
        !   ! Compute Metric tensor: !interpolate from lower and upper surfaces
        !   stran((/1,2,4/)) = shape(1,g)*cq(:,1) + shape(2,g)*cq(:,2) !  in-plane components
        !   !stran(1) = shape(1,g)*cq(1,1) + shape(2,g)*cq(1,2)        !U^2(1,1)
        !   !stran(2) = shape(1,g)*cq(2,1) + shape(2,g)*cq(2,2)        !U^2(2,2)
        !   !stran(4) = shape(1,g)*cq(3,1) + shape(2,g)*cq(3,2)        !U^2(1,2)
        !   stran(5:6) = shape(1,g)*vas(1:2,1) + shape(2,g)*vas(1:2,2) !transverse shear components
        !   !stran(5) = shape(1,g)*vas(1,1) + shape(2,g)*vas(1,2)      !U^2(1,3)
        !   !stran(6) = shape(1,g)*vas(2,1) + shape(2,g)*vas(2,2)      !U^2(2,3)
        !   stran(3) = c33*fac                                         !U^2(3,3)
        !   CALL rubber3d(propi,stran,mat%matdef(8),mat=daux)          !compute D ==> daux
        !   daux = daux*voli                                           !D3 * dvol
         CASE DEFAULT !(7,92) !92 Simplified composite model
           cm      = d
         END SELECT
       ELSE  ! nlayr /= 0
         cm      = d
       END IF

       IF( nlayr == 0 .AND. mtype /= 6 )THEN    ! not for rubbers
         ! scale D matrix
         k = 0
         DO i=1,nstre
           DO j=i,nstre
             k = k+1
             daux(k) = voli*cm(i,j)
           END DO
         END DO
       END IF
       CALL bmat27(bm1,bs1,b3(:,:,gp,:),shm(:,g),shs(:,g),sht(:,g),fac,bmatx,easts)        !interpolate B matrix
!       WRITE(58,"(36e15.6)")bmatx(:,:,:)
!       WRITE(58,"('---')")
!       IF(ielem == 1 )THEN
!           WRITE(58,"(e15.5)")fac
!           WRITE(58,"(12e13.4)")b3(:,:,gp,1)
!           WRITE(58,"(12e14.5)")bmatx(:,:,3)
!       END IF
       CALL btdbpr(bmatx(1,1,1),daux(1),stiff(1),ndofe,nstre) ! B^T D B
     END DO
   END DO
!   IF( ielem == 1381 ) THEN
!      WRITE(58,"('stiffness matrix Material part',i5)")e%numel
!      jj = 1
!      DO i=1,ndofe
!        k = i
!        DO j=1,i-1
!          line(j) = stiff(k)
!          k = k + ndofe-j
!        END DO
!        DO j=i,ndofe
!          line(j) = stiff(jj)
!          jj = jj + 1
!        END DO
!        WRITE(58,"(35(E19.12,','),E19.12,';')")line
!      END DO
!   END IF
   ! Geometric matrix for in plane components
   CALL kgmm27(e%sem,stiff,ansmm,e%ipcdm)
   ! Kg for transverse shear   Check if improves convergence (a little)
   ! CALL kgms27(e%nfdas,e%ses,stiff,nassp)
   ! Kg for transverse stress  Check if improves convergence (nothing)
   ! CALL kgmt27(e%cartd,e%set,stiff)
   ! condense EAS parameter
!   IF( ielem == 1 ) THEN
!      WRITE(58,"('stiffness matrix before condensing',i5)")e%numel
!      jj = 1
!      DO i=1,ndofe
!        k = i
!        DO j=1,i-1
!          line(j) = stiff(k)
!          k = k + ndofe-j
!        END DO
!        DO j=i,ndofe
!          line(j) = stiff(jj)
!          jj = jj + 1
!        END DO
!        WRITE(58,"(35(E19.12,','),E19.12,';')")line
!      END DO
!   END IF
   IF(easts == 2 ) CALL cond27(stiff,e%h,e%ka,ndofe)
!   IF( ielem == 1 ) THEN
!      WRITE(58,"('------')")
!      WRITE(58,"('stiffness matrix after condensing',i5)")e%numel
!      jj = 1
!      DO i=1,ndofe
!        k = i
!        DO j=1,i-1
!          line(j) = stiff(k)
!          k = k + ndofe-j
!        END DO
!        DO j=i,ndofe
!          line(j) = stiff(jj)
!          jj = jj + 1
!        END DO
!        WRITE(58,"(35(E19.12,','),E19.12,';')")line
!      END DO
!   END IF
!   IF( ielem == 1381 )  WRITE(58,"('------')")
   ! add to global stiffness
   CALL stiaux(nnode,e%lnods,ndofe,ndime,stiff(1),force(1),gstif(1) )
   !     i,j,jj,k
   !WRITE(58,"('stiffness matrix element',i5)")e%numel
   !jj = 1
   !DO i=1,ndofe
   !  k = i
   !  DO j=1,i-1
   !    line(j) = stiff(k)
   !    k = k + ndofe-j
   !  END DO
   !  DO j=i,ndofe
   !    line(j) = stiff(jj)
   !    jj = jj + 1
   !  END DO
   !  WRITE(58,"(35(E19.12,','),E19.12,';')")line
   !END DO
   !OPEN(47,FILE='el'//TRIM(inttoch(ielem,2))//'.msh',FORM='FORMATTED',STATUS='UNKNOWN')            !open res file
   !WRITE(47,"('MESH ""ONE"" dimension = 3 ElemType Prism         Nnode = 15',/,'Coordinates')")
   !DO i=1,12
   !  WRITE(47,"(i10,3e15.5)")i,x(:,i)
   !END DO
   !WRITE(47,"(i10,3e15.5)")13,(x(:,1)+x(:,7))/2d0
   !WRITE(47,"(i10,3e15.5)")14,(x(:,2)+x(:,8))/2d0
   !WRITE(47,"(i10,3e15.5)")15,(x(:,3)+x(:,9))/2d0
   !WRITE(47,"('End Coordinates')")
   !WRITE(47,"('Elements')")
   !WRITE(47,"('   1   1   2   3   7   8   9   4   5  6   13  14  15  10  11  12   1')")
   !WRITE(47,"('End Elements')")
   !CLOSE (47)
   e => e%next
 END DO
 RETURN

 END SUBROUTINE stif27

 SUBROUTINE cond27(k,h,ka,n)
 IMPLICIT NONE
 ! dummy arguments
 INTEGER(kind=4), INTENT(IN) :: n          !Number of element DOFs
 REAL(kind=8), INTENT(IN) :: ka(:),h(:,:)
 REAL(kind=8), INTENT(IN OUT) :: k(:)
 ! local variables
 INTEGER(kind=4) :: i,j,g,l
 REAL(kind=8) :: f(ngaup)

 !WRITE(58,"(3e16.6)")ka                !TEMP
 !WRITE(58,"(3e16.5)")(h(i,:),i=1,36)   !TEMP

 l = 0
 DO i=1,n
   DO g=1,ngaup
     f(g) = h(i,g)/ka(g)
   END DO
   DO j=i,n
     l = l+1
     k(l) = k(l) - DOT_PRODUCT(f,h(j,:))
   END DO
 END DO

 RETURN

 END SUBROUTINE cond27
