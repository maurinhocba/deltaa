	 SUBROUTINE acvd25(heade,lside,nelem,ifpre,nbs,bhead)
 !******************************************************************
 !
 !*** updates internal node numbering and activates degrees of freedom
 !
 !******************************************************************

 USE esets_db, ONLY : gnods, gelem !INTENT(OUT) gnods(maxnn,melen)
 IMPLICIT NONE

 ! dummy arguments

 LOGICAL, INTENT(IN OUT) :: lside !flag TRUE if topology already computed
 INTEGER (kind=4):: nelem,      & !(IN) number of elements
                    ifpre(:,:)    !(OUT) active DOFs
 INTEGER (kind=4):: nbs           !(OUT) number of branching sides
 TYPE (ele25), POINTER :: heade   !pointer to first element in the set
 TYPE (sideb), POINTER :: bhead   !pointer to first branching side

 ! local variables
 INTEGER (kind=4) inode,j,k,n,m,nbn
 TYPE (ele25), POINTER  :: e                     !element pointers
 TYPE (sideb), POINTER :: si      !pointer to a branching side

 !***  create topological array  lnods(5:12,nelem)

 IF(.NOT.lside) CALL nghb25(lside,nelem,nbs,heade,bhead)

 !*** activates degrees of freedom


 e => heade                         !point to first element
 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT   !if all elements processed, Exit loop
   DO inode = 1,4                   !for each node in the element
     IF( ifpre(1,e%lnods(inode)) == 1 ) & !to avoid to overwrite RIGID constraints
       ifpre(1:3,e%lnods(inode)) = 0 !release DOFs
   END DO
   gelem = gelem + 1                !update total number of elements
   gnods(1:4,gelem) = e%lnods(1:4)  !pass the first four nodes
   nbn = 4
   DO inode =1,4                        !for each side in the patch
     j = fn(inode)                     !first node of associated side element (local)
     n = e%lnods(j)                !first node of associated side element (global)
     IF(n > 0) THEN               ! adjacent element exist ?
       nbn = nbn + 1
       gnods(nbn,gelem) = n
       j = j+1
       m = e%lnods(j)                !second node of associated side element (global)
       nbn = nbn + 1
       gnods(nbn,gelem) = m
     ELSE IF( n < 0 )THEN !branching side
       si => e%si(inode)%p !point SI to the corresponding branching side
       j = -n          !position in side conns
       ! generate connectivities for enlarged element
       k = nbn + 1                     !next position
       nbn = nbn + 2*si%nn-2             !update number of nodes
       gnods(k:nbn,gelem) = (/ ABS(si%lnods(1:2*j-2)), ABS(si%lnods(2*j+1:si%nn*2)) /) !+/-
     END IF
   END DO
   e => e%next                      !point to next element
 END DO

 RETURN
 END SUBROUTINE acvd25
