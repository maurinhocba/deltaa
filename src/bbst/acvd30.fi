 SUBROUTINE acvd30(ifpre,heade,nelem,lside,npoin)
 !******************************************************************
 !
 !*** updates internal node numbering and activates degrees of freedom
 !
 !******************************************************************
 USE esets_db, ONLY : gnods, gelem !INTENT(OUT) gnods(maxnn,melen)
 IMPLICIT NONE

 ! dummy arguments
 LOGICAL, INTENT(IN OUT) :: lside !flag TRUE if topology already computed
 INTEGER (kind=4):: ifpre(:,:)    !(OUT) active DOFs
 INTEGER (kind=4):: nelem,npoin   !number of elements, number of nodes
 TYPE (ele30), POINTER :: heade   !pointer to first element in the set

 ! local variables
 INTEGER (kind=4) inode,i
 TYPE (ele30), POINTER  :: e                     !element pointers

 !***  create topological array  lnods(4:6,nelem)

 IF (.NOT.lside) CALL top_array30(lside,nelem,heade)
 !
 !*** activates degrees of freedom
 !
 e => heade                         !point to first element
 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT   !if all elements processed, Exit loop

   DO inode = 1,3                   !for each node in the element
     IF( ifpre(1,e%lnods(inode)) == 1 ) &   !to avoid to overwrite RIGID constraints
         ifpre(1:3,e%lnods(inode)) = 0      !release DOFs
   END DO
   gelem = gelem + 1                !update total number of elements
   i = 0
   DO inode =1,12
     IF(e%lnods(inode) > 0)THEN
       i = i+1
       gnods(i,gelem) = e%lnods(inode)  !pass to global array
     END IF
   END DO
   IF( i < 12 ) gnods(i+1:12,gelem) = 0
   e => e%next                      !point to next element
 END DO

 RETURN
 END SUBROUTINE acvd30
