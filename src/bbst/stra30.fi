 SUBROUTINE stra30(numel,a,b,cdn,x,t3,t,tns,h,bcode,bounc,nab,stran,lb)

 !     Compute first and second fundamental forms for element CST-BST (TLF)
 IMPLICIT NONE

 REAL (kind=8), INTENT(IN) :: b(3),     &  !cartesian derivatives local x1
                              a(3),     &  !cartesian derivatives local x2
                              cdn(6,3)     !side normal derivatives
 REAL (kind=8), INTENT(IN OUT) :: x(3,12)     !nodal cooordinates
 REAL (kind=8), INTENT(OUT) :: t(3,2),     & !derivatives of the element configuration
                               t3(3),      & !element normal
                               tns(3,3),   & !normal gradient at each side
                               h(3,3)        !h vectors
 REAL (kind=8), POINTER :: nab(:,:)
 LOGICAL, INTENT(IN) :: bounc(6)     !True = node is clamped
 INTEGER (kind=4), INTENT(IN) :: bcode,numel
 REAL (kind=8), INTENT(OUT), OPTIONAL :: stran(6), & !1st & 2nd fund. forms
                                         lb          !thickness ratio


 !LOGICAL :: dump
 INTEGER (kind=4) :: i
 REAL (kind=8) :: ln,ds,ts(3),tb(3),y(3),lbb,xc(3,6)



 !dump = .FALSE. ! numel == 12
 !for main triangle
 t(:,1) = -MATMUL(x(:,1:3),b(:))     ! x(1)
 t(:,2) = +MATMUL(x(:,1:3),a(:))     ! x(2)
 CALL vecpro(t(1,1),t(1,2),t3(1))    ! normal * rA
 CALL vecuni(3,t3(1),lbb)            ! normalizes normal vector

 ! compute ficticious nodes at boundary
 SELECT CASE (bcode)
 CASE (0)  !for inner nodes
   xc(:,:) = MATMUL(x(:,:),ar)
   !nothing
 CASE (1)
   x(:,10) = x(:,1) + x(:,5) - x(:,3)
   x(:,11) = x(:,6) + x(:,1) - x(:,2)
   IF( bounc(1) .AND. bounc(5) )  CALL proyx30(x,10,1,5,3,nab(:,1)) !if clamped or symmetry line at node 1
   IF( bounc(1) .AND. bounc(6) )  CALL proyx30(x,11,6,1,2,nab(:,2)) !if clamped or symmetry line at node 1
   xc(:,:) = MATMUL(x(:,:),ar)
 CASE (2)
   x(:,10) = x(:,1) + x(:,5) - x(:,3)
   x(:,11) = x(:,6) + x(:,1) - x(:,2)
   x(:,12) = x(:,2) + x(:,6) - x(:,1)
   x(:, 7) = x(:,4) + x(:,2) - x(:,3)
   IF( bounc(1) )THEN
     IF( bounc(5))  CALL proyx30(x,10,6,5,3,nab(:,1)) !if clamped or symmetry line at node 1
     IF( bounc(6))  CALL proyx30(x,11,6,5,2,nab(:,1)) !if clamped or symmetry line at node 1
   END IF
   IF( bounc(2)) THEN !if clamped or symmetry line
     IF( bounc(6)) CALL proyx30(x,12,4,6,1,nab(:,2)) !if clamped or symmetry line at node 1
     IF( bounc(4)) CALL proyx30(x, 7,4,6,3,nab(:,2)) !if clamped or symmetry line at node 1
   END IF
   xc(:,:) = MATMUL(x(:,:),ar)
 CASE (3)
   x(:,6) = x(:,2) + x(:,1) - x(:,3)
   IF( bounc(1) .AND. bounc(2)) CALL proyx30(x, 6,2,1,3,nab(:,1))
   xc(:,1:5) = MATMUL(x,ar(:,1:5))
   xc(:,6) = (-x(:,10) +9d0*x(:,1) +9d0*x(:,2) -x(:,7))/16d0
 CASE (4)
   x(:,10)= x(:,1) + x(:,5) - x(:,3)
   x(:,6) = x(:,2) + x(:,1) - x(:,3)
   IF( bounc(1) .AND. bounc(5)) CALL proyx30(x,10,1,5,3,nab(:,1))
   IF( bounc(1) .AND. bounc(2)) CALL proyx30(x, 6,2,1,3,nab(:,2))
   xc(:,1:5) = MATMUL(x,ar(:,1:5))
   !xc(:,6)   = (-x(:,10) +9d0*x(:,1) +9d0*x(:,2) -x(:,7))/16d0
   xc(:,6)   = (+3d0*x(:,1) +6d0*x(:,2) -x(:,7))/8d0
 CASE (5)
   x(:,6) = x(:,2) + x(:,1) - x(:,3)
   x(:,7) = x(:,4) + x(:,2) - x(:,3)
   IF( bounc(1) .AND. bounc(2)) CALL proyx30(x, 6,2,1,3,nab(:,1))
   IF( bounc(2) .AND. bounc(4)) CALL proyx30(x, 7,4,2,3,nab(:,2))
   xc(:,1:5) = MATMUL(x,ar(:,1:5))
   xc(:,6)   = (-x(:,10) +6d0*x(:,1) +3d0*x(:,2))/8d0
   !xc(:,6)   = (-x(:,10) +9d0*x(:,1) +9d0*x(:,2) -x(:,7))/16d0
 CASE (6)
   x(:,5) = x(:,1) + x(:,3) - x(:,2)
   x(:,6) = x(:,2) + x(:,1) - x(:,3)
   !x(:,10) = 2d0*x(:,1) - x(:,2)
   !x(:,11) = 2d0*x(:,1) - x(:,3)
   IF( bounc(3) .AND. bounc(1)) CALL proyx30(x, 5,1,3,2,nab(:,1))
   IF( bounc(1) .AND. bounc(2)) CALL proyx30(x, 6,2,1,3,nab(:,2))
   xc(:,1:4) = MATMUL(x,ar(:,1:4))
   xc(:,5)   = (+3d0*x(:,1) +6d0*x(:,3) -x(:,8))/8d0
   xc(:,6)   = (+3d0*x(:,1) +6d0*x(:,2) -x(:,7))/8d0
   !xc(:,5)   = (-x(:,11) +9d0*x(:,1) +9d0*x(:,3) -x(:,8))/16d0
   !xc(:,6)   = (-x(:,10) +9d0*x(:,1) +9d0*x(:,2) -x(:,7))/16d0
 END SELECT
 !WRITE(58,"('numel',i5,i3)")numel,bcode
 IF( bcode == 30 )RETURN
 !WRITE(58,"(i3,3E15.5)")(i,x(1:3,i),i=1,12)
 !WRITE(58,"(3E16.5)")xc(1:3,4:6)
 !WRITE(58,"(2E15.6)")xc(1:2,1:6)
 h  = 0d0        !initializes h vectors
 DO i=1,3        !for each side
   tns(1:3,i) = MATMUL(xc(1:3,1:6),cdn(1:6,i))  ! gradients normal to sides
   !IF( dump )WRITE(58,"(2f10.4,3e15.4)")b(i),-a(i),tns(:,i)
   ! vectors to compute Bending part (2nd fundamental form)
   h(:,1) = h(:,1) - b(i)*b(i)*tns(:,i)                 ! h11
   h(:,2) = h(:,2) - a(i)*a(i)*tns(:,i)                 ! h22
   h(:,3) = h(:,3) + a(i)*b(i)*tns(:,i)                 ! h12
 END DO

 IF( .NOT.PRESENT(stran) )RETURN   ! Only vectors T and H required

 lb = 1d0/lbb                             !computes thickness ratio  t/t0
 ! Membrane part (1st fundamental form, metric tensor at mid-surface)
 stran(1) = DOT_PRODUCT(t(:,1),t(:,1))
 stran(2) = DOT_PRODUCT(t(:,2),t(:,2))
 stran(3) = DOT_PRODUCT(t(:,1),t(:,2))
 !IF( dump )WRITE(58,"(3x,3e15.5)")stran(1:3)

! Bending part (2nd fundamental form multiplied by 2)
 !IF( dump )WRITE(58,"(3e15.4)")t(:,1:2),t3
 stran(4) = DOT_PRODUCT(h(:,1),t3)
 stran(5) = DOT_PRODUCT(h(:,2),t3)
 stran(6) = DOT_PRODUCT(h(:,3),t3)
 !IF( dump )WRITE(58,"(3e15.4)")h
 !IF( dump )WRITE(58,"(3e15.5)")stran(4:6)
 stran(4:6) = 2d0*stran(4:6)                         !2 kij

 RETURN
 END SUBROUTINE stra30
!------------------------------
 SUBROUTINE proyx30(x,i,j,k,l,t)
     ! modifies boundary node for symmetry or clamped condition
     IMPLICIT NONE
     REAL(kind=8), INTENT(IN) :: t(3)             !tn, normal to shell at boundary
     REAL(kind=8), INTENT(IN OUT) :: x(:,:)
     INTEGER(kind=4), INTENT(IN) :: i,          & !slave node
                                    j,k,l !       !master nodes

     REAL(kind=8) :: f,ts(3),tb(3),y(3)  !length & side & normal vector

     ts = x(:,j) - x(:,k)                !side vector
     CALL vecuni(3,ts,f)                 !unit vector
     CALL vecpro(t,ts,tb)               !surface normal at boundary
     y = 2d0*x(:,l) - x(:,j) - x(:,k)    !twice the difference vector
     f = DOT_PRODUCT(y,tb)               !twice the proyection
     x(:,i) = x(:,i) + f*tb              !corrected position

     RETURN
 END SUBROUTINE proyx30
