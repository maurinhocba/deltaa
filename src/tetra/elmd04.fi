 SUBROUTINE elmd04 (nelem, heade, taile, iwrit)
 !******************************************************************
 !
 !*** READ element DATA for 3-D tetrahedral element (TLF)
 !
 !******************************************************************
 IMPLICIT NONE

 INTEGER (kind=4) :: nelem, iwrit
 TYPE (ele04), POINTER :: heade,taile !pointers to first and last elements

 TYPE (section), POINTER :: sec     !auxiliar pointer
 LOGICAL found,plast
 INTEGER (kind=4) :: i,chnode,isec,mtype,nucom,osec
 INTEGER (kind=4) :: mats(3) = (/ 1,5,6 /)  !acceptable material types
 TYPE (ele04), POINTER :: elem      !auxiliar pointer


 ! *** READ the element nodal connections, and the property numbers.

 IF(iwrit == 1) WRITE (lures,"(//6X,'ELEMENT     MAT       NODE NUMBERS ', &
                             & 10x,'angle')")

 osec = -1

 DO
   ! loop over elements

   CALL listen('ELMD04')          !read a card
   IF (exists('ENDELE')) EXIT     !if key word END_ELEMENT read, exit loop

   nelem = nelem + 1         !increase element counter
   ALLOCATE (elem)           !reserve memory for data

   elem%numel = INT (param(1))    !element label
   isec = INT (param(2))         !associated material
   IF( isec /= osec )THEN        !checks
     CALL sect_search (isec,found,sec)
     IF(.NOT.found)CALL runend('ELMD04: Invalid Section Number used')
     mtype = sec%secty        !check section type for element
     IF( mtype /= 0 ) CALL runend('ELMD04: Invalid sect. type for SOLID')
     mtype = sec%mtbas%mtype       !check material type for element
     IF( .NOT. ANY(mtype == mats) )  &
       CALL runend('ELMD04: Invalid Mat. type for SOLID')
     plast = sec%mtbas%matdef(3) > 1  !plasticity
     IF( mtype == 5 .AND. plast ) &
       CALL runend('TETRA: Orthotropic and plastic Not possible')
     nucom = sec%iprop(2)     !number of material components
     osec = isec
   END IF

   elem%matno = isec       !store the section label

   elem%lnods(1:4) = INT (param(3:6))  !connectivities
   elem%lnods(5:8) = 0                 !initializes LSIDE
   elem%angle(1:3) = param(7:9)  ! angle between Default Ort_1 and local Ort_1
   !    echo according to flag
   IF(iwrit == 1) WRITE(lures,"(i13,i8,4i7,3F10.4)")elem%numel,isec, &
                                                   elem%lnods(1:4),elem%angle
   !     original nodes are changed
   DO i=1,4
     elem%lnods(i) = chnode(elem%lnods(i))
   END DO

   IF( plast )THEN
     ALLOCATE (elem%gausv(nvare*nucom)) ! !reserve space for Gauss variables
   ELSE
     ALLOCATE (elem%gausv(1))     !reserve space for Gauss variables
   END IF
   elem%gausv = 0d0                     !initializes
   CALL add_ele04e (elem, heade, taile) !add element to list

 END DO

 END SUBROUTINE elmd04
