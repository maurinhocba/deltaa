 SUBROUTINE resv04( heade, coora, resid, ierr, ttime)
 !-------------------------------------------------------------------
 !
 !          EVALUATION OF INTERNAL FORCES ELEMENT T-L 3-D SOLID
 !
 !-------------------------------------------------------------------
 USE npo_db, ONLY : coord
 IMPLICIT NONE

 ! dummy arguments
 INTEGER (kind=4), INTENT(OUT) :: ierr        !flag for error detection
 REAL(kind=8),INTENT (IN) :: coora(:,:),    & !present coordinates
                             ttime            !present total time
 REAL(kind=8),INTENT (IN OUT) :: resid(:,:)   !internal nodal forces
 TYPE (ele04), POINTER  :: heade              !pointer to first element

 ! local variables
 LOGICAL, SAVE :: newmt,   & ! TRUE if material constant computation necessary
                  newpm,   & ! TRUE if plasticity constants must be computed
                  elast,   & ! TRUE if material is elastic
                  bbar,    & ! TRUE to decouple shear and volumetric terms
                  plast      ! TRUE if plasticity is to be considered
 INTEGER (kind=4), SAVE :: osec = -1,  & !associated material of previous element
                           mtype         !associated material type
 REAL (kind=8), SAVE ::  km,gm         !bulk modulus and shear modulus

 INTEGER (kind=4) ielem,             & !element number
                  is,                & !isotropic hardening model
                  isec,              & !associated material
                  i,j,k,l,m            !different indexes

 REAL (kind=8) str(6),     & !stresses (different measures)
               stran(6),   & !C=U^2  also Log strains
               bdev(12,6), & !B matrix
               bvol(24),   & !B matrix
               x(3,4),y(3,4),cds(4,3,4),  & !nodal coordinates of the element
               t(3,3),     & !deformation gradient at each face
               delta,      & !volumetric strain/3, element volume
               press,jac,  & !first stress invariant (mean pressure)
               rl(3,8)       !nodal internal equivalent forces

 REAL (kind=8) :: dis(24)
 LOGICAL :: found

 TYPE (ele04), POINTER :: e      !pointer to an element data
 TYPE (section), POINTER, SAVE :: sec  !pointer to an section data
 TYPE (mater), POINTER, SAVE :: mat    !pointer to an material data


 !***  Computes nodal internal forces

 osec = -1                           !no previous material
 e => heade                          !point to first element in the list
 DO                                  !loop over all the elements
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel                   !element number
   isec = e%matno                    !associated material

   !     SET MATERIAL CONSTANTS
   newmt = osec /= isec              !same material than previous ?
   IF(newmt)THEN                     !if new material, get properties
     newpm = .TRUE.
     osec = isec                     !keep present material
     CALL sect_search(isec,found,sec) !point to associated sec
     mat => sec%mtbas                !point to associated material
     mtype = mat%mtype               !type of base material
     ! ONLY MTYPES 1 IS  ALLOWED
     IF( mtype == 1)THEN              !Isotropic Elastic - Anisotropic Plastic
       km = mat%prope(4)                  ! bulk modulus
       gm = mat%prope(3)                  ! shear modulus
     END IF
   END IF

   !*** computes actual configuration
   x = coord(:,e%lnods(1:4))
   dis(1:12) = RESHAPE(coora(:,e%lnods(1:4))- x ,(/12/))
   k = 13
   DO i=1,4
     l = e%lnods(i+4)
     IF( l > 0 ) THEN          !opposite node exists
       y(:,1:3) = x(:,kk(:,i)) !first three nodes
       y(:,4)   = coord(:,l)   !fourth (opposite node)
       CALL jacob5(cds(1,1,i),nd0(1,1),jac,y,4,ielem,ierr)
       dis(k:k+2) = coora(:,l) - y(:,4)
     ELSE
       dis(k:k+2) = 0d0
     END IF
     k = k+3
   END DO
   t(:,:) = MATMUL(x,e%cd) !x(1:3) Main element derivatives

   CALL bmat04(e%cd,bdev,t,bvol,cds,e%facs)

   DO i=1,6
     stran(i) = DOT_PRODUCT(bdev(:,i),dis(1:12))
   END DO
   delta = DOT_PRODUCT(bvol,dis)

   str = gm*stran                        !Trial elastic shear stresses
   str(1:3) = 2d0*str(1:3)               !Trial elastic shear stresses
   press = km*delta     !mean pressure

   stran = str*e%dvol         !Original dvol used (TLF)
   delta = press*e%dvol
   str(1:3) = str(1:3) + press  !sum on diagonal stresses for all Gauss points
   e%stint = str

   !***   compute Int(B**t*sigma) on element level
   CALL proma3(rl(1,1),bdev(1,1),stran(1),12,6,.TRUE.)  !nodal contributions
   CALL proma3(rl(1,1),bvol(1),delta,24,1,.FALSE.)  !nodal contributions

   DO i=1,8             !for each node in the element
     l = e%lnods(i)     !node
     IF( l > 0 ) resid(1:3,l) = resid(1:3,l)+rl(1:3,i) !sum internal force
   END DO

   e => e%next          !point to next node in the list
 END DO

 RETURN
 END SUBROUTINE resv04
