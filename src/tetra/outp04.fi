 SUBROUTINE outp04(b1,b2,iwrit,heade,nreqs,narch,ngrqs,ttime)
 !--------------------------------------------------------------------
 !
 !       output routine for 3-D solid element (TLF)
 !
 !--------------------------------------------------------------------
 IMPLICIT NONE

 INTEGER (kind=4), INTENT (IN) :: iwrit,    &!flag for output into ASCII file
                                  nreqs,    &!number of elements for output
                                  narch      !output file number
 INTEGER (kind=4), POINTER :: ngrqs(:)   !element numbers for output
 REAL (kind=8), INTENT(IN) :: ttime
 LOGICAL, INTENT(IN) :: b1,   & !flag for output at selected points
                        b2      !flag for global output
 TYPE (ele04), POINTER  :: heade  !pointer to first element

 INTEGER (kind=4) isec,l,m,ielem,nucom,ic,osec,iv,mtype
 REAL (kind=8) stres(6),strpl,sxx,syy,sxy,szz,sxz,syz,vm,preys
 TYPE (ele04), POINTER :: e
 TYPE (section), POINTER :: sec
 !REAL (kind=8), POINTER :: volfr(:)
 LOGICAL :: found,newm,yield

 !     output at selected elements for HISTORY

 IF(b1 .AND. (nreqs > 0)) THEN
   osec = -1
   WRITE(narch,ERR=9999) ttime                  !write process time
   DO l=1,nreqs                        !for each element
     ielem = ngrqs(l)
     e => heade                   !point to first element
     DO                           !search for element with label IELEM
       IF( e%numel == ielem )EXIT !if found, exit search
       e => e%next                !point to next element
     END DO
!     isec = e%matno
!     newm = isec /= osec
!     IF( newm )THEN
!       CALL sect_search(isec,found,sec)
!       yield = sec%mtbas%matdef(3) > 1
!       osec = isec
!     END IF
     stres = e%stint(1:6)     !integrated Kirchhoff stresses
!     IF( yield )THEN
!       strpl = e%gausv( 7) !plastic strain of first component
!       preys = 0d0 !actual yield stress ??
!     ELSE
       strpl = 0d0
       preys = 0d0 !actual yield stress
!     END IF
     vm = (stres(1)+stres(2)+stres(3))/3d0
     sxx = stres(1)-vm         !
     syy = stres(2)-vm         !
     szz = stres(3)-vm         !
     sxy = stres(4)            !Stress XY
     sxz = stres(5)            !Stress XZ
     syz = stres(6)            !Stress YZ
     vm = SQRT(1.5d0*(sxx**2+syy**2+szz**2+2d0*sxy**2+2d0*sxz**2+2d0*syz**2))  !Von Mises stress
     WRITE(narch)(stres(m),m=1,6),strpl,vm,preys
     !WRITE(narch)e%gausv(1:4),stres(1:4),strpl
   END DO
 END IF
 !
 ! *** writes complete stress state on file 16 for post-process
 !
 IF(b2) THEN
   IF(iwrit == 1) WRITE(lures,900)        !if echo to ASCII file
   osec = -1                              !initializes
   e => heade                             !point to first element
   DO                                     !loop over all elements
     IF (.NOT.ASSOCIATED (e) ) EXIT       !if last element processed, exit
!     isec = e%matno                      !associated material
!     newm = isec /= osec
!     IF( newm )THEN
!       CALL sect_search(isec,found,sec)
!       yield = sec%mtbas%matdef(3) > 1
       !nucom = sec%iprop(2)            !number of material components
       !mtype = sec%mtbas%mtype         !type of base material
       !IF( mtype == 9 ) volfr = sec%mtbas%props(1:nucom) !volume fraction
!       osec = isec
!     END IF
     !-------------------------------------------------------------

     stres = e%stint(1:6)          !Kirchhoff stresses on material axis
     strpl = 0d0                   !equivalent plastic strain
     vm    = 0d0                   !von Mises equivalent stress
!     IF( yield )THEN
       !IF( nucom == 1)THEN         !monocomponent material
!         strpl = e%gausv(7)   !equivalent plastic strain
       !ELSE                        !multi-component material
       !  iv = 7                    !initializes pointer
       !  DO ic=1,nucom             !for each component
       !    strpl = strpl+e%gausv(iv)*volfr(ic)  !weighted eq pl st
       !    iv = iv+7               !updates pointer
       !  END DO
       !END IF
!     END IF
     vm = (stres(1)+stres(2)+stres(3))/3d0
     sxx = stres(1)-vm         !
     syy = stres(2)-vm         !
     szz = stres(3)-vm         !
     sxy = stres(4)            !Stress XY
     sxz = stres(5)            !Stress XZ
     syz = stres(6)            !Stress YZ
     vm = SQRT(1.5d0*(sxx**2+syy**2+szz**2+2d0*sxy**2+2d0*sxz**2+2d0*syz**2))  !Von Mises stress
     WRITE(16,ERR=9999)(stres(l),l=1,6),strpl,vm
     IF(iwrit == 1)WRITE(lures,920,ERR=9999)e%numel,stres(1:6),strpl,vm

     e => e%next                   !point to next element
   END DO

 END IF

 900 FORMAT(5X,'STRESSES FOR 3-D SOLID ELEMENTS in MATERIAL AXES'//   &
 &       ' ELEM   S-XX',9X,'S-YY',9X,'S-ZZ',9X,'S-XY',9X,'S-XZ',9X,'S-YZ', &
 &       9X,'EPST',9X,'VMST')
 920 FORMAT(i5,8e13.4)
 RETURN
 9999 CALL runen2('')
 END SUBROUTINE outp04
