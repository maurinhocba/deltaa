 SUBROUTINE rztmat09m(dmat,secp,sec,secn)
 ! computes phi and D for standard RZT
 IMPLICIT NONE
 ! dummy arguments
 REAL(kind=8), INTENT(OUT) :: dmat(:)   !section stiffness
 TYPE(section), POINTER :: sec,secp,secn
 ! local variables
 INTEGER(kind=4) :: nlayr,imat,il,ib,ie,ll,np
 REAL(kind=8) :: zk,thickl,f1_1,f2_1,f1_2,f2_2,el,gl,f11,dp(10),dt(6),g1
 TYPE (mater), POINTER :: mat
 REAL(kind=8), ALLOCATABLE :: phi(:,:),beta(:,:)


 ! Compute phi function at nodes
 ll = sec%iprop(5)          !test layer (not used)
 nlayr = sec%iprop(1)       !number of layers
 ALLOCATE( phi(0:nlayr,2),beta(nlayr,2) )
 np = 28+2*nlayr  !pointer
 IF( sec%secno /= secp%secno )THEN
   CALL rzt(nlayr,phi(:,1),beta(:,1),sec%iprop,secp%iprop,sec%rprop(1),sec%rprop(np:))
   !    rzt(nlayr,phi,     beta,     iprop,    ipro1,     thick,       rprop)
   dmat(17:18) = 0d0 ; dmat(19:19+nlayr) = phi(:,1) ; dmat(20+nlayr:) = beta(:,1)
 ELSE
   ib = 27
   ie = ib+nlayr
   phi(:,1) = sec%rprop(ib:ie)
   ib= ie+1
   ie= ib+nlayr-1
   beta(:,1) = sec%rprop(ib:ie)
 END IF
 IF( sec%secno /= secn%secno )THEN
   CALL rzt(nlayr,phi(:,2),beta(:,2),sec%iprop,secn%iprop,sec%rprop(1),sec%rprop(np:))
   !    rzt(nlayr,phi,     beta,     iprop,    ipro1,     thick,       rprop)
   dmat(17:18) = 0d0 ; dmat(19:19+nlayr) = phi(:,2)  ; dmat(20+nlayr:) = beta(:,2)
 ELSE
   ib = 27
   ie = ib+nlayr
   phi(:,2) = sec%rprop(ib:ie)
   ib= ie+1
   ie= ib+nlayr-1
   beta(:,2) = sec%rprop(ib:ie)
 END IF

 !  compute stiffness matrix
 dp = 0d0            !initializes
 dt = 0d0            !initializes
 DO il=1,nlayr                           !for each layer
   thickl = sec%rprop(ie+2*il-1)               !layer thickness
   g1 = thickl*thickl/12d0                     !auxiliar h^2/12
   zk = sec%rprop(ie+2*il)                     !update Z position to layer mid-point z_k-bar
   !RZT
   f1_1 = (phi(il,1) + phi(il-1,1))/2d0        !phi_k-bar 1
   f2_1 = beta(il,1)*zk                        !beta1*zk
   f1_2 = (phi(il,2) + phi(il-1,2))/2d0        !phi_k-bar 2
   f2_2 = beta(il,2)*zk                        !beta2*zk
   imat = sec%iprop(il+5)         !associated material (pointer)
   mat => pmats(imat)%p           !point to material
   SELECT CASE (mat%mtype)
   CASE(1)   !isotropic
     el = mat%prope(1)
     gl = mat%prope(3)
   CASE(5)   !orthotropic
     el = mat%prope(7)
     gl = mat%prope(13)       !RZT G13
   END SELECT
   el = el*thickl                              !scale layer stiffness matrix
   gl = gl*thickl                              !scale layer stiffness matrix
   !  components of the integrated stiffness matrix
   !     1  2  3  4     1  2  3
   !        5  6  7        4  5
   !           8  9           6
   !             10
   !in-plane part
   dp( 1) = dp( 1) + el               !membrane part
   dp( 2) = dp( 2) + el*zk            !coupled membrane-bending part
   dp( 5) = dp( 5) + el*(zk*zk+g1)    !bending part
   dt( 1) = dt( 1) + gl               !shear part
   ! Dp(1,1)  phi^T Dk phi
   f11 = f1_1**2+beta(il,1)**2*g1                                     !
   dp(8) = dp(8) + el*f11
   f11 =  f1_2**2+beta(il,2)**2*g1
   dp(10) = dp(10) + el*f11
   f11 = f1_1*f1_2 +beta(il,1)*beta(il,2)*g1
   dp(9) = dp(9) + el*f11
   ! Dp(1,3)
   f11 = + f1_1
   dp(3) = dp(3) + el*f11
   ! Dp(1,4)
   f11 =  f1_2
   dp(4) = dp(4) + el*f11
   !Dp(2,3)
   f11 =  f1_1*zk+beta(il,1)*g1
   dp(6) = dp(6) + el*f11
   !Dp(2,3)
   f11 =  f1_2*zk+beta(il,2)*g1
   dp(7) = dp(7) + el*f11
   ! Dt(1,1)
   f11 =  beta(il,1)**2
   dt(4) = dt(4) + gl*f11
   f11 =  beta(il,2)**2
   dt(6) = dt(6) + gl*f11
   f11 = beta(il,1)*beta(il,2)
   dt(5) = dt(5) + gl*f11
   ! Dt(1,2)                                     !18
   f11 = beta(il,1)
   IF( il == ll ) dmat(17) = 1d0+f11
   dt(2) = dt(2) + gl*f11
   f11 =  beta(il,2)
   IF( il == ll ) dmat(18) = 1d0+f11
   dt(3) = dt(3) + gl*f11
 END DO
 dp = dp*sec%rprop(4)  !width
 dt = dt*sec%rprop(4)  !width
 WRITE(58,"('phi 1',9e15.5)")phi(:,1)
 WRITE(58,"('bet 1',9e15.5)")beta(:,1)
 WRITE(58,"('phi 2',9e15.5)")phi(:,2)
 WRITE(58,"('bet 2',9e15.5)")beta(:,2)
 WRITE(58,"('Dp',10e15.5)")dp
 WRITE(58,"('Dt',6e15.5)")dt
 ! store components of the integrated stiffness matrix
 dmat(1:10)  = dp
 dmat(11:16) = dt
 DEALLOCATE(phi,beta)
 RETURN
 END SUBROUTINE rztmat09m
 !..........................................................
 SUBROUTINE rzt(nlayr,phi,beta,iprop,ipro1,thick,rprop)
 IMPLICIT NONE
 ! dummy arguments
 ! The layers and z-coordinates must be coincident for both sections
 INTEGER(kind=4), INTENT(IN) :: iprop(:),ipro1(:),nlayr !number of layers

 REAL(kind=8), INTENT(IN) :: thick,    & !total thickness
                             rprop(:)    !2,nlayr  thickness and z coordinate
 ! The layers and z-coordinates must be coincident for both sections

 REAL(kind=8), INTENT(OUT) :: phi(0:),beta(:)   !RZT3 function and derivative
 ! local variables
 INTEGER(kind=4) :: imat,il
 REAL(kind=8) :: thickl,gv(nlayr),gi
 TYPE (mater), POINTER :: mat

 gi = 0d0              !average values of trasnverse modulus
 DO il=1,nlayr              !loop
   imat = iprop(il+5)             !associated material (pointer)
   mat => pmats(imat)%p           !point to material
   SELECT CASE (mat%mtype)
   CASE(1)   !isotropic
     gv(il) = mat%prope(3)
   CASE(5)   !orthotropic
     gv(il) = mat%prope(14)       !RZT G13
   END SELECT
   imat = ipro1(il+5)             !associated material (pointer)
   mat => pmats(imat)%p           !point to material
   SELECT CASE (mat%mtype)
   CASE(1)   !isotropic
     gv(il) = (gv(il) + mat%prope(3))/2d0
   CASE(5)   !orthotropic
     gv(il) = (gv(il) + mat%prope(14))/2d0       !RZT G13
   END SELECT
   gi = gi+rprop(2*il-1)/gv(il)                  ! Int 1/G
 END DO
 gi = thick/gi
 phi(0) = 0d0
 DO il=1,nlayr                           !for each layer
   thickl = rprop(2*il-1)                      !layer thickness
   beta(il) = gi/gv(il) - 1d0
   phi(il) = phi(il-1) + beta(il)*thickl
 END DO
 RETURN
 END SUBROUTINE rzt
