 SUBROUTINE zigzag_pro2(ntype,nstre,secno,st,dst,xc,dis,pr)
 ! computes displacements and stress profiles for beams + RZT++
 IMPLICIT NONE
 !dummy arguments
 REAL(kind=8), INTENT(IN) :: st(:),     & !strains(1:nstre*ngaus,:)
                             dst(:),    & !strains derivative
                             dis(:),    & !axial disp and section rotation
                             xc           !element center
 INTEGER(kind=4), INTENT(IN) :: nstre,  & !number of stresses, presently only for beams
                                ntype,  & !problem type, presently only for beams (ntype=1)
                                secno,  & !section position in array
                                pr        !print options 1:stresses, 2:displacements 3:both
 !local variables
 TYPE(section), POINTER :: sec
 TYPE (mater), POINTER :: mat
 INTEGER(kind=4) :: i,nl,j,ip,ii,ns,nm,ll,k,l,stype,nn,inter
 INTEGER(kind=4), PARAMETER :: n(4) = (/ 13,31,3,13 /) !number of points at each layer
 REAL(kind=8) :: e(2),de(2),z,celoc(6),ce(4),t,tt(2),thick,phiz,betaz,dz,thickl,qi,m,qc,nc,ff
 REAL(kind=8), ALLOCATABLE :: sx(:,:),tx(:),beta(:),phi(:),rprop(:,:),zc(:),dsx(:),disp(:,:)
 REAL(kind=8)  :: width,al,eta,xita,phik,p2,p21,dp2,p31,p3,hip,p3h,dp3h,z1,z2,p2f,p3f,h,dh,w0,x0
 LOGICAL :: prs, prd

 !WRITE(58,"(11e14.5)")st(:),dst(:),dis(:)
 sec => psecs(secno)%p    !point to associated section
 stype = sec%secty        !46
 width = sec%rprop(4)     !beam width
 inter = sec%iprop(4)     !RZT interpolation

 nl = sec%iprop(1)         !number of layers
 nn= SUM(n(1:4))           !number of points in the profile
 thick = sec%rprop(1)      !total thickness
 ALLOCATE( beta(nl),    &  !phi derivative at each mid-layer
           phi(0:nl),   &  !phi at each layer interface
           rprop(2,nl), &  !thick , zk-b of each layer
           zc(1:nn))       !z coordinates
 ALLOCATE( sx(1:nn,2),  &  !axial stress and integrated shear stress
           dsx(nn),     &  !axial stress derivatives before and after each layer interface
           tx(nn))       !shear stress
 ALLOCATE( disp(nn,2))     !axial displacements

 x0 = sec%rprop(51)
 w0 = sec%rprop(52)
 CALL vecasi (nl+1,sec%rprop(53),phi)    ! phi
 j = 54+nl
 CALL vecasi (nl,sec%rprop(j),beta)      ! beta
 j = j+nl
 CALL vecasi (nl*2,sec%rprop(j),rprop)   ! layer thickness and Z position ad mid-layer

 ii=6                                    ! point to first material
 !IF( ntype == 1 )THEN                       ! plane stress
 !  nm = 2                      !moment position
 !  ns = 3                      !shear position
 !ELSE                                       ! plane strain or axilsymmetric
 !  nm = 3
 !  ns = 5
 !END IF

 sx = 0d0                                   ! initializes stresses
 t = 0d0                                    !initializes shear stress at bottom face
 qi= 0d0 ; m = 0d0 ; nc = 0d0; qc = 0d0     !initialiazes shear and moment

 k = 0                                      !initializes counter
 DO i=1,nl                                  ! for each layer
   thickl = rprop(1,i)                          !layer thickness
   dz = thickl/(n(i)-1)                         !sublayer increment
   z1 = rprop(2,i)-thickl/2d0                   !bottom surface of the layer
   z2 = z1+thickl                               !top surface of the layer
   phik = (phi(i-1)+phi(i))/2d0                 !phi at mid-layer
   betaz= beta(i)                               !phi_z
   ip = sec%iprop(ii)                           !associated material
   mat => pmats(ip)%p                           !point to material
   !IF( ntype == 1 )THEN                         ! plane stress
     CALL elastiff(celoc,mat,6)                  !get elastic stiffnes matrix 4=plain stress + transverse shear
   !ELSE                                         ! plane strain or axilsymmetric
   !  CALL elastiff(celoc,mat,4)                  !get elastic stiffnes matrix 4=plain stress + transverse shear
   !END IF
   ce(1:4) = celoc((/1,2,3,5/))                 ! C11 C12      G13   of first layer
   IF( i == 3 ) ce(1:4) = ce(1:4)*sec%rprop(38) ! include dammage factor
   al = -thickl/2d0           !initializes local z variable
   z = z1                               !initializes z to bottom surface of the layer
   p2f = 4d0/thickl**2                  !factor for polynomial 2
   p3f = 12D0*Sqrt(3D0)*(sec%rprop(37)+(1d0-1d0/SQRT(3d0))/2d0)/thickl**3     !factor for polynomial 3 hip
   DO l=1,n(i)                !for each point at the layer
     k = k + 1                !update pointer to global section counter
     zc(k) = z                !keep z coordinate  for output
     phiz = phik + betaz*al                      !Phi function
     IF( inter == 1 )THEN
       phiz = phiz- x0*z**2-w0*z**3
       betaz = beta(i) - 2d0*z*x0 -3d0*z**2*w0
     END IF
     e(1) = st(1)  + z*st(2) + phiz*st(4)             !E11 RZT
     e(2) = st(3) + betaz*st(5)                       !E12 RZT
     de(1) = dst(1)  + z*dst(2)  + phiz*dst(4)    !dE11 RZT
     disp(k,1) = dis(1)+dis(2)*z+st(5)*phiz           !U_x RZT
     disp(k,2) = disp(k,1)                            !U_x RZT to be modified
     SELECT CASE ( i )                            !according to the layer
     CASE (2)                                     !for core
       p21 = (z-z1)*(z2-z)                           !polynomial 2 without factor
       p2  = p2f*p21                                 !polynomial 2
       dp2 = p2f*(z2+z1-2*z)                         !polynomial 2 derivate (z)
       p31= p21*z                                    !polynomial 3 without factor
       p3 = p3f*p31                                  !polynomial 3 including factor
       hip = 1d0/(sec%rprop(37)+(z2-z)/thickl)       !hyperbolic function
       p3h = p3*hip                                  !P3h
       dp3h = hip*p3f*((-3*z**2+2*(z1+z2)*z-z1*z2)+p31*hip/thickl )    !p3h 2 derivate (z)
       e(1)  = e(1)  + st(7)*p2  + st(8)*p3h          !include p2 & p3h contributions
       e(2)  = e(2)  + st(10)*dp2 + st(11)*dp3h
       de(1) = de(1) + dst(7)*p2  + dst(8)*p3h        !dE11
       disp(k,2) = disp(k,2)+st(10)*p2+st(11)*p3h
     CASE (3)                                     !for damaged layer
       h = (z-z1)/thickl
       dh = 1d0/thickl
       e(1)  = e(1)  + st(6)*h
       e(2)  = e(2)  + st(9)*dh
       de(1)  = de(1)  + dst(6)*h
       disp(k,2) = disp(k,2)+st(9)*h
     CASE (4)                                     !for top stiff layer
       e(1)  = e(1)  + st(6)
       de(1)  = de(1)  + dst(6)
       disp(k,2) = disp(k,2)+st(9)
     END SELECT
     tx(k) = e(2)*ce(4)       ! tau-gamma
     sx(k,1) = e(1) *ce(1)      !axial stress
     dsx(k)  = de(1)*ce(1)      !axial stress derivative
     !  PERFORM shear stress integration
     IF( l > 1 )THEN
       t = t - (dsx(k-1)+dsx(k))/2d0*dz            !integrated shear stress
       m = m + dz*(sx(k,1)+sx(k-1,1))/2d0*(z-dz/2) !moment
       nc= nc+ dz*(sx(k,1)+sx(k-1,1))/2d0          !axial force
       qi= qi+ dz*(   t   +sx(k-1,2))/2d0          !integrated shear force
       qc= qc+ dz*(tx(k)+tx(k-1))/2d0          !constitutive shear force
     END IF
     sx(k,2) = t           !keep integrated shear stress
     z = z+dz              !update z coordinate
     al = al+dz            !udpate z local coordinate
   END DO
   ii = ii + 1                                    ! update counter to material
 END DO

 !  PRINTS Axial and integrated shear stresses
 WRITE(59,"('ZONE T= ""',f8.3,'""  I= ',i3,' F=POINT')")xc*1000,nn
 WRITE(59,"('# N =',E15.4,' M=',e15.4,' Qc=',e15.4,' Qi=',e15.4)")nc*width, m*width,qc*width,qi*width
 DO k=1,nn                                  !for each interface and top surface
   WRITE(59,"(2x,f10.4,4e15.5)")zc(k)*1000,sx(k,:)/1e6,tx(k)/1e6,disp(k,2)*1000             !print values
 END DO

 RETURN
 END SUBROUTINE zigzag_pro2
