 SUBROUTINE stif18(heade, gstif, force, coora, nnode, ngaus, shell,gpc,sbbar)

 ! 8/20-node solid element (brick).
 ! use Green-Lagrange strains and 2nd Piola-Kirchhoff stresses

 IMPLICIT NONE
                               !--------- to optimize ---------
 INTEGER (kind=4), PARAMETER :: ndime =3, nstre = 6
 ! dummy arguments
 INTEGER (kind=4), INTENT(IN) :: nnode, ngaus
 REAL (kind=8), INTENT(IN) :: coora(:,:),gpc(:,:)
 REAL (kind=8), INTENT(IN OUT) :: gstif(:),force(:)
 TYPE (ele18), POINTER :: heade
 LOGICAL, INTENT(IN) ::  shell,   &  !.TRUE. assumed strain for transverse shear
                         sbbar       !.TRUE. BBAR for volumetric strain

 !Local Variables
 LOGICAL, PARAMETER :: natst = .FALSE.
 LOGICAL :: bbar
 TYPE (ele18), POINTER :: e
 LOGICAL  :: newmt,plast,elast
 INTEGER (kind=4) :: ielem,isec,i,j,g,k,   &
                     osec,mtype,nvarl,nlayr

 REAL (kind=8) x(3,nnode),t(3,3),efpst,                 &
               daux(21),stres(6),cm(6,6),aux1,          &
               stran(6),voli,                           &
               d(6,6),deatht,lambd,young,poiss,km

 REAL (kind=8), ALLOCATABLE :: stiff(:),bmatx(:,:),bb(:,:)     ! nvarl*(nvarl+1)/2
 ! variables for assumed strain transverse shear
 REAL (kind=8) :: tas(3,4),gas(3,4),bs(24,4),baux(24,2),vas(4),staux(2)

 REAL (kind=8) :: propi(13),   & !(nnn) material properties
                  chi(12)        !(12) Hill coefficients

 TYPE (section), POINTER :: sec
 TYPE (mater), POINTER :: mat
 !TYPE (mater), POINTER :: matm,matf !pointer to a material data

 INTERFACE
   INCLUDE 'modp18.h'
 END INTERFACE

 !***  Compute Element Stiffness matrix for all elements

 nvarl = nnode*ndime
 ALLOCATE( stiff(nvarl*(nvarl+1)/2), bmatx(nvarl,6), bb(ndime,nnode) )
 osec = -1
 e => heade

 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel
   isec = e%matno
   newmt = osec /= isec
   IF(newmt)THEN                     !if new material, get properties
     !newpm = .TRUE.
     osec = isec                     !keep present material
     sec => psecs(isec)%p             !point to section
     nlayr = sec%iprop(1)             !number of layers
     !nvar  = sec%iprop(2)             !total number of internal variables

     !************************** STANDARD SOLID *****************************************
     IF( nlayr == 0 )THEN            !standard solid section (not layered)

       mat => sec%mtbas                !point to associated material
       mtype = mat%mtype               !type of base material
       elast = mat%matdef(3) == 1      !elastic material
       !is    = mat%matdef(4)           !isotropic hardening model
       ! ------------------------------------------------------------------------------------
       ! ONLY MTYPES 1, 5, 6, 7 and 92 ARE ALLOWED
       SELECT CASE (mtype)
       ! ------------------------------------------------------------------------------------
       CASE (1)                        !Isotropic Elastic - Anisotropic Plastic  ( mtype == 1)
         bbar = nnode == 8 .AND. sbbar   !default
         !IF( .NOT.elast ) THEN
         !  ! e1, nu1, uniaxial, efren, consn, r, exponent m, hill 79
         !  propi(1:4) = mat%propp(1:4)       ! isotropic hardening parameters
         !  propi(5) = REAL( mat%matdef(4),8) ! isotropic hardening model
         !  chi    = mat%propp(16:27)         ! hill coefficients
         !  IF( mat%matdef(6) == 1  ) chi(1:6) = chi(7:12)  !associative
         !  deatht = mat%propp(5)             !end of plasticity
         !  plast = propi(1) > 0  !consider plasticity ?
           young = mat%prope(1)          ! young modulus
           poiss = mat%prope(2)          ! poisson ratio
           km    = mat%prope(4)          ! bulk modulus
         !  ! von Mises plasticity IF( mat%matdef(3) <= 2 )
           CALL modp18(d,young,poiss,propi,0d0,0d0,bbar,elast,newmt)
         !ELSE
           plast = .FALSE.
        ! END IF
         ! ------------------------------------------------------------------------------------
       CASE (5)                        !Orthotropic Elastic - No Plasticity      ( mtype == 5)
         d = RESHAPE( mat%prope(45:80), (/6,6/) )
         elast = .TRUE.
         plast = .FALSE.                        !consider plasticity ?
         newmt = .FALSE.                        !same material than previous ?
         bbar  = .FALSE.                   !coupled shear and volumetric part
         plast = .FALSE.
       ! ------------------------------------------------------------------------------------
       CASE (6)                        !Hyperelastic isotropic rubber            ( mtype == 6)
         propi(1:12) = mat%prope(7:18)     !elastic properties
         bbar  = .FALSE.                   !coupled shear and volumetric part
         elast = .TRUE.                    !elastic only
         plast = .FALSE.                        !consider plasticity ?
         newmt = .FALSE.                        !same material than previous ?
       ! ------------------------------------------------------------------------------------
       CASE (7)                        !Isotropic damague model                  ( mtype == 7)
         bbar  = .FALSE. ! Do not decouple strains into its deviatoric and volumetric parts
         d = RESHAPE( mat%prope(45:80), (/6,6/) )                 !linear elastic integrated matrix
       !
       ! ------------------------------------------------------------------------------------
       CASE (92)                       !Simplified composite model              ( mtype == 92)
                                       !Fiber reinforced matrix (Vanishing fiber diameter model)
         bbar  = .FALSE. ! Do not decouple strains into its deviatoric and volumetric parts
         plast = .NOT.elast                     !consider plasticity ?
         d = RESHAPE( mat%props(5:40), (/6,6/) )                 !linear elastic integrated matrix
         !point to apropriate material layer
         ! matm => pmats(mat%matdef(4))%p  !matm
         ! matf => pmats(mat%matdef(5))%p  !matf
       ! ------------------------------------------------------------------------------------
       END SELECT

       !************************** LAYERED SOLID *************************************************
     ELSE  !nlayr >= 1      layered solid (at integration point level)
       !thick = sec%rprop(1)             !original thickness
       !minstr= sec%rprop(4)             !strain threshold to use TTTI

       !nl=1
       elast = .TRUE. !sec%iprop(3) == 0               !elastic problem
       plast = .NOT.elast                      !consider plasticity ?
       d = RESHAPE( sec%rprop(6:41), (/6,6/) )                 !linear elastic integrated matrix
       !IF( plast )THEN  !plastic lamina
       !  IF( ALLOCATED ( rr ) )DEALLOCATE( thickl,zposl,rr,matsl,lvari )
       !  ALLOCATE( thickl(nlayr),zposl(nlayr),rr(5,nlayr),matsl(3,nlayr),lvari(nlayr) )
       !  i = 42                                !pointer to layer thickness
       !  CALL vecasi(nlayr,sec%rprop(i),thickl(1))        !layer thickness
       !  i = i+2*nlayr                         !pointer to layer z position
       !  !CALL vecasi(nlayr,sec%rprop(i),zposl(1))         !layer z position
       !  i = i+nlayr                           !pointer to layer rotation matrix
       !  CALL vecasi(nlayr*5,sec%rprop(i),rr(1,1))        !layer rotation matrix
       !
       !  lvari(1:nlayr)= sec%iprop(nlayr+5:2*nlayr+4)
       !  DO il=1,nlayr
       !    mate= sec%iprop(4+il)
       !    mat => pmats(mate)%p        !search layer material
       !    matsl(1,il)%p => mat
       !    SELECT CASE (mat%mtype)
       !    CASE ( 91,92 )
       !      !point to component materials data bases
       !      matsl(2,il)%p => pmats(mat%matdef(4))%p  !matm
       !      matsl(3,il)%p => pmats(mat%matdef(5))%p  !matf
       !    CASE DEFAULT
       !      NULLIFY( matsl(2,il)%p )
       !      NULLIFY( matsl(3,il)%p )
       !    END SELECT
       !  END DO
       !END IF
       !osec = -1                              !recompute constants
     END IF
     newmt = .FALSE.                        !same material than previous ?

   END IF !newmt

   x = coora(:,e%lnods)     !nodes of the element

   IF( bbar ) bb = 0d0      !8-node element & mtype = 1

   ! Integration loop
   stiff = 0d0              !initializes stiffness matrix
   IF( shell )THEN !compute transverse shear strain components
     tas(:,:) = MATMUL(x,e%nfdas) !local gradient
     gas(:,1) = (-x(:,1)-x(:,5)+x(:,4)+x(:,8))/4d0
     gas(:,2) = (-x(:,1)-x(:,5)+x(:,2)+x(:,6))/4d0
     gas(:,3) = (-x(:,2)-x(:,6)+x(:,3)+x(:,7))/4d0
     gas(:,4) = (-x(:,4)-x(:,8)+x(:,3)+x(:,7))/4d0
     CALL bsma18(gas,tas,e%nfdas,bs)
     IF( mtype == 6 )THEN
       DO i=1,4  !for each assumed strain point compute x_(xita,eta) . x_X_3
         vas(i) = DOT_PRODUCT(tas(:,i),gas(:,i))
       END DO
     END IF
   END IF

   DO g=1,ngaus             !for each integration point
     voli = e%dvol(g)        !gauss point volume
     t = MATMUL(x,e%cartd(:,:,g))  !deformation gradient
     ! compute point constitutive matrix (tangent algorithmic)
     IF( nlayr == 0 )THEN
       SELECT CASE (mtype)
       CASE ( 1 )   ! for an isotropic one component material
         !IF( .NOT.elast )THEN
         !  lambd = e%gausv(14,g)         !Increment in Total Eff. plastic strain
         !  efpst = e%gausv(7,g) + lambd  !Total Eff. plastic strain
         !ELSE
           lambd = 0d0
           efpst = 0d0
         !END IF
         CALL modp18(d,young,poiss,propi,efpst,lambd,bbar,elast,newmt)
         !IF( natst )THEN
         !  ! Compute Metric tensor
         !  stran(1) = DOT_PRODUCT(t(:,1),t(:,1))
         !  stran(2) = DOT_PRODUCT(t(:,2),t(:,2))
         !  stran(3) = DOT_PRODUCT(t(:,3),t(:,3))
         !  stran(4) = DOT_PRODUCT(t(:,1),t(:,2))
         !  stran(5) = DOT_PRODUCT(t(:,1),t(:,3))
         !  stran(6) = DOT_PRODUCT(t(:,2),t(:,3))
         !  ! inverse of U^2
         !  a1  = stran(2)*stran(3) - stran(6)*stran(6)
         !  a2  =-stran(4)*stran(3) + stran(5)*stran(6)
         !  a3  = stran(4)*stran(6) - stran(5)*stran(2)
         !  aux1 = stran(1)*a1 + stran(4)*a2 + stran(5)*a3
         !  !IF(aux1 == 0d0) CALL runend('STIF18, singular matrix ')
         !  u2(1) = a1/aux1
         !  u2(2) = ( stran(1)*stran(3) - stran(5)*stran(5))/aux1
         !  u2(3) = ( stran(1)*stran(2) - stran(4)*stran(4))/aux1
         !  u2(4) = a2/aux1
         !  u2(5) = a3/aux1
         !  u2(6) = (-stran(1)*stran(6) + stran(4)*stran(5))/aux1
         !
         !ELSE  !small strain
           cm      = d
         !END IF
       CASE ( 6 )
         ! Compute Metric tensor
         stran(1) = DOT_PRODUCT(t(:,1),t(:,1))
         stran(2) = DOT_PRODUCT(t(:,2),t(:,2))
         stran(3) = DOT_PRODUCT(t(:,3),t(:,3))
         stran(4) = DOT_PRODUCT(t(:,1),t(:,2))
         IF( shell )THEN
           staux(1) = ( (1d0-gpc(2,k))*vas(2) + (1d0+gpc(2,k))*vas(4))/2d0 !natural xita-x_3
           staux(2) = ( (1d0-gpc(1,k))*vas(1) + (1d0+gpc(1,k))*vas(3))/2d0 !natural eta-x_3
           stran(5) = e%jacin(1,1,k)*staux(1)+e%jacin(2,1,k)*staux(2) !x_1-x_3
           stran(6) = e%jacin(1,2,k)*staux(1)+e%jacin(2,2,k)*staux(2) !x_2-x_3
         ELSE
           stran(5) = DOT_PRODUCT(t(:,1),t(:,3))
           stran(6) = DOT_PRODUCT(t(:,2),t(:,3))
         END IF
         CALL rubber3d(propi,stran,mat%matdef(8),mat=daux)
         daux = daux*voli
       CASE DEFAULT !(7,92) !92 Simplified composite model
         cm      = d
       END SELECT
     ELSE
       cm      = d
     END IF

     IF( nlayr == 0 .AND. mtype /= 6 )THEN
       ! scale D matrix
       k = 0
       DO i=1,nstre
         DO j=i,nstre
           k = k+1
           daux(k) = voli*cm(i,j)
         END DO
       END DO
     END IF

     CALL bmat18(e%cartd(:,:,g),bmatx,t,nnode,shell)  ! B matrix
     IF( shell )THEN   !modify for trasnverse shear
       baux(:,1) =  (1d0-gpc(2,g))/2d0*bs(:,2) + (1d0+gpc(2,g))/2d0*bs(:,4)
       baux(:,2) =  (1d0-gpc(1,g))/2d0*bs(:,1) + (1d0+gpc(1,g))/2d0*bs(:,3)
       bmatx(:,5) = e%jacin(1,1,g)*baux(:,1)+e%jacin(2,1,g)*baux(:,2)
       bmatx(:,6) = e%jacin(1,2,g)*baux(:,1)+e%jacin(2,2,g)*baux(:,2)
     END IF
     CALL btdbpr(bmatx(1,1),daux(1),stiff(1),nvarl,nstre) ! B^T D B
     ! compute volumetric matrix
     IF( bbar ) CALL bbar18(e%cartd(:,:,g),bb,t,voli) !,natst)
     ! add geometric stiffness
     stres = e%stint(:,g)*voli
     CALL kgmm18(e%cartd(:,:,g),stres,stiff,nnode)
   END DO
   IF( bbar )THEN  !add volumetric part
     aux1 = km/SUM(e%dvol)
     CALL btdbpr(bb(1,1),aux1,stiff(1),nvarl,1)
   END IF
   ! add to global stiffness
   CALL stiaux(nnode,e%lnods,nvarl,3,stiff(1),force(1),gstif(1) )

   e => e%next
 END DO
 DEALLOCATE (stiff,bmatx,bb)
 RETURN

 END SUBROUTINE stif18
