 SUBROUTINE masm11(ifpre,lumpd,nelem,emass,mass,sumat,heade,ntype,coord)
 !********************************************************************
 !
 !***  evaluates mass matrix for beam/shell elements
 !
 !********************************************************************
 IMPLICIT NONE
 INTEGER(kind=4), INTENT(IN) :: ifpre(:,:)
 LOGICAL, INTENT(IN) :: lumpd
 INTEGER (kind=4), INTENT(IN) :: nelem,ntype
 REAL (kind=8), INTENT(IN OUT) :: emass(:,:),sumat,mass(:),coord(:,:)
 TYPE( ele11 ), POINTER :: heade

 !        local variables
 INTEGER (kind=4), PARAMETER :: nvar=4, nsize=10
 INTEGER (kind=4) ielem,i,j,k,l,n,nposn,isec,lm(nvar),osec !,matty
 REAL    (kind=8) dvolu,a(2),b(3),tmass,ms(nsize),sume1,r0
 TYPE( ele11 ), POINTER :: e
 REAL (kind=8),PARAMETER :: twopi=6.283185307179586d0
 TYPE(section), POINTER :: sec
 INTEGER (kind=4) poesti
 poesti(i,j,n) = (2*n-i)*(i-1)/2+j    ! position i,j in ms(nxn)

 osec = -1
 sume1 = 0d0
 e => heade
 DO ielem=1,nelem
   isec = e%matno
   IF( isec /= osec )THEN             !present and previous material diff
     sec => psecs(isec)%p
     !matty = sec%secdef(3)
     IF(ntype == 1)THEN
       tmass = sec%mtbas%prope(5)*sec%rprop(4)  !dens*area
     ELSE
       tmass = sec%mtbas%prope(5)*sec%rprop(1)  !dens*thickness
     END IF
     osec  = isec
   END IF

   IF(ntype == 3) THEN              !shells of revolution
     dvolu = e%l0(2)*twopi/6d0
     r0 = (coord(1,e%lnods(2)) + coord(1,e%lnods(3)))/2d0
     a(1) = dvolu*(2d0*r0+coord(1,e%lnods(2)))
     a(2) = dvolu*(2d0*r0+coord(1,e%lnods(3)))
     IF(.NOT.lumpd) THEN
       b(1) = dvolu*(r0+coord(1,e%lnods(2)))
       b(2) = dvolu* r0
       b(3) = dvolu*(r0+coord(1,e%lnods(3)))
     END IF
   ELSE                             !beams or 2-d Shells
     dvolu = e%l0(2)/6d0
     a(1)  = dvolu*3d0
     a(2)  = dvolu*3d0
     IF(.NOT.lumpd) THEN
       b(1) = dvolu*2d0
       b(2) = dvolu
       b(3) = dvolu*2d0
     END IF
   END IF

   DO n=1,2
     l = e%lnods(n+1)
     emass(1:2,l) = emass(1:2,l) + a(n)*tmass
   END DO

   sume1 = sume1 + SUM(a)*tmass

   IF(.NOT.lumpd) THEN
     ms = 0d0
     i = 0
     DO n = 1,2
       j = (n-1)*2+1
       DO l =n,2
         i = i+1
         k = (l-1)*2+1
         nposn = poesti(j,k,nvar)
         ms(nposn) = b(i)*tmass
         nposn = poesti(j+1,k+1,nvar)
         ms(nposn) = b(i)*tmass
       END DO
     END DO

     k = 0
     DO n=2,3
       l = e%lnods(n)
       DO j = 1,2
         k = k+1
         lm(k) = ifpre(j,l)
       END DO
     END DO
     CALL ensmat(nvar,lm(1),ms(1) ,mass(1))
   END IF
   e => e%next
 END DO
 !WRITE(lures,"(//'  total mass for beam/shell element :', e15.7)")sume1
 sumat = sumat + sume1

 RETURN
 END SUBROUTINE masm11
