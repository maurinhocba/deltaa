 SUBROUTINE bmat16(cartd,bmat,t,nnode,nassp,quad,shell,bq,sh,bs,jacin,pag)
 !
 !*** B matrix  for a 3-D 6/15/20-node Prism
 !    Green Lagrange Strains (TLF)
 IMPLICIT NONE
 ! dummy arguments
 INTEGER (kind=4), INTENT(IN) :: nnode,   &     !number of nodes 6/15
                                 nassp          !number of assumed shear strain points
 REAL (kind=8), INTENT(IN) :: cartd(:,:),     & !(nnode,3)standar cartesyan derivatives at Gauss point
                              t(:,:)            !(3,3)deformation gradient
 REAL (kind=8), INTENT(OUT) :: bmat(:,:,:)      !(3,nnode,6)B-matrix
 REAL (kind=8), OPTIONAL :: bq(:,:,:,:),      & !(3,4,3,2) in-plane quadratic approach matrix
                            bs(:,:,:,:),      & !(3,nnode,nassp,2) assumed transverse shear approach matrix
                            jacin(:,:),       & !(2,2)in-plane inverse jacobian (assumed transverse shear approach)
                            sh(:),            & !(2)shape functions in zeta direction
                            pag(:,:)            !(2,nassp) PA matrix for ANS transverse shear
 LOGICAL, INTENT(IN) :: quad,                 & !flag for quad approach
                        shell                   !flag for transverse shear approach
 ! local variables
 INTEGER (kind=4) :: i,j,i3,j3
 REAL(kind=8) :: baux(3,2),bs1(3,nassp)

 ! in-plane components
 IF( quad )THEN    !for quad approach
   DO j=1,3   !for each main node in lower face
     j3= j+3  !         main node in upper face
     i = j+6  !        extra node in lower face
     i3= i+3  !        extra node in upper face
     bmat(1:3,j ,1) = sh(1)*bq(:, j,1,1)
     bmat(1:3,j3,1) = sh(2)*bq(:, j,1,2)
     bmat(1:3,j ,2) = sh(1)*bq(:, j,2,1)
     bmat(1:3,j3,2) = sh(2)*bq(:, j,2,2)
     bmat(1:3,j ,4) = sh(1)*bq(:, j,3,1)
     bmat(1:3,j3,4) = sh(2)*bq(:, j,3,2)
     bmat(1:3,i ,1) = sh(1)*bq(:,j3,1,1)
     bmat(1:3,i3,1) = sh(2)*bq(:,j3,1,2)
     bmat(1:3,i ,2) = sh(1)*bq(:,j3,2,1)
     bmat(1:3,i3,2) = sh(2)*bq(:,j3,2,2)
     bmat(1:3,i ,4) = sh(1)*bq(:,j3,3,1)
     bmat(1:3,i3,4) = sh(2)*bq(:,j3,3,2)
   END DO
 ELSE               !standard
   DO j=1,nnode
     bmat(1:3,j,1) =  cartd(j,1)*t(1:3,1)
     bmat(1:3,j,2) =  cartd(j,2)*t(1:3,2)
     bmat(1:3,j,4) =  cartd(j,2)*t(1:3,1)+cartd(j,1)*t(1:3,2)
   END DO
 END IF

 ! out-of-plane components
 DO j=1,nnode
   bmat(1:3,j,3) =  cartd(j,3)*t(1:3,3)
   IF( shell )THEN
     bs1 = sh(1)*bs(:,j,:,1)+sh(2)*bs(:,j,:,2)      !(3,nassp)
     baux = MATMUL(bs1,TRANSPOSE(pag))
     bmat(1:3,j,5) = jacin(1,1)*baux(:,1)+ jacin(2,1)*baux(:,2)
     bmat(1:3,j,6) = jacin(1,2)*baux(:,1)+ jacin(2,2)*baux(:,2)
   ELSE !standard
     bmat(1:3,j,5) =  cartd(j,3)*t(1:3,1)+cartd(j,1)*t(1:3,3)
     bmat(1:3,j,6) =  cartd(j,3)*t(1:3,2)+cartd(j,2)*t(1:3,3)
   END IF
 END DO

 RETURN
 END SUBROUTINE bmat16
