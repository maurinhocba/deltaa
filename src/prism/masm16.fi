 SUBROUTINE masm16(ndime,heade,emass,mass,sumat,lumpd,nnode,ngaus,ifpre,bezier)

 IMPLICIT NONE
 LOGICAL, INTENT(IN) :: lumpd,bezier
 INTEGER (kind=4), INTENT(IN) :: ndime,nnode,ngaus,ifpre(:,:)
 REAL (kind=8), INTENT(IN OUT) :: emass(:,:),sumat,mass(:)
 TYPE( ele16 ), POINTER :: heade

 INTEGER (kind=4) :: isec,idofn,lm(ndime,nnode),osec,g,i,j,k,ii,n,l,nv,nv2,ngaup,ngaud
 REAL (kind=8) :: suma,voli,rhoel,m(nnode),posgp(3),weigp(3),d,b,c
 REAL (kind=8), ALLOCATABLE :: a(:),ms(:)
 TYPE( ele16 ), POINTER :: e
 TYPE (section), POINTER :: sec
 REAL (kind=8) :: sh(nnode,ngaus),der(nnode,3),tc(2,4)
 LOGICAL :: order
 INTEGER (kind= 4) posmt
 posmt(nv2,i,j) = (nv2-i)*(i-1)/2+j  !position i,j in mass(nv x nv)
 !INTERFACE
 !  INCLUDE 'ensmat.h'
 !END INTERFACE

 order = nnode == 12
 IF( MOD(ngaus,2) == 0 ) THEN
   ngaud = 2
   ngaup = ngaus/ngaud
 ELSE
   ngaud = 3
   ngaup = (ngaus+2)/ngaud
 END IF
 CALL gaussq (ngaud ,posgp ,weigp ) ! get standard  gauss points in local coordinates and weigths
 SELECT CASE (ngaup)
 CASE (1)
   tc(1:2,1) = 1d0/3d0
 CASE (3)
   !   mid-side Gauss points
   !b=0.5D0
   !c=0.0D0
   !tc(1:2,1:3) = RESHAPE( (/ b,c, b,b, c,b /),(/2,3/))    !in-plane gauss points (xita-eta)
   !   interior Gauss points
   d=0.666666666666667d0         !2/3
   b=0.166666666666667d0         !1/6
   tc(1:2,1:3) = RESHAPE( (/ b,b, d,b, b,d /),(/2,3/))    !in-plane gauss points (xita-eta)
 CASE (4)
   d=0.333333333333333d0
   b=0.600000000000000d0
   c=0.200000000000000d0
   tc(1:2,1:4) = RESHAPE( (/ d,d, b,c, c,b, c,c /),(/2,4/))    !in-plane gauss points (xita-eta)
 END SELECT
 k = 0                !initializes counter
 DO i=1,ngaud           !zeta direction
   DO j=1,ngaup           !in plane
     k = k+1                !updates counter
     IF( ngaus == 7 .AND. i == 2 .AND. j == 1 )THEN
       CALL shape4(nnode,sh(:,k),der,1d0/3d0,1d0/3d0,posgp(i),bezier,order )
       EXIT
     ELSE
       CALL shape4(nnode,sh(:,k),der,tc(1,j),tc(2,j),posgp(i),bezier,order )
     END IF
   END DO
 END DO

 n = nnode*(nnode+1)/2                    !size of array a
 l = (nnode*ndime*(nnode*ndime+1))/2      !size of mass matrix
 IF( .NOT. lumpd) ALLOCATE(a(n),ms(l))
 nv = nnode*ndime     !number of DOFs
 nv2 = 2*nnode*ndime  !twice the number of DOFs
 suma=0.
 osec = -1
 IF( .NOT. lumpd) ms = 0D0

 e => heade
 DO
   IF( .NOT.ASSOCIATED (e) )EXIT
   isec = e%matno
   IF( osec /= isec )THEN
     sec => psecs(isec)%p
     IF( sec%mabas == -1 )THEN
       rhoel = sec%rprop(3)
     ELSE
       rhoel = sec%mtbas%prope(5)
     END IF
     !rhoel = sec%mtbas%prope(5)                !material density
     osec = isec
   END IF
   m = 0d0                 !initalizes lumped matrix
   IF( .NOT.lumpd)a = 0d0 !initalizes consistent matrx
   DO g=1,ngaus

     voli = e%dvol(g)*rhoel
     suma = suma + voli

     ii = 0                   !Initializes Position in matrix a
     DO n = 1,nnode           !For each node
        m(n) = m(n) + sh(n,g)*voli  !associated (lumped) mass
        IF(.NOT.lumpd) THEN    !Consistent matrix
           DO l = n,nnode       !for each node
             ii = ii+1          !position in matrix
             a(ii) = a(ii) + sh(n,g)*sh(l,g)*voli
           END DO
        END IF     !.NOT.lumpd
     END DO     !n=1,nnode
   END DO     !g=1,ngaus

   !---generates lumped mass matrix proportional to diagonal
   IF( .NOT.bezier .AND. nnode > 6 ) THEN
     voli = SUM(e%dvol)*rhoel/(nnode*2-6)
     m(1:6) = voli
     m(7:nnode) = voli*2d0
   END IF
   DO n=1,nnode
     l = e%lnods(n)
     DO idofn=1,ndime
       emass(idofn,l)=emass(idofn,l)+m(n)
     END DO
   END DO

   IF(.NOT.lumpd) THEN
                 !consistent mass matrix  Assembles over MASS(maxa)
     i = 0                            ! Position in matrix A initialization
     g = 0                            ! elemental DOF initialization
     DO n = 1,nnode                   ! For each nodee
       j = (n-1)*ndime                ! Initializes Column position in M
       DO l = n,nnode                 ! For each node
         i = i+1                      ! Matrix position in A
         k = (l-1)*ndime              ! Initializes Row position in M
         DO ii = 1,ndime              ! For each direction in space
           ms(posmt(nv2,j+ii,k+ii)) = a(i)
         END DO
       END DO
     END DO
     lm = ifpre(1:3,e%lnods)
     CALL ensmat(nv,lm(1,1),ms(1),mass(1))
   END IF

   e => e%next
 END DO
 !IF(iwrit == 1) &
 WRITE(lures,"(//'  total mass for PRISM element :', e15.7)")suma
 sumat = sumat + suma
 IF( .NOT. lumpd) DEALLOCATE (a,ms)
 RETURN
 END SUBROUTINE masm16
