 SUBROUTINE elmd16 (nelem, nnode, heade, taile, iwrit, ngaus, quad, shell, nassp)
 !******************************************************************
 !
 !*** READ element DATA for 3-D SOLID element  (TLF)
 !
 !******************************************************************
 IMPLICIT NONE
 ! dummy arguments
 INTEGER (kind=4) :: nelem, nnode, iwrit, ngaus, nassp
 TYPE (ele16), POINTER :: heade,taile !pointers to first and last elements
 LOGICAL, INTENT(IN) :: quad, shell
 ! local variables
 TYPE(section), POINTER :: sec        !pointer to a section
 LOGICAL found
 INTEGER (kind=4) :: i,ip,j,k,chnode,isec,osec,secty,mtype

 INTEGER (kind=4) :: mats(3) = (/ 1,5,6 /)  !acceptable material types
 TYPE (ele16), POINTER :: elem      !auxiliar pointer

 ! *** READ the element nodal connections, and the property numbers.

 IF(iwrit == 1)THEN
   IF(nnode == 6 )THEN
     WRITE(lures,"(//2X,'ELEMENT MAT           NODE NUMBERS ',&
                           &    10x,'angles')",ERR=9999)
   ELSE IF(nnode == 12 )THEN
     WRITE(lures,"(//2X,'ELEMNT MAT       NODE NUMBERS ',&
                           &    24x,'angles')",ERR=9999)
   ELSE IF(nnode == 15 )THEN
     WRITE(lures,"(//2X,'ELEMNT MAT           NODE NUMBERS ',&
                           &    30x,'angles')",ERR=9999)
   ELSE IF(nnode == 18 )THEN
     WRITE(lures,"(//2X,'ELEMNT MAT                 NODE NUMBERS ',&
                           &    36x,'angles')",ERR=9999)
   END IF
 END IF
 osec = -1  !initializes
 j = 2+nnode     !end position of connectivities
 DO
   ! loop over elements

   CALL listen('ELMD16')          !read a card
   IF (exists('ENDELE')) EXIT     !if key word END_ELEMENT read, exit loop

   nelem = nelem + 1         !increase element counter
   CALL new_ele16e (elem)    !reserve memory for data
   IF( quad )THEN
     ALLOCATE (elem%lnods(12),elem%cdq(4,2,3,2))    !reserve memory for data
     elem%lnods(7:12) = 0    !initializes patch nodes
   ELSE
     ALLOCATE (elem%lnods(nnode))    !reserve memory for data
   END IF
   ALLOCATE (elem%dvol(ngaus),elem%cartd(nnode,3,ngaus),elem%stint(6,ngaus),elem%stra0(6,ngaus))    !reserve memory for data

   elem%numel = INT (param(1))   !element label

   isec = INT (param(2))         !associated material

   IF( isec /= osec )THEN        !checks
     CALL sect_search (isec,found,sec,ip)
     IF(.NOT.found)CALL runend('ELMD16: Invalid Section Number used')
     secty = sec%secty        !check section type for element
     IF( secty /= 0 ) CALL runend('ELMD16: Invalid sect. type for SOLID')
     IF( sec%mabas >= 0 )THEN
       mtype = sec%mtbas%mtype  !check material type for element
       IF( .NOT. ANY(mtype == mats) )  &
         CALL runend('ELMD16: Invalid Mat. type for SOLAG')
     END IF
     osec = isec
   END IF

   elem%matno = ip        !store section position in array

   elem%lnods = INT (param(3:j))  !connectivities
   elem%angle = param(j+1:j+3)    ! Euler angles between standart and Ortho
   IF( shell )THEN
     ALLOCATE(elem%nfdas(nnode,nassp,2),elem%jacin(2,2,ngaus))
     elem%angle(2:3) = 0d0
   END IF
   !    echo according to flag
   IF(iwrit == 1) THEN
     IF(nnode == 6)THEN
       WRITE(lures,"(i6,i3,6i6,3F7.4)",ERR=9999) elem%numel,isec,  &
                               elem%lnods(1:nnode),elem%angle
     ELSE IF(nnode == 12)THEN
       WRITE(lures,"(i6,i3,12i6,3F7.4)",ERR=9999) elem%numel,isec,  &
                               elem%lnods(1:nnode),elem%angle
     ELSE IF(nnode == 15)THEN
       WRITE(lures,"(i6,i3,15i6,3F7.4)",ERR=9999) elem%numel,isec,  &
                               elem%lnods(1:nnode),elem%angle
     ELSE IF(nnode == 18)THEN
       WRITE(lures,"(i6,i3,18i6,3F7.4)",ERR=9999) elem%numel,isec,  &
                               elem%lnods(1:nnode),elem%angle
     END IF
   END IF
   !     original node labels are changed
   DO i=1,nnode
     elem%lnods(i) = chnode(elem%lnods(i))
   END DO

   CALL add_ele16e (elem, heade, taile) !add element to list

 END DO

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE elmd16
