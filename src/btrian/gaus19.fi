 SUBROUTINE gaus19(heade,coord,gauss,angdf,ntype,ver)
 !-------------------------------------------------------------------
 !--- evaluates gauss points constants for shell element 19
 !--------------------------------------------------------------------
 IMPLICIT NONE

 INTEGER (kind=4), PARAMETER :: ndime=2
 INTEGER (kind=4), INTENT(IN) :: ntype,ver
 REAL (kind=8), INTENT(IN) :: coord(:,:), & !initial coordinates
                              angdf         !default angle X_1 - Ort_1
 TYPE (ele19), POINTER :: heade   !pointer to first element in the set
 LOGICAL, INTENT (IN OUT) :: gauss    !TRUE if initial constant exists

 INTEGER (kind=4) i,osec,isec
 REAL (kind=8) x(ndime,6),r(ngaus)
 REAL (kind=8) angle,factor,thick
 REAL (kind=8), PARAMETER :: twopi=6.283185307209586
 TYPE (ele19), POINTER :: e
 TYPE (section), POINTER :: sec

 !     ---------------------------------------------------------
 factor = twopi/360d0         !pi/180

 osec = -1
 e => heade       !point to first element
 DO               !loop over the elements in the set
   IF (.NOT.ASSOCIATED (e) ) EXIT  !if all element processed, exit
   x(:,1:nnode) = coord(:,e%lnods(:))

   IF(.NOT.gauss)THEN    !Compute initial constants if requested
     ! compute element local systems, side proyections and element areas
     angle = ( angdf + e%angle )*factor
     IF( ntype == 3 )THEN ! include thickness or radius in the jacobian (element volume)
       DO i=1,ngaus    !compute original r at each mid side (Gauss Points)
         r(i) = DOT_PRODUCT(x(1,:),shapef(:,i,ver))
         IF( r(i) < 0d0 )THEN
           WRITE(55,"('For axilsymmetric problems all X1 (r) coordinates' &
                  &   ' must be non-negative ',/,                            &
                  &   ' ELEMENT ',i6,/,(2E15.6) )",err=9999) e%numel,x
           CALL runen3('GAUS19: negative coord. r detected ')
         END IF
       END DO
     END IF
     CALL axep19(x,e%cd,e%area,angle,r,ntype,ver)

     IF( ntype == 1 ) THEN  !plane stress
       isec = e%matno
       IF( isec /= osec )THEN
         sec => psecs(isec)%p
         thick = sec%rprop(1)
         osec = isec
       END IF
       e%area= e%area*thick
     ELSE IF( ntype == 3 )THEN ! include thickness or radius in the jacobian (element volume)
       DO i=1,3    !compute original r at each mid side (Gauss Points)
         e%area(i) = e%area(i)*r(i)*twopi
       END DO
     END IF

   END IF
   e => e%next          !point to next element
 END DO
 gauss = .TRUE.

 RETURN
 9999 CALL runen2('')
 END SUBROUTINE gaus19
