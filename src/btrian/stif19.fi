 SUBROUTINE stif19(heade, gstif, force, ntype, coora, eulrf)

 IMPLICIT NONE
                               !--------- to optimize ---------
 INTEGER (kind=4), PARAMETER :: ndime =2, nvarl = 12
 INTEGER (kind=4), INTENT(IN) :: ntype
 REAL (kind=8), INTENT(IN) :: coora(:,:)
 LOGICAL, INTENT(IN) :: eulrf
 REAL (kind=8), INTENT(IN OUT) :: gstif(:),force(:)
 TYPE (ele19), POINTER :: heade

 !Local Variables
 TYPE (ele19), POINTER :: e
 LOGICAL  newmt,plast,elast,natst,ierr,bbar
 INTEGER (kind=4) :: ielem,isec,i,j,k,n,nstre, &
                     osec,mtype,g

 REAL (kind=8) x(2,6),t(2,2),efpst,r1,r2,                &
               bmatx(nvarl,4),daux(10),                  &
               thick,areai,stres(4),cm(4,4),aux1,        &
               stran(4),u2(4),bb(nvarl),km,              &
               d(4,4),deatht,lambd,young,poiss,lb(3)

 REAL (kind=8) :: stiff(78)      !78 = nvarl*(nvarl+1)/2

 REAL (kind=8) :: propi(13),   & !(nnn) material properties
                  chi(12),     & !(12) Hill coefficients
                  c(4)           !(4) Elasticity matrix

 TYPE (section), POINTER :: sec
 TYPE (mater), POINTER :: mat

 INTERFACE
   INCLUDE 'rubberps.h'
   INCLUDE 'rubber2d.h'
   INCLUDE 'rubber3d.h'
 END INTERFACE

 !***  Compute Element Stiffness matrix for all elements

 osec = -1
 e => heade
 nstre = 4
 IF( ntype == 1 )nstre = 3
 bbar = ntype /= 1
 DO
   IF (.NOT.ASSOCIATED (e) ) EXIT    !last element processed => EXIT
   ielem = e%numel
   isec = e%matno
   newmt = osec /= isec
   IF(newmt)THEN                     !if new material, get properties
     sec => psecs(isec)%p
     mat => sec%mtbas
     osec = isec                    !keep present material
     mtype = mat%mtype              !type of base material
     IF(ntype == 1)thick = sec%rprop(1)           ! original thickness
     elast = mat%matdef(3) == 1     !elastic
     natst = .FALSE.                !compute eigen-decomposition for large strain?

     IF( mtype == 1)THEN
       IF( .NOT.elast )THEN
         propi(1:4) = mat%propp(1:4)       ! isotropic hardening parameters
         propi(5) = REAL( mat%matdef(4),8) ! isotropic hardening model
         chi    = mat%propp(16:27)         ! hill coefficients
         IF( mat%matdef(8) == 1  ) chi(1:6) = chi(7:12)  !associative
         deatht = mat%propp(5)             !end of plasticity
         plast = propi(1) > 0  !consider plasticity ?
       ELSE
         plast = .FALSE.
       END IF
       young = mat%prope(1)          ! young modulus
       poiss = mat%prope(2)          ! poisson ratio
       km    = mat%prope(4)          ! bulk modulus
       ! von Mises plasticity IF( mat%matdef(3) <= 2 )
       CALL modp20(d,ntype,young,poiss,propi,0d0,0d0,bbar,elast,newmt)
     ELSE IF( mtype == 5)THEN            !elastic orhthotropic
       ! plane stress elasticity matrix
       IF( ntype == 1 )THEN
         d(1:3,1:3) = RESHAPE( mat%prope(1:9), (/3,3/) )
       ELSE
         d = RESHAPE( mat%prope(10:25), (/4,4/) )
       END IF
       elast = .TRUE.
       plast = .FALSE.                        !consider plasticity ?
       newmt = .FALSE.                        !same material than previous ?
     ELSE IF( mtype == 6)THEN            !hyperelastic isotropic
       chi(1:12) = mat%prope(7:18)
       elast = .TRUE.
       plast = .FALSE.                   !consider plasticity ?
       natst = .TRUE.
     END IF
   END IF

   x = coora(:,e%lnods)   !nodes of main element

   stiff = 0d0
   IF( ntype /= 1)bb = 0d0
   ! Integration loop
   DO g=1,ngaus
     areai = e%area(g)       !area
     ! local derivatives F => t,lb3
     t(:,:) = MATMUL(x,e%cd(:,1:2,g))       ! both derivatives
     IF( ntype == 2) lb(3) = 1d0
     IF( ntype == 3) lb(3) = DOT_PRODUCT(x(1,:),e%cd(:,3,g))  ! hoop stretch

     ! compute point constitutive matrix (tangent algorithmic)
     IF( mtype == 1 )THEN   ! for an isotropic one component material
       IF(plast)THEN
         lambd = e%gausv(8,g)          !Increment in Total Eff. plastic strain
         efpst = e%gausv(4,g) + lambd  !Total Eff. plastic strain
       END IF
       CALL modp20(d,ntype,young,poiss,propi,efpst,lambd,.FALSE.,elast,newmt)
       !stres(1:3) = e%stint(1:3,g)   !stresses (Hencky or 2PK)
       !CALL dmat14(dummy,dummy,dummy,stres(1),lambd,efpst,d(1,1),.FALSE.)
     END IF

     IF( natst )THEN
       CALL stra19(t,ntype,lb(3),stran)  !metric tensor at center
       CALL lgst14(stran,r1,r2,lb(1),'STIF19',ierr) !compute eigenvalues
       IF (mtype == 6)THEN
         IF( ntype == 1 )THEN !plane stress
           CALL rubberps(chi,lb,mat%matdef(8),stran,vec=daux,r1=r1,r2=r2)
         ELSE                 !plane strain or axilsymmetric
           IF( ntype == 3 ) lb(3) = SQRT(stran(4))
           CALL rubber2d(chi,lb,mat%matdef(8),stran,r1,r2,vec=daux)
         END IF
       ELSE       !other materials
         !! inverse of U^2
         !aux1  = (stran(1)*stran(2)-stran(3)**2)*stran(4) !=1d0
         !u2(1) = stran(2)/aux1
         !u2(2) = stran(1)/aux1
         !u2(3) = -stran(3)/aux1
         !u2(4) = stran(4)/aux1
         !
         !   !large strain (modify using the metric tensor)
         !cm(1,1) = d(1,1)*u2(1)*u2(1) + 2d0*d(1,3)*u2(1)*u2(3) &
         !        + d(3,3)*u2(3)*u2(3)
         !
         !cm(1,2) = d(1,3)*u2(1)*u2(3) + d(1,2)*u2(1)*u2(2)     &
         !        + d(3,3)*u2(3)*u2(3) + d(2,3)*u2(3)*u2(2)
         !
         !cm(1,3) = ( d(1,1)*u2(1)*u2(3) + d(1,2)*u2(1)*u2(3)   &
         !        + d(1,3)*( u2(1)*u2(1) + u2(1)*u2(2) + u2(3)*u2(3) )   &
         !        + d(2,3)*u2(3)*u2(3)                                   &
         !        + d(3,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/2d0
         !
         !cm(2,2) = d(2,2)*u2(2)*u2(2) + 2d0*d(2,3)*u2(2)*u2(3) &
         !        + d(3,3)*u2(3)*u2(3)
         !
         !cm(2,3) = ( d(1,2)*u2(2)*u2(3) + d(1,3)*u2(3)*u2(3)   &
         !        + d(2,2)*u2(2)*u2(3)                                   &
         !        + d(2,3)*( u2(1)*u2(2) + u2(2)*u2(2) +u2(3)*u2(3) )    &
         !        + d(3,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/2d0
         !
         !cm(3,3) = (d(3,3)*(u2(1)*u2(1)                        &
         !        + 2d0*u2(1)*u2(2)+u2(2)*u2(2))                         &
         !        + d(1,1)*u2(3)*u2(3) + 2d0*d(1,2)*u2(3)*u2(3)          &
         !        + 2d0*d(1,3)*( u2(1)*u2(3) + u2(2)*u2(3) )             &
         !        + d(2,2)*u2(3)*u2(3)                                   &
         !        + 2d0*d(2,3)*( u2(1)*u2(3) + u2(2)*u2(3) ) )/4d0
         !IF( nstre == 4 )THEN
         !  cm(1,4) = u2(1)*d(1,4)*u2(4)+ u2(3)*d(3,4)*u2(4)
         !  cm(2,4) = u2(2)*d(2,4)*u2(4)+ u2(3)*d(3,4)*u2(4)
         !  cm(3,4) = (u2(3)*(d(1,4)+d(2,4))*u2(4)+ ( u2(1)+ u2(2))*d(3,4)*u2(4))/2d0
         !  cm(4,4) =  u2(4)*d(4,4)*u2(4)
         !END IF
       END IF
     ELSE  !small strain
       cm      = d
     END IF

     ! scale D matrix
     IF( mtype == 6 )THEN
       IF( ntype == 1 )THEN    !plane stress
         daux(1:6) = areai*daux(1:6)
       ELSE                    !plane strain or axilsymmetric
         daux = areai*daux
       END IF
     ELSE
       k = 0
       DO i=1,nstre
         DO j=i,nstre
           k = k+1
           daux(k) = areai*cm(i,j)
         END DO
       END DO
     END IF

     ! strain-displacement matrix
     CALL bmat19(e%cd(:,:,g),bmatx,t,ntype,lb(3))

     CALL btdbpr(bmatx(1,1),daux(1),stiff(1),nvarl,nstre)

     IF( bbar )THEN
       k = 0
       DO j=1,nnode     !for each node
         DO i=1,2        !for each in-plane direction
           k = k+1
           aux1 = bmatx(k,1)+bmatx(k,2)
           IF( ntype == 3 .AND. i == 1 ) aux1 = aux1 + bmatx(k,4)
           bb(k) = bb(k) + aux1*e%area(g)
         END DO
       END DO

     END IF
     stres = e%stint(:,g)*areai
     ! geometric stiffness due to membrane part
     CALL kgmm19(e%cd(:,:,g),stres,stiff,ntype)

   END DO
   IF( bbar )THEN  !add volumetric part
     aux1 = km/SUM(e%area)
     CALL btdbpr(bb(1),aux1,stiff(1),nvarl,1)
   END IF
   CALL stiaux(6,e%lnods,nvarl,2,stiff(1),force(1),gstif(1) )

   e => e%next
 END DO

 RETURN

 END SUBROUTINE stif19
